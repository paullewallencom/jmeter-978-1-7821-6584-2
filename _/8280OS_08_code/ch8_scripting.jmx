<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1407511256000</longProp>
        <longProp name="ThreadGroup.end_time">1407511256000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="jp@gc - Dummy Sampler" enabled="false">
          <boolProp name="WAITING">true</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;!DOCTYPE html
  PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;&lt;head&gt;&lt;title&gt;HIBERNATE - Relational Persistence for Idiomatic Java&lt;/title&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/hibernate-single.css&quot;/&gt;&lt;meta name=&quot;generator&quot; content=&quot;DocBook XSL Stylesheets V1.76.1&quot;/&gt;&lt;meta xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;book&quot; title=&quot;HIBERNATE - Relational Persistence for Idiomatic Java&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;p xmlns:d=&quot;http://docbook.org/ns/docbook&quot; id=&quot;title&quot;&gt;&lt;a href=&quot;http://www.hibernate.org&quot; class=&quot;site_href&quot;&gt;&lt;strong&gt;Hibernate.org&lt;/strong&gt;&lt;/a&gt;&lt;a href=&quot;http://hibernate.org/Documentation/DocumentationOverview&quot; class=&quot;doc_href&quot;&gt;&lt;strong&gt;Community Documentation&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&lt;div&gt;&lt;h1 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e1&quot;/&gt;HIBERNATE - Relational Persistence for Idiomatic Java&lt;/h1&gt;&lt;/div&gt;&lt;div&gt;&lt;h2 class=&quot;subtitle&quot;&gt;Hibernate Reference Documentation&lt;/h2&gt;&lt;/div&gt;&lt;div&gt;&lt;div class=&quot;authorgroup&quot;&gt;
            &lt;div class=&quot;author&quot;&gt;&lt;h3 class=&quot;author&quot;&gt;
                &lt;span class=&quot;orgname&quot;&gt;&lt;a class=&quot;ulink&quot; href=&quot;http://hibernate.org&quot;&gt;The Hibernate Team&lt;/a&gt;&lt;/span&gt;
            &lt;/h3&gt;&lt;/div&gt;
            &lt;div class=&quot;othercredit&quot;&gt;&lt;h3 class=&quot;othercredit&quot;&gt;
                &lt;span class=&quot;orgname&quot;&gt;&lt;a class=&quot;ulink&quot; href=&quot;http://design.jboss.org/&quot;&gt;The JBoss Visual Design Team&lt;/a&gt;&lt;/span&gt;
            &lt;/h3&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;p class=&quot;releaseinfo&quot;&gt;4.3.6.Final&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;p class=&quot;copyright&quot;&gt;Copyright Â© 2004 Red Hat, Inc.&lt;/p&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;ln-d5e19.html&quot;&gt;Legal Notice&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;p class=&quot;pubdate&quot;&gt;2014-07-16&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;hr/&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;preface&quot;&gt;&lt;a href=&quot;#preface&quot;&gt;Preface&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#tutorial&quot;&gt;1. Tutorial&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp&quot;&gt;1.1. Part 1 - The first Hibernate Application&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-setup&quot;&gt;1.1.1. Setup&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-firstclass&quot;&gt;1.1.2. The first class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-mapping&quot;&gt;1.1.3. The mapping file&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-configuration&quot;&gt;1.1.4. Hibernate configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-mvn&quot;&gt;1.1.5. Building with Maven&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-helpers&quot;&gt;1.1.6. Startup and helpers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-workingpersistence&quot;&gt;1.1.7. Loading and storing objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations&quot;&gt;1.2. Part 2 - Mapping associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-mappinguser&quot;&gt;1.2.1. Mapping the Person class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-unidirset&quot;&gt;1.2.2. A unidirectional Set-based association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-working&quot;&gt;1.2.3. Working the association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-valuecollections&quot;&gt;1.2.4. Collection of values&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-bidirectional&quot;&gt;1.2.5. Bi-directional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-usingbidir&quot;&gt;1.2.6. Working bi-directional links&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp&quot;&gt;1.3. Part 3 - The EventManager web application&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-servlet&quot;&gt;1.3.1. Writing the basic servlet&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-processing&quot;&gt;1.3.2. Processing and rendering&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-deploy&quot;&gt;1.3.3. Deploying and testing&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-summary&quot;&gt;1.4. Summary&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#architecture&quot;&gt;2. Architecture&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview&quot;&gt;2.1. Overview&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-minimal&quot;&gt;2.1.1. Minimal architecture&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-comprehensive&quot;&gt;2.1.2. Comprehensive architecture&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-terms&quot;&gt;2.1.3. Basic APIs&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-current-session&quot;&gt;2.2. Contextual sessions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#session-configuration&quot;&gt;3. Configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-programmatic&quot;&gt;3.1. Programmatic configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-sessionfactory&quot;&gt;3.2. Obtaining a SessionFactory&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-hibernatejdbc&quot;&gt;3.3. JDBC connections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional&quot;&gt;3.4. Optional configuration properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-dialects&quot;&gt;3.4.1. SQL Dialects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-outerjoin&quot;&gt;3.4.2. Outer Join Fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-binarystreams&quot;&gt;3.4.3. Binary Streams&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-cacheprovider&quot;&gt;3.4.4. Second-level and query cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-querysubstitution&quot;&gt;3.4.5. Query Language Substitution&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-statistics&quot;&gt;3.4.6. Hibernate statistics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-logging&quot;&gt;3.5. Logging&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-namingstrategy&quot;&gt;3.6. Implementing a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e1655&quot;&gt;3.7. Implementing a PersisterClassProvider&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-xmlconfig&quot;&gt;3.8. XML configuration file&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-j2ee&quot;&gt;3.9. Java EE Application Server integration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-transactionstrategy&quot;&gt;3.9.1. Transaction strategy configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-jndi&quot;&gt;3.9.2. JNDI-bound &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-j2ee-currentsession&quot;&gt;3.9.3. Current Session context management with JTA&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#persistent-classes&quot;&gt;4. Persistent Classes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo&quot;&gt;4.1. A simple POJO example&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-constructor&quot;&gt;4.1.1. Implement a no-argument constructor&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-identifier&quot;&gt;4.1.2. Provide an identifier property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-final&quot;&gt;4.1.3. Prefer non-final classes (semi-optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-accessors&quot;&gt;4.1.4. Declare accessors and mutators for persistent fields (optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-inheritance&quot;&gt;4.2. Implementing inheritance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-equalshashcode&quot;&gt;4.3. Implementing &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-dynamicmodels&quot;&gt;4.4. Dynamic models&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-tuplizers&quot;&gt;4.5. Tuplizers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-entity-name-resolver&quot;&gt;4.6. EntityNameResolvers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#mapping&quot;&gt;5. Basic O/R Mapping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration&quot;&gt;5.1. Mapping declaration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-class&quot;&gt;5.1.1. Entity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-id&quot;&gt;5.1.2. Identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e2835&quot;&gt;5.1.3. Optimistic locking properties (optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-property&quot;&gt;5.1.4. Property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-component&quot;&gt;5.1.5. Embedded objects (aka components)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e3356&quot;&gt;5.1.6. Inheritance strategy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e3678&quot;&gt;5.1.7. Mapping one to one and one to many associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-naturalid&quot;&gt;5.1.8. Natural-id&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-anymapping&quot;&gt;5.1.9. Any&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-properties&quot;&gt;5.1.10. Properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e4065&quot;&gt;5.1.11. Some hbm.xml specificities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types&quot;&gt;5.2. Hibernate types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-entitiesvalues&quot;&gt;5.2.1. Entities and values&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-basictypes&quot;&gt;5.2.2. Basic value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-custom&quot;&gt;5.2.3. Custom value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-entityname&quot;&gt;5.3. Mapping a class more than once&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-quotedidentifiers&quot;&gt;5.4. SQL quoted identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-generated&quot;&gt;5.5. Generated properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-column-read-and-write&quot;&gt;5.6. Column transformers: read and write expressions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-database-object&quot;&gt;5.7. Auxiliary database objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#types&quot;&gt;6. Types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value&quot;&gt;6.1. Value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-basic&quot;&gt;6.1.1. Basic value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-composite&quot;&gt;6.1.2. Composite types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-collection&quot;&gt;6.1.3. Collection types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-entity&quot;&gt;6.2. Entity types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-category-significance&quot;&gt;6.3. Significance of type categories&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom&quot;&gt;6.4. Custom types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-type&quot;&gt;6.4.1. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-ut&quot;&gt;6.4.2. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-cut&quot;&gt;6.4.3. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-registry&quot;&gt;6.5. Type registry&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#collections&quot;&gt;7. Collection mapping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-persistent&quot;&gt;7.1. Persistent collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-mapping&quot;&gt;7.2. How to map collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-foreignkeys&quot;&gt;7.2.1. Collection foreign keys&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-indexed&quot;&gt;7.2.2. Indexed collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-ofvalues&quot;&gt;7.2.3. Collections of basic types and embeddable objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-advancedmappings&quot;&gt;7.3. Advanced collection mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-sorted&quot;&gt;7.3.1. Sorted collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-bidirectional&quot;&gt;7.3.2. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-indexedbidirectional&quot;&gt;7.3.3. Bidirectional associations with indexed collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-ternary&quot;&gt;7.3.4. Ternary associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-idbag&quot;&gt;7.3.5. &lt;code class=&quot;literal&quot;&gt;Using an &amp;lt;idbag&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-example&quot;&gt;7.4. Collection examples&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#associations&quot;&gt;8. Association Mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-intro&quot;&gt;8.1. Introduction&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional&quot;&gt;8.2. Unidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-m21&quot;&gt;8.2.1. Many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-121&quot;&gt;8.2.2. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-12m&quot;&gt;8.2.3. One-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join&quot;&gt;8.3. Unidirectional associations with join tables&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-12m&quot;&gt;8.3.1. One-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-m21&quot;&gt;8.3.2. Many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-121&quot;&gt;8.3.3. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-m2m&quot;&gt;8.3.4. Many-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional&quot;&gt;8.4. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-m21&quot;&gt;8.4.1. one-to-many / many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-121&quot;&gt;8.4.2. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join&quot;&gt;8.5. Bidirectional associations with join tables&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-12m&quot;&gt;8.5.1. one-to-many / many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-121&quot;&gt;8.5.2. one to one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-m2m&quot;&gt;8.5.3. Many-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-complex&quot;&gt;8.6. More complex association mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#components&quot;&gt;9. Component Mapping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-dependentobjects&quot;&gt;9.1. Dependent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-incollections&quot;&gt;9.2. Collections of dependent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-asmapindex&quot;&gt;9.3. Components as Map indices&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-compositeid&quot;&gt;9.4. Components as composite identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-dynamic&quot;&gt;9.5. Dynamic components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#inheritance&quot;&gt;10. Inheritance mapping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-strategies&quot;&gt;10.1. The three strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperclass&quot;&gt;10.1.1. Table per class hierarchy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tablepersubclass&quot;&gt;10.1.2. Table per subclass&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tablepersubclass-discriminator&quot;&gt;10.1.3. Table per subclass: using a discriminator&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-mixing-tableperclass-tablepersubclass&quot;&gt;10.1.4. Mixing table per class hierarchy with table per subclass&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperconcrete&quot;&gt;10.1.5. Table per concrete class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperconcreate-polymorphism&quot;&gt;10.1.6. Table per concrete class using implicit polymorphism&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-mixingpolymorphism&quot;&gt;10.1.7. Mixing implicit polymorphism with other inheritance mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-limitations&quot;&gt;10.2. Limitations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#objectstate&quot;&gt;11. Working with objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-overview&quot;&gt;11.1. Hibernate object states&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-makingpersistent&quot;&gt;11.2. Making objects persistent&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-loading&quot;&gt;11.3. Loading an object&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying&quot;&gt;11.4. Querying&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying-executing&quot;&gt;11.4.1. Executing queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-filtering&quot;&gt;11.4.2. Filtering collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objecstate-querying-criteria&quot;&gt;11.4.3. Criteria queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying-nativesql&quot;&gt;11.4.4. Queries in native SQL&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-modifying&quot;&gt;11.5. Modifying persistent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-detached&quot;&gt;11.6. Modifying detached objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-saveorupdate&quot;&gt;11.7. Automatic state detection&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-deleting&quot;&gt;11.8. Deleting persistent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-replicating&quot;&gt;11.9. Replicating object between two different datastores&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-flushing&quot;&gt;11.10. Flushing the Session&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-transitive&quot;&gt;11.11. Transitive persistence&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-metadata&quot;&gt;11.12. Using metadata&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#readonly&quot;&gt;12. Read-only entities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api&quot;&gt;12.1. Making persistent entities read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-immutable&quot;&gt;12.1.1. Entities of immutable classes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-loaddefault&quot;&gt;12.1.2. Loading persistent entities as read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-querycriteria&quot;&gt;12.1.3. Loading read-only entities from an HQL query/criteria&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-entity&quot;&gt;12.1.4. Making a persistent entity read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes&quot;&gt;12.2. Read-only affect on property type&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes-simple&quot;&gt;12.2.1. Simple properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-prop-types-unidir&quot;&gt;12.2.2. Unidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes-bidir&quot;&gt;12.2.3. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#transactions&quot;&gt;13. Transactions and Concurrency&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics&quot;&gt;13.1. Session and transaction scopes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-uow&quot;&gt;13.1.1. Unit of work&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-apptx&quot;&gt;13.1.2. Long conversations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-identity&quot;&gt;13.1.3. Considering object identity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-issues&quot;&gt;13.1.4. Common issues&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation&quot;&gt;13.2. Database transaction demarcation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-nonmanaged&quot;&gt;13.2.1. Non-managed environment&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-jta&quot;&gt;13.2.2. Using JTA&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-exceptions&quot;&gt;13.2.3. Exception handling&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-timeout&quot;&gt;13.2.4. Transaction timeout&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic&quot;&gt;13.3. Optimistic concurrency control&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-manual&quot;&gt;13.3.1. Application version checking&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-longsession&quot;&gt;13.3.2. Extended session and automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-detached&quot;&gt;13.3.3. Detached objects and automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-customizing&quot;&gt;13.3.4. Customizing automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-locking&quot;&gt;13.4. Pessimistic locking&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-connection-release&quot;&gt;13.5. Connection release modes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#events&quot;&gt;14. Interceptors and events&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-interceptors&quot;&gt;14.1. Interceptors&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-events&quot;&gt;14.2. Event system&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-decl-security&quot;&gt;14.3. Hibernate declarative security&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#batch&quot;&gt;15. Batch processing&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-inserts&quot;&gt;15.1. Batch inserts&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-update&quot;&gt;15.2. Batch updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-statelesssession&quot;&gt;15.3. The StatelessSession interface&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-direct&quot;&gt;15.4. DML-style operations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#queryhql&quot;&gt;16. HQL: The Hibernate Query Language&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-casesensitivity&quot;&gt;16.1. Case Sensitivity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-from&quot;&gt;16.2. The from clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-joins&quot;&gt;16.3. Associations and joins&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-joins-forms&quot;&gt;16.4. Forms of join syntax&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-identifier-property&quot;&gt;16.5. Referring to identifier property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-select&quot;&gt;16.6. The select clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-aggregation&quot;&gt;16.7. Aggregate functions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-polymorphism&quot;&gt;16.8. Polymorphic queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-where&quot;&gt;16.9. The where clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-expressions&quot;&gt;16.10. Expressions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-ordering&quot;&gt;16.11. The order by clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-grouping&quot;&gt;16.12. The group by clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-subqueries&quot;&gt;16.13. Subqueries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-examples&quot;&gt;16.14. HQL examples&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-bulk&quot;&gt;16.15. Bulk update and delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-tipstricks&quot;&gt;16.16. Tips &amp;amp; Tricks&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-components&quot;&gt;16.17. Components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-tuple&quot;&gt;16.18. Row value constructor syntax&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#querycriteria&quot;&gt;17. Criteria Queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-creating&quot;&gt;17.1. Creating a &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; instance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-narrowing&quot;&gt;17.2. Narrowing the result set&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-ordering&quot;&gt;17.3. Ordering the results&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-associations&quot;&gt;17.4. Associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-dynamicfetching&quot;&gt;17.5. Dynamic association fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-components&quot;&gt;17.6. Components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-collections&quot;&gt;17.7. Collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-examples&quot;&gt;17.8. Example queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-projection&quot;&gt;17.9. Projections, aggregation and grouping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-detachedqueries&quot;&gt;17.10. Detached queries and subqueries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#query-criteria-naturalid&quot;&gt;17.11. Queries by natural identifier&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#querysql&quot;&gt;18. Native SQL&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-creating&quot;&gt;18.1. Using a &lt;code class=&quot;literal&quot;&gt;SQLQuery&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8301&quot;&gt;18.1.1. Scalar queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8325&quot;&gt;18.1.2. Entity queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8343&quot;&gt;18.1.3. Handling associations and collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8356&quot;&gt;18.1.4. Returning multiple entities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8448&quot;&gt;18.1.5. Returning non-managed entities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8460&quot;&gt;18.1.6. Handling inheritance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8463&quot;&gt;18.1.7. Parameters&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-namedqueries&quot;&gt;18.2. Named SQL queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#propertyresults&quot;&gt;18.2.1. Using return-property to explicitly specify column/alias
      names&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#sp_query&quot;&gt;18.2.2. Using stored procedures for querying&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-cud&quot;&gt;18.3. Custom SQL for create, update and delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-load&quot;&gt;18.4. Custom SQL for loading&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#filters&quot;&gt;19. Filtering data&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-filters&quot;&gt;19.1. Hibernate filters&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#performance&quot;&gt;20. Improving performance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching&quot;&gt;20.1. Fetching strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-lazy&quot;&gt;20.1.1. Working with lazy associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-custom&quot;&gt;20.1.2. Tuning fetch strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-proxies&quot;&gt;20.1.3. Single-ended association proxies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-initialization&quot;&gt;20.1.4. Initializing collections and proxies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-batch&quot;&gt;20.1.5. Using batch fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-subselect&quot;&gt;20.1.6. Using subselect fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-profiles&quot;&gt;20.1.7. Fetch profiles&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-lazyproperties&quot;&gt;20.1.8. Using lazy property fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache&quot;&gt;20.2. The Second Level Cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-mapping&quot;&gt;20.2.1. Cache mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-readonly&quot;&gt;20.2.2. Strategy: read only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-readwrite&quot;&gt;20.2.3. Strategy: read/write&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-nonstrict&quot;&gt;20.2.4. Strategy: nonstrict read/write&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-transactional&quot;&gt;20.2.5. Strategy: transactional&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-compat-matrix&quot;&gt;20.2.6. Cache-provider/concurrency-strategy compatibility&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-sessioncache&quot;&gt;20.3. Managing the caches&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache&quot;&gt;20.4. The Query Cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache-enable&quot;&gt;20.4.1. Enabling query caching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache-regions&quot;&gt;20.4.2. Query cache regions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#bytecode-enhancement&quot;&gt;20.5. Bytecode Enhancement&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-impl-interface&quot;&gt;20.5.1. Implementing &lt;code class=&quot;classname&quot;&gt;org.hibernate.engine.spi.ManagedEntity&lt;/code&gt; interface&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-impl-interface-by-wrapper&quot;&gt;20.5.2. Runtime instrument&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-buildtime-instrument&quot;&gt;20.5.3. Build-time instrument&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections&quot;&gt;20.6. Understanding Collection performance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-taxonomy&quot;&gt;20.6.1. Taxonomy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-mostefficientupdate&quot;&gt;20.6.2. Lists, maps, idbags and sets are the most efficient collections
      to update&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-mostefficentinverse&quot;&gt;20.6.3. Bags and lists are the most efficient inverse collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-oneshotdelete&quot;&gt;20.6.4. One shot delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring&quot;&gt;20.7. Monitoring performance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring-sf&quot;&gt;20.7.1. Monitoring a SessionFactory&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring-metrics&quot;&gt;20.7.2. Metrics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#toolsetguide&quot;&gt;21. Toolset Guide&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1&quot;&gt;21.1. Automatic schema generation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-2&quot;&gt;21.1.1. Customizing the schema&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-3&quot;&gt;21.1.2. Running the tool&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-4&quot;&gt;21.1.3. Properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-5&quot;&gt;21.1.4. Using Ant&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-6&quot;&gt;21.1.5. Incremental schema updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-7&quot;&gt;21.1.6. Using Ant for incremental schema updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-8&quot;&gt;21.1.7. Schema validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-9&quot;&gt;21.1.8. Using Ant for schema validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#additionalmodules&quot;&gt;22. Additional modules&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9895&quot;&gt;22.1. Bean Validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9904&quot;&gt;22.1.1. Adding Bean Validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9907&quot;&gt;22.1.2. Configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9963&quot;&gt;22.1.3. Catching violations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9976&quot;&gt;22.1.4. Database schema&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9999&quot;&gt;22.2. Hibernate Search&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e10001&quot;&gt;22.2.1. Description&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e10006&quot;&gt;22.2.2. Integration with Hibernate Annotations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#example-parentchild&quot;&gt;23. Example: Parent/Child&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-collections&quot;&gt;23.1. A note about collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-bidir&quot;&gt;23.2. Bidirectional one-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-cascades&quot;&gt;23.3. Cascading life cycle&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-update&quot;&gt;23.4. Cascades and &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-conclusion&quot;&gt;23.5. Conclusion&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#example-weblog&quot;&gt;24. Example: Weblog Application&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-classes&quot;&gt;24.1. Persistent Classes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-mappings&quot;&gt;24.2. Hibernate Mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-code&quot;&gt;24.3. Hibernate Code&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#example-mappings&quot;&gt;25. Example: Various Mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-emp&quot;&gt;25.1. Employer/Employee&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-authorwork&quot;&gt;25.2. Author/Work&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-customerorderproduct&quot;&gt;25.3. Customer/Order/Product&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#misc&quot;&gt;25.4. Miscellaneous example mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-typed-onetone&quot;&gt;25.4.1. &quot;Typed&quot; one-to-one association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-composite-key&quot;&gt;25.4.2. Composite key example&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-composite-key-manytomany&quot;&gt;25.4.3. Many-to-many with shared composite key attribute&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-content-discrimination&quot;&gt;25.4.4. Content based discrimination&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-association-alternatekeys&quot;&gt;25.4.5. Associations on alternate keys&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#best-practices&quot;&gt;26. Best Practices&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;chapter&quot;&gt;&lt;a href=&quot;#portability&quot;&gt;27. Database Portability Considerations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-basics&quot;&gt;27.1. Portability Basics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-dialect&quot;&gt;27.2. Dialect&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-dialectresolver&quot;&gt;27.3. Dialect resolution&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-idgen&quot;&gt;27.4. Identifier generation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-functions&quot;&gt;27.5. Database functions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-types&quot;&gt;27.6. Type mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;bibliography&quot;&gt;&lt;a href=&quot;#d5e10421&quot;&gt;References&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;&lt;div class=&quot;list-of-tables&quot;&gt;&lt;p&gt;&lt;strong&gt;List of Tables&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;3.1. &lt;a href=&quot;#d5e741&quot;&gt;Hibernate JDBC Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.2. &lt;a href=&quot;#d5e789&quot;&gt;Hibernate Datasource Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.3. &lt;a href=&quot;#configuration-optional-properties&quot;&gt;Hibernate Configuration Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.4. &lt;a href=&quot;#configuration-jdbc-properties&quot;&gt;Hibernate JDBC and Connection Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.5. &lt;a href=&quot;#configuration-cache-properties&quot;&gt;Hibernate Cache Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.6. &lt;a href=&quot;#configuration-transaction-properties&quot;&gt;Hibernate Transaction Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.7. &lt;a href=&quot;#configuration-misc-properties&quot;&gt;Miscellaneous Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.8. &lt;a href=&quot;#sql-dialects&quot;&gt;Hibernate SQL Dialects
        (&lt;code class=&quot;literal&quot;&gt;hibernate.dialect&lt;/code&gt;)&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.9. &lt;a href=&quot;#log-categories&quot;&gt;Hibernate Log Categories&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;3.10. &lt;a href=&quot;#jtamanagerlookup&quot;&gt;JTA TransactionManagers&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;10.1. &lt;a href=&quot;#d5e6117&quot;&gt;Features of inheritance mappings&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;12.1. &lt;a href=&quot;#readonly-proptype-summary&quot;&gt;Affect of read-only entity on property types&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.1. &lt;a href=&quot;#aliasinjection-summary&quot;&gt;Alias injection names&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.1. &lt;a href=&quot;#cacheproviders&quot;&gt;Cache Providers&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.2. &lt;a href=&quot;#d5e9236&quot;&gt;Cache Concurrency Strategy Support&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;21.1. &lt;a href=&quot;#schemattributes-summary&quot;&gt;Summary&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;21.2. &lt;a href=&quot;#d5e9691&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; Command Line Options&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;21.3. &lt;a href=&quot;#d5e9761&quot;&gt;SchemaExport Connection Properties&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;21.4. &lt;a href=&quot;#d5e9806&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; Command Line Options&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;21.5. &lt;a href=&quot;#d5e9859&quot;&gt;&lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; Command Line Options&lt;/a&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;&lt;div class=&quot;list-of-examples&quot;&gt;&lt;p&gt;&lt;strong&gt;List of Examples&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;4.1. &lt;a href=&quot;#persistent-classes-pojo-example-cat&quot;&gt;Simple POJO representing a cat&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.2. &lt;a href=&quot;#persistent-classes-pojo-final-example-disable-proxies-xml&quot;&gt;Disabling proxies in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.3. &lt;a href=&quot;#persistent-classes-pojo-final-example-disable-proxies-ann&quot;&gt;Disabling proxies in annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.4. &lt;a href=&quot;#persistent-classes-pojo-final-example-proxy-interface-xml&quot;&gt;Proxying an interface in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.5. &lt;a href=&quot;#persistent-classes-pojo-final-example-proxy-interface-ann&quot;&gt;Proxying an interface in annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.6. &lt;a href=&quot;#example-specify-custom-tuplizer-ann&quot;&gt;Specify custom tuplizers in annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;4.7. &lt;a href=&quot;#example-specify-custom-tuplizer-xml&quot;&gt;Specify custom tuplizers in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;5.1. &lt;a href=&quot;#d5e3750&quot;&gt;@NotFound annotation&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;5.2. &lt;a href=&quot;#d5e3754&quot;&gt;@OnDelete annotation&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;5.3. &lt;a href=&quot;#d5e3759&quot;&gt;@ForeignKey annotation&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;5.4. &lt;a href=&quot;#d5e3878&quot;&gt;One to One association&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;6.1. &lt;a href=&quot;#types-custom-type-ex-definition&quot;&gt;Defining and registering the custom Type&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;6.2. &lt;a href=&quot;#types-custom-ut-ex-definition&quot;&gt;Defining the custom UserType&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;6.3. &lt;a href=&quot;#types-custom-cut-ex-definition&quot;&gt;Defining the custom CompositeUserType&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;6.4. &lt;a href=&quot;#type-registry-override-ex&quot;&gt;Overriding the standard &lt;code class=&quot;classname&quot;&gt;StringType&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;6.5. &lt;a href=&quot;#d5e5094&quot;&gt;Snippet from BasicType.java&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.1. &lt;a href=&quot;#d5e5121&quot;&gt;Hibernate uses its own collection implementations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.2. &lt;a href=&quot;#example.collection.mapping.annotations&quot;&gt;Collection mapping using @OneToMany and @JoinColumn&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.3. &lt;a href=&quot;#example-one-to-many-with-join-table&quot;&gt;Collection mapping using @OneToMany and @JoinTable&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.4. &lt;a href=&quot;#example.collections.set&quot;&gt;Mapping a Set using &amp;lt;set&amp;gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.5. &lt;a href=&quot;#d5e5171&quot;&gt;options of &amp;lt;one-to-many&amp;gt; element&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.6. &lt;a href=&quot;#d5e5213&quot;&gt;Elements of the &amp;lt;map&amp;gt; mapping&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.7. &lt;a href=&quot;#d5e5325&quot;&gt;Ordered lists using &lt;code class=&quot;classname&quot;&gt;@OrderBy&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.8. &lt;a href=&quot;#d5e5333&quot;&gt;Explicit index column using
          &lt;code class=&quot;classname&quot;&gt;@OrderColumn&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.9. &lt;a href=&quot;#d5e5348&quot;&gt;index-list element for indexed collections in xml
          mapping&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.10. &lt;a href=&quot;#d5e5374&quot;&gt;Use of target entity property as map key via
          &lt;code class=&quot;classname&quot;&gt;@MapKey&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.11. &lt;a href=&quot;#d5e5401&quot;&gt;Map key as basic type using
          &lt;code class=&quot;classname&quot;&gt;@MapKeyColumn&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.12. &lt;a href=&quot;#d5e5416&quot;&gt;map-key xml mapping element&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.13. &lt;a href=&quot;#d5e5434&quot;&gt;map-key-many-to-many&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.14. &lt;a href=&quot;#d5e5456&quot;&gt;Collection of basic types mapped via
        &lt;code class=&quot;classname&quot;&gt;@ElementCollection&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.15. &lt;a href=&quot;#d5e5468&quot;&gt;@ElementCollection for embeddable objects&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.16. &lt;a href=&quot;#d5e5484&quot;&gt;&amp;lt;element&amp;gt; tag for collection values using mapping
        files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.17. &lt;a href=&quot;#d5e5513&quot;&gt;Sorted collection with @Sort&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.18. &lt;a href=&quot;#d5e5518&quot;&gt;Sorted collection using xml mapping&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.19. &lt;a href=&quot;#d5e5537&quot;&gt;Sorting in database using order-by&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.20. &lt;a href=&quot;#d5e5546&quot;&gt;Sorting via a query filter&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.21. &lt;a href=&quot;#d5e5564&quot;&gt;Bidirectional one to many with many to one side as association
        owner&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.22. &lt;a href=&quot;#d5e5575&quot;&gt;Bidirectional association with one to many side as
        owner&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.23. &lt;a href=&quot;#d5e5580&quot;&gt;Bidirectional one to many via Hibernate mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.24. &lt;a href=&quot;#d5e5588&quot;&gt;Many to many association via @ManyToMany&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.25. &lt;a href=&quot;#d5e5601&quot;&gt;Default values for &lt;code class=&quot;classname&quot;&gt;@ManyToMany&lt;/code&gt;
        (uni-directional)&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.26. &lt;a href=&quot;#d5e5615&quot;&gt;Default values for &lt;code class=&quot;classname&quot;&gt;@ManyToMany&lt;/code&gt;
        (bi-directional)&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.27. &lt;a href=&quot;#example-many-to-many-mapping-file&quot;&gt;Many to many association using Hibernate mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.28. &lt;a href=&quot;#d5e5636&quot;&gt;Effect of inverse vs. non-inverse side of many to many
        associations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.29. &lt;a href=&quot;#d5e5646&quot;&gt;Bidirectional association with indexed collection&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.30. &lt;a href=&quot;#d5e5651&quot;&gt;Bidirectional association with indexed collection, but no index
        column&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.31. &lt;a href=&quot;#d5e5659&quot;&gt;Ternary association mapping&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.32. &lt;a href=&quot;#d5e5686&quot;&gt;Example classes &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt; and
      &lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.33. &lt;a href=&quot;#d5e5692&quot;&gt;One to many unidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.34. &lt;a href=&quot;#d5e5696&quot;&gt;One to many unidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.35. &lt;a href=&quot;#d5e5701&quot;&gt;Table definitions for unidirectional
      &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt;-&lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;
      relationship&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.36. &lt;a href=&quot;#d5e5708&quot;&gt;One to many bidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.37. &lt;a href=&quot;#d5e5712&quot;&gt;One to many bidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.38. &lt;a href=&quot;#d5e5718&quot;&gt;Table definitions for bidirectional
      &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt;-&lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;
      relationship&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.39. &lt;a href=&quot;#d5e5725&quot;&gt;Enforcing NOT NULL constraint in unidirectional relation using
      annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.40. &lt;a href=&quot;#d5e5728&quot;&gt;Enforcing NOT NULL constraint in unidirectional relation using
      mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.41. &lt;a href=&quot;#d5e5732&quot;&gt;Many to many &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt; relationship
      using annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.42. &lt;a href=&quot;#d5e5736&quot;&gt;Many to many &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt; relationship
      using mapping files&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;7.43. &lt;a href=&quot;#d5e5741&quot;&gt;Table definitions for many to many releationship&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;11.1. &lt;a href=&quot;#example-named-query-annotation&quot;&gt;Defining a named query using
          &lt;code class=&quot;classname&quot;&gt;@NamedQuery&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;11.2. &lt;a href=&quot;#d5e6392&quot;&gt;Defining a named query using
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;query&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;11.3. &lt;a href=&quot;#example-parameter-binding-named-query&quot;&gt;Parameter binding of a named query&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;11.4. &lt;a href=&quot;#example-one-to-many-with-orphan-removal&quot;&gt;&lt;code class=&quot;literal&quot;&gt;@OneToMany&lt;/code&gt; with
      &lt;code class=&quot;literal&quot;&gt;orphanRemoval&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.1. &lt;a href=&quot;#d5e8473&quot;&gt;Named sql query using the &amp;lt;sql-query&amp;gt; maping
      element&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.2. &lt;a href=&quot;#d5e8476&quot;&gt;Execution of a named query&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.3. &lt;a href=&quot;#d5e8482&quot;&gt;Named sql query with association&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.4. &lt;a href=&quot;#d5e8487&quot;&gt;Named query returning a scalar&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.5. &lt;a href=&quot;#d5e8493&quot;&gt;&amp;lt;resultset&amp;gt; mapping used to externalize mapping
      information&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.6. &lt;a href=&quot;#d5e8497&quot;&gt;Programmatically specifying the result mapping information
      &lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.7. &lt;a href=&quot;#example-named-native-query-annotation-with-result-set-mapping&quot;&gt;Named SQL query using &lt;code class=&quot;classname&quot;&gt;@NamedNativeQuery&lt;/code&gt;
      together with &lt;code class=&quot;classname&quot;&gt;@SqlResultSetMapping&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.8. &lt;a href=&quot;#example-implicit-result-set-mapping&quot;&gt;Implicit result set mapping&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.9. &lt;a href=&quot;#example-field-result-annotation-with-associations&quot;&gt;Using dot notation in @FieldResult for specifying associations
      &lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.10. &lt;a href=&quot;#d5e8540&quot;&gt;Scalar values via &lt;code class=&quot;classname&quot;&gt;@ColumnResult&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.11. &lt;a href=&quot;#example-custom-crdu-via-annotations&quot;&gt;Custom CRUD via annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.12. &lt;a href=&quot;#example-custom-crdu-via-xml&quot;&gt;Custom CRUD XML&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.13. &lt;a href=&quot;#example-overriding-sql-collections-annotations&quot;&gt;Overriding SQL statements for collections using
      annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.14. &lt;a href=&quot;#d5e8639&quot;&gt;Overriding SQL statements for secondary tables&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;18.15. &lt;a href=&quot;#d5e8646&quot;&gt;Stored procedures and their return value&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;19.1. &lt;a href=&quot;#d5e8685&quot;&gt;@FilterDef and @Filter annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;19.2. &lt;a href=&quot;#d5e8691&quot;&gt;Using &lt;code class=&quot;classname&quot;&gt;@FilterJoinTable&lt;/code&gt; for filterting on
      the association table&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;19.3. &lt;a href=&quot;#d5e8704&quot;&gt;@Filter annotation, disabling deduceAliasInjectionPoints&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;19.4. &lt;a href=&quot;#d5e8710&quot;&gt;Defining a filter definition via
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter-def&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;19.5. &lt;a href=&quot;#d5e8715&quot;&gt;Attaching a filter to a class or collection using
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.1. &lt;a href=&quot;#d5e9018&quot;&gt;Specifying a fetch profile using
        &lt;code class=&quot;classname&quot;&gt;@FetchProfile&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.2. &lt;a href=&quot;#d5e9022&quot;&gt;Specifying a fetch profile using
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;fetch-profile&amp;gt;&lt;/code&gt; outside
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; node&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.3. &lt;a href=&quot;#d5e9027&quot;&gt;Specifying a fetch profile using
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;fetch-profile&amp;gt;&lt;/code&gt; inside
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; node&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.4. &lt;a href=&quot;#d5e9034&quot;&gt;Activating a fetch profile for a given
        &lt;code class=&quot;classname&quot;&gt;Session&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.5. &lt;a href=&quot;#example-cache-concurrency-with-cache-annotation&quot;&gt;Definition of cache concurrency strategy via
        &lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.6. &lt;a href=&quot;#d5e9148&quot;&gt;Caching collections using annotations&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.7. &lt;a href=&quot;#example-cache-annotation-with-attributes&quot;&gt;&lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt; annotation with
        attributes&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.8. &lt;a href=&quot;#example-hibernate-cache-mapping-element&quot;&gt;The Hibernate &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt; mapping
        element&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.9. &lt;a href=&quot;#d5e9285&quot;&gt;Explcitly evicting a cached instance from the first level cache
      using &lt;code class=&quot;methodname&quot;&gt;Session.evict()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.10. &lt;a href=&quot;#d5e9296&quot;&gt;Second-level cache eviction via
      &lt;code class=&quot;methodname&quot;&gt;SessionFactoty.evict() &lt;/code&gt;and
      &lt;code class=&quot;methodname&quot;&gt;SessionFacyory.evictCollection()&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.11. &lt;a href=&quot;#d5e9319&quot;&gt;Browsing the second-level cache entries via the
      &lt;code class=&quot;classname&quot;&gt;Statistics&lt;/code&gt; API&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;20.12. &lt;a href=&quot;#d5e9324&quot;&gt;Enabling Hibernate statistics&lt;/a&gt;&lt;/dt&gt;&lt;dt&gt;22.1. &lt;a href=&quot;#d5e9956&quot;&gt;Using custom groups for validation&lt;/a&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;div class=&quot;preface&quot; title=&quot;Preface&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;preface&quot;/&gt;Preface&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Working with both Object-Oriented software and Relational Databases can be cumbersome and time consuming.
        Development costs are significantly higher due to a paradigm mismatch between how data is represented in
        objects versus relational databases.  Hibernate is an Object/Relational Mapping solution for Java environments.
        The term Object/Relational Mapping refers to the technique of mapping data from an object model representation
        to a relational data model representation (and visa versa).  See
        &lt;a class=&quot;ulink&quot; href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;http://en.wikipedia.org/wiki/Object-relational_mapping&lt;/a&gt;
        for a good high-level discussion.
    &lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;
            While having a strong background in SQL is not required to use Hibernate, having a basic understanding of
            the concepts can greatly help you understand Hibernate more fully and quickly.  Probably the single
            best background is an understanding of data modeling principles.  You might want to consider these resources
            as a good starting point:
            &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;ulink&quot; href=&quot;http://www.agiledata.org/essays/dataModeling101.html&quot;&gt;http://www.agiledata.org/essays/dataModeling101.html&lt;/a&gt;
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;a class=&quot;ulink&quot; href=&quot;http://en.wikipedia.org/wiki/Data_modeling&quot;&gt;http://en.wikipedia.org/wiki/Data_modeling&lt;/a&gt;
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;
        Hibernate not only takes care of the mapping from Java classes to database tables (and from Java data types to
        SQL data types), but also provides data query and retrieval facilities. It can significantly reduce
        development time otherwise spent with manual data handling in SQL and JDBC.  Hibernateâs design goal is to
        relieve the developer from 95% of common data persistence-related programming tasks by eliminating the need for
        manual, hand-crafted data processing using SQL and JDBC.  However, unlike many other persistence solutions,
        Hibernate does not hide the power of SQL from you and guarantees that your investment in relational technology
        and knowledge is as valid as always.
    &lt;/p&gt;

    &lt;p&gt;
        Hibernate may not be the best solution for data-centric applications that only use stored-procedures to
        implement the business logic in the database, it is most useful with object-oriented domain models and business
        logic in the Java-based middle-tier. However, Hibernate can certainly help you to remove or encapsulate
        vendor-specific SQL code and will help with the common task of result set translation from a tabular
        representation to a graph of objects.
    &lt;/p&gt;

    &lt;p&gt;
        If you are new to Hibernate and Object/Relational Mapping or even Java,
        please follow these steps:
    &lt;/p&gt;

    &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                Read &lt;a class=&quot;xref&quot; href=&quot;#tutorial&quot; title=&quot;Chapter 1. Tutorial&quot;&gt;Chapter 1, &lt;em&gt;Tutorial&lt;/em&gt;&lt;/a&gt; for a tutorial with step-by-step
                instructions. The source code for the tutorial is included in the
                distribution in the &lt;code class=&quot;literal&quot;&gt;doc/reference/tutorial/&lt;/code&gt;
                directory.
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                Read &lt;a class=&quot;xref&quot; href=&quot;#architecture&quot; title=&quot;Chapter 2. Architecture&quot;&gt;Chapter 2, &lt;em&gt;Architecture&lt;/em&gt;&lt;/a&gt; to understand the environments where
                Hibernate can be used.
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                View the &lt;code class=&quot;literal&quot;&gt;eg/&lt;/code&gt; directory in the Hibernate
                distribution. It contains a simple standalone application. Copy your
                JDBC driver to the &lt;code class=&quot;literal&quot;&gt;lib/&lt;/code&gt; directory and edit
                &lt;code class=&quot;literal&quot;&gt;etc/hibernate.properties&lt;/code&gt;, specifying correct values for
                your database. From a command prompt in the distribution directory,
                type &lt;code class=&quot;literal&quot;&gt;ant eg&lt;/code&gt; (using Ant), or under Windows, type
                &lt;code class=&quot;literal&quot;&gt;build eg&lt;/code&gt;.
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                Use this reference documentation as your primary source of
                information.  Consider reading [&lt;a href=&quot;#biblio-JPwH&quot; class=&quot;biblioref&quot; title=&quot;[JPwH]&quot;&gt;&lt;abbr class=&quot;abbrev&quot;&gt;JPwH&lt;/abbr&gt;&lt;/a&gt;]
                if you need more help with application design, or if you prefer
                a step-by-step tutorial. Also visit
                &lt;a class=&quot;ulink&quot; href=&quot;http://caveatemptor.hibernate.org&quot;&gt;http://caveatemptor.hibernate.org&lt;/a&gt;
                and download the example application from [&lt;a href=&quot;#biblio-JPwH&quot; class=&quot;biblioref&quot; title=&quot;[JPwH]&quot;&gt;&lt;abbr class=&quot;abbrev&quot;&gt;JPwH&lt;/abbr&gt;&lt;/a&gt;].
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                FAQs are answered on the Hibernate website.
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                Links to third party demos, examples, and tutorials are maintained
                on the Hibernate website.
            &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                The Community Area on the Hibernate website is a good resource for
                design patterns and various integration solutions (Tomcat, JBoss AS,
                Struts, EJB, etc.).
            &lt;/p&gt;
        &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

    &lt;p&gt;
        There are a number of ways to become involved in the Hibernate community, including
        &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Trying stuff out and reporting bugs.  See
                    &lt;a class=&quot;ulink&quot; href=&quot;http://hibernate.org/issuetracker.html&quot;&gt;http://hibernate.org/issuetracker.html&lt;/a&gt;
                    details.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Trying your hand at fixing some bugs or implementing enhancements.  Again, see
                    &lt;a class=&quot;ulink&quot; href=&quot;http://hibernate.org/issuetracker.html&quot;&gt;http://hibernate.org/issuetracker.html&lt;/a&gt;
                    details.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;a class=&quot;ulink&quot; href=&quot;http://hibernate.org/community.html&quot;&gt;http://hibernate.org/community.html&lt;/a&gt;
                    lists a few ways to engage in the community.
                    &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                            &lt;p&gt;
                                There are forums for users to ask questions and receive help from the community.
                            &lt;/p&gt;
                        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                            &lt;p&gt;
                                There are also
                                &lt;a class=&quot;ulink&quot; href=&quot;http://en.wikipedia.org/wiki/Internet_Relay_Chat&quot;&gt;IRC&lt;/a&gt;
                                channels for both user and developer discussions.
                            &lt;/p&gt;
                        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Helping improve or translate this documentation.  Contact us on the developer mailing list
                    if you have interest.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Evangelizing Hibernate within your organization.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
    &lt;/p&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 1. Tutorial&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial&quot;/&gt;Chapter 1. Tutorial&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp&quot;&gt;1.1. Part 1 - The first Hibernate Application&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-setup&quot;&gt;1.1.1. Setup&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-firstclass&quot;&gt;1.1.2. The first class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-mapping&quot;&gt;1.1.3. The mapping file&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-configuration&quot;&gt;1.1.4. Hibernate configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-mvn&quot;&gt;1.1.5. Building with Maven&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-helpers&quot;&gt;1.1.6. Startup and helpers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-firstapp-workingpersistence&quot;&gt;1.1.7. Loading and storing objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations&quot;&gt;1.2. Part 2 - Mapping associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-mappinguser&quot;&gt;1.2.1. Mapping the Person class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-unidirset&quot;&gt;1.2.2. A unidirectional Set-based association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-working&quot;&gt;1.2.3. Working the association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-valuecollections&quot;&gt;1.2.4. Collection of values&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-bidirectional&quot;&gt;1.2.5. Bi-directional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-associations-usingbidir&quot;&gt;1.2.6. Working bi-directional links&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp&quot;&gt;1.3. Part 3 - The EventManager web application&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-servlet&quot;&gt;1.3.1. Writing the basic servlet&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-processing&quot;&gt;1.3.2. Processing and rendering&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-webapp-deploy&quot;&gt;1.3.3. Deploying and testing&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#tutorial-summary&quot;&gt;1.4. Summary&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Intended for new users, this chapter provides an step-by-step introduction
        to Hibernate, starting with a simple application using an in-memory database.  The
        tutorial is based on an earlier tutorial developed by Michael Gloegl.  All
        code is contained in the &lt;code class=&quot;filename&quot;&gt;tutorials/web&lt;/code&gt; directory of the project
        source.
    &lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;
            This tutorial expects the user have knowledge of both Java and
            SQL.  If you have a limited knowledge of JAVA or SQL, it is advised
            that you start with a good introduction to that technology prior
            to attempting to learn Hibernate.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;
            The distribution contains another example application under
            the &lt;code class=&quot;filename&quot;&gt;tutorial/eg&lt;/code&gt; project source
            directory.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;1.1. Part 1 - The first Hibernate Application&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp&quot;/&gt;1.1. Part 1 - The first Hibernate Application&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            For this example, we will set up a small database application that can store
            events we want to attend and information about the host(s) of these events.
        &lt;/p&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
            &lt;p&gt;
                Although you can use whatever database you feel comfortable using, we
                will use &lt;a class=&quot;ulink&quot; href=&quot;http://hsqldb.org/&quot;&gt;HSQLDB&lt;/a&gt;
                (an in-memory, Java database) to avoid describing installation/setup of any particular
                database servers.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.1. Setup&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-setup&quot;/&gt;1.1.1. Setup&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The first thing we need to do is to set up the development environment.  We
                will be using the &quot;standard layout&quot; advocated by alot of build tools such
                as &lt;a class=&quot;ulink&quot; href=&quot;http://maven.apache.org&quot;&gt;Maven&lt;/a&gt;.
                Maven, in particular, has a
                good resource describing this
                &lt;a class=&quot;ulink&quot; href=&quot;http://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html&quot;&gt;layout&lt;/a&gt;.
                As this tutorial is to be a web application, we will be creating and making
                use of &lt;code class=&quot;filename&quot;&gt;src/main/java&lt;/code&gt;, &lt;code class=&quot;filename&quot;&gt;src/main/resources&lt;/code&gt;
                and &lt;code class=&quot;filename&quot;&gt;src/main/webapp&lt;/code&gt; directories.
            &lt;/p&gt;

            &lt;p&gt;
                We will be using Maven in this tutorial, taking advantage of its
                transitive dependency management capabilities as well as the ability of
                many IDEs to automatically set up a project for us based on the maven descriptor.
            &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&amp;gt;

    &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;

    &amp;lt;groupId&amp;gt;org.hibernate.tutorials&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;hibernate-tutorial&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.0-SNAPSHOT&amp;lt;/version&amp;gt;
    &amp;lt;name&amp;gt;First Hibernate Tutorial&amp;lt;/name&amp;gt;

    &amp;lt;build&amp;gt;
         &amp;lt;!-- we dont want the version to be part of the generated war file name --&amp;gt;
         &amp;lt;finalName&amp;gt;${artifactId}&amp;lt;/finalName&amp;gt;
    &amp;lt;/build&amp;gt;

    &amp;lt;dependencies&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.hibernate&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;hibernate-core&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- Because this is a web app, we also have a dependency on the servlet api. --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javax.servlet&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;servlet-api&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;!-- Hibernate uses slf4j for logging, for our purposes here use the simple backend --&amp;gt;
        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;slf4j-simple&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;

        &amp;lt;dependency&amp;gt;
            &amp;lt;groupId&amp;gt;javassist&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;javassist&amp;lt;/artifactId&amp;gt;
        &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;

&amp;lt;/project&amp;gt;&lt;/pre&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
                &lt;p&gt;
                    It is not a requirement to use Maven.  If you wish to use something else to
                    build this tutorial (such as Ant), the layout will remain the same.  The only
                    change is that you will need to manually account for all the needed
                    dependencies.  If you use something like
                    &lt;a class=&quot;ulink&quot; href=&quot;http://ant.apache.org/ivy/&quot;&gt;Ivy&lt;/a&gt;
                    providing transitive dependency management you would still use the dependencies
                    mentioned below.  Otherwise, you&apos;d need to grab &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;all&lt;/em&gt;&lt;/span&gt;
                    dependencies, both explicit and transitive, and add them to the project&apos;s
                    classpath.  If working from the Hibernate distribution bundle, this would mean
                    &lt;code class=&quot;filename&quot;&gt;hibernate3.jar&lt;/code&gt;, all artifacts in the
                    &lt;code class=&quot;filename&quot;&gt;lib/required&lt;/code&gt; directory and all files from either the
                    &lt;code class=&quot;filename&quot;&gt;lib/bytecode/cglib&lt;/code&gt; or &lt;code class=&quot;filename&quot;&gt;lib/bytecode/javassist&lt;/code&gt;
                    directory; additionally you will need both the servlet-api jar and one of the slf4j
                    logging backends.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Save this file as &lt;code class=&quot;filename&quot;&gt;pom.xml&lt;/code&gt; in the project root directory.
            &lt;/p&gt;
        &lt;/div&gt;


        &lt;div class=&quot;section&quot; title=&quot;1.1.2. The first class&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-firstclass&quot;/&gt;1.1.2. The first class&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            
            &lt;p&gt;
                Next, we create a class that represents the event we want to store in the
                database; it is a simple JavaBean class with some properties:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.tutorial.domain;

import java.util.Date;

public class Event {
    private Long id;

    private String title;
    private Date date;

    public Event() {}

    public Long getId() {
        return id;
    }

    private void setId(Long id) {
        this.id = id;
    }

    public Date getDate() {
        return date;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }
}&lt;/pre&gt;

            &lt;p&gt;
                This class uses standard JavaBean naming conventions for property
                getter and setter methods, as well as private visibility for the
                fields.  Although this is the recommended design, it is not required.
                Hibernate can also access fields directly,  the benefit of accessor
                methods is robustness for refactoring.
            &lt;/p&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; property holds a unique identifier value
                for a particular event.  All persistent entity classes (there are
                less important dependent classes as well) will need such an identifier
                property if we want to use the full feature set of Hibernate. In fact,
                most applications, especially web applications, need to distinguish
                objects by identifier, so you should consider this a feature rather
                than a limitation.  However, we usually do not manipulate the identity
                of an object, hence the setter method should be private.  Only Hibernate
                will assign identifiers when an object is saved.  Hibernate can access
                public, private, and protected accessor methods, as well as public,
                private and protected fields directly.  The choice is up to you and
                you can match it to fit your application design.
            &lt;/p&gt;

            &lt;p&gt;
                The no-argument constructor is a requirement for all persistent
                classes; Hibernate has to create objects for you, using Java
                Reflection.  The constructor can be private, however package or public
                visibility is required for runtime proxy generation and efficient data
                retrieval without bytecode instrumentation.
            &lt;/p&gt;

            &lt;p&gt;
                Save this file to the &lt;code class=&quot;filename&quot;&gt;src/main/java/org/hibernate/tutorial/domain&lt;/code&gt;
                directory.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.3. The mapping file&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-mapping&quot;/&gt;1.1.3. The mapping file&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Hibernate needs to know how to load and store objects of the
                persistent class.  This is where the Hibernate mapping file
                comes into play. The mapping file tells Hibernate what table in
                the database it has to access, and what columns in that table
                it should use.
            &lt;/p&gt;

            &lt;p&gt;
                The basic structure of a mapping file looks like this:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-mapping package=&quot;org.hibernate.tutorial.domain&quot;&amp;gt;
[...]
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Hibernate DTD is sophisticated.  You can use it for auto-completion
                of XML mapping elements and attributes in your editor or IDE.
                Opening up the DTD file in your text editor is the easiest way to
                get an overview of all elements and attributes, and to view the
                defaults, as well as some comments.  Hibernate will not load the
                DTD file from the web, but first look it up from the classpath of
                the application.  The DTD file is included in
                &lt;code class=&quot;filename&quot;&gt;hibernate-core.jar&lt;/code&gt; (it is also included in the
                &lt;code class=&quot;filename&quot;&gt;hibernate3.jar&lt;/code&gt;, if using the distribution bundle).
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    We will omit the DTD declaration in future examples to shorten the code. It is,
                    of course, not optional.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Between the two &lt;code class=&quot;literal&quot;&gt;hibernate-mapping&lt;/code&gt; tags, include a
                &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; element. All persistent entity classes (again, there
                might be dependent classes later on, which are not first-class entities) need
                a mapping to a table in the SQL database:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping package=&quot;org.hibernate.tutorial.domain&quot;&amp;gt;

    &amp;lt;class name=&quot;Event&quot; table=&quot;EVENTS&quot;&amp;gt;

    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                So far we have told Hibernate how to persist and load object of
                class &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; to the table
                &lt;code class=&quot;literal&quot;&gt;EVENTS&lt;/code&gt;. Each instance is now represented by a
                row in that table.  Now we can continue by mapping the unique
                identifier property to the tables primary key.  As we do not want
                to care about handling this identifier, we configure Hibernate&apos;s
                identifier generation strategy for a surrogate primary key column:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping package=&quot;org.hibernate.tutorial.domain&quot;&amp;gt;

    &amp;lt;class name=&quot;Event&quot; table=&quot;EVENTS&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot; column=&quot;EVENT_ID&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; element is the declaration of the
                identifier property.  The &lt;code class=&quot;literal&quot;&gt;name=&quot;id&quot;&lt;/code&gt; mapping
                attribute declares the name of the JavaBean property and tells
                Hibernate to use the &lt;code class=&quot;literal&quot;&gt;getId()&lt;/code&gt; and
                &lt;code class=&quot;literal&quot;&gt;setId()&lt;/code&gt; methods to access the property.  The
                column attribute tells Hibernate which column of the
                &lt;code class=&quot;literal&quot;&gt;EVENTS&lt;/code&gt; table holds the primary key value.
            &lt;/p&gt;

            &lt;p&gt;
                The nested &lt;code class=&quot;literal&quot;&gt;generator&lt;/code&gt; element specifies the
                identifier generation strategy (aka how are identifier values
                generated?).  In this case we choose &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;,
                which offers a level of portability depending on the configured
                database dialect.  Hibernate supports database generated, globally
                unique, as well as application assigned, identifiers.  Identifier
                value generation is also one of Hibernate&apos;s many extension points
                and you can plugin in your own strategy.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt; is no longer consider the best strategy in terms of portability.  for further
                    discussion, see &lt;a class=&quot;xref&quot; href=&quot;#portability-idgen&quot; title=&quot;27.4. Identifier generation&quot;&gt;Section 27.4, âIdentifier generationâ&lt;/a&gt;
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Lastly, we need to tell Hibernate about the remaining entity class
                properties.  By default, no properties of the class are considered
                persistent:
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
&amp;lt;hibernate-mapping package=&quot;org.hibernate.tutorial.domain&quot;&amp;gt;

    &amp;lt;class name=&quot;Event&quot; table=&quot;EVENTS&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot; column=&quot;EVENT_ID&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;date&quot; type=&quot;timestamp&quot; column=&quot;EVENT_DATE&quot;/&amp;gt;
        &amp;lt;property name=&quot;title&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
            
            &lt;p&gt;
                Similar to the &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; element, the
                &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; attribute of the
                &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt; element tells Hibernate which getter
                and setter methods to use.  In this case, Hibernate will search
                for &lt;code class=&quot;literal&quot;&gt;getDate()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;setDate()&lt;/code&gt;,
                &lt;code class=&quot;literal&quot;&gt;getTitle()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;setTitle()&lt;/code&gt;
                methods.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Why does the &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt; property mapping include the
                    &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; attribute, but the &lt;code class=&quot;literal&quot;&gt;title&lt;/code&gt;
                    does not? Without the &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; attribute, Hibernate
                    by default uses the property name as the column name. This works for
                    &lt;code class=&quot;literal&quot;&gt;title&lt;/code&gt;, however, &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt; is a reserved
                    keyword in most databases so you will need to map it to a different name.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;title&lt;/code&gt; mapping also lacks a &lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; attribute. The
                types declared and used in the mapping files are not Java data types; they are not SQL
                database types either.  These types are called &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate mapping types&lt;/em&gt;&lt;/span&gt;,
                converters which can translate from Java to SQL data types and vice versa.  Again,
                Hibernate will try to determine the correct conversion and mapping type itself if
                the &lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; attribute is not present in the mapping. In some cases this
                automatic detection using Reflection on the Java class might not have the default you
                expect or need. This is the case with the &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt; property. Hibernate cannot
                know if the property, which is of &lt;code class=&quot;literal&quot;&gt;java.util.Date&lt;/code&gt;, should map to a
                SQL &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;timestamp&lt;/code&gt;, or &lt;code class=&quot;literal&quot;&gt;time&lt;/code&gt; column.
                Full date and time information is preserved by mapping the property with a
                &lt;code class=&quot;literal&quot;&gt;timestamp&lt;/code&gt; converter.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
                &lt;p&gt;
                    Hibernate makes this mapping type determination using reflection when the mapping files
                    are processed.  This can take time and resources, so if startup performance is important
                    you should consider explicitly defining the type to use.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Save this mapping file as
                &lt;code class=&quot;filename&quot;&gt;src/main/resources/org/hibernate/tutorial/domain/Event.hbm.xml&lt;/code&gt;.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.4. Hibernate configuration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-configuration&quot;/&gt;1.1.4. Hibernate configuration&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                At this point, you should have the persistent class and its mapping
                file in place. It is now time to configure Hibernate.  First let&apos;s set up
                HSQLDB to run in &quot;server mode&quot;
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    We do this so that the data remains between runs.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                We will utilize the Maven exec plugin to launch the HSQLDB server
                by running:
                &lt;span class=&quot;command&quot;&gt;&lt;strong&gt; mvn exec:java -Dexec.mainClass=&quot;org.hsqldb.Server&quot; -Dexec.args=&quot;-database.0 file:target/data/tutorial&quot;&lt;/strong&gt;&lt;/span&gt;
                You will see it start up and bind to a TCP/IP socket; this is where
                our application will connect later.  If you want to start
                with a fresh database during this tutorial, shutdown HSQLDB, delete
                all files in the &lt;code class=&quot;filename&quot;&gt;target/data&lt;/code&gt; directory,
                and start HSQLDB again.
            &lt;/p&gt;

            &lt;p&gt;
                Hibernate will be connecting to the database on behalf of your application, so it needs to know
                how to obtain connections.  For this tutorial we will be using a standalone connection
                pool (as opposed to a &lt;code class=&quot;interfacename&quot;&gt;javax.sql.DataSource&lt;/code&gt;).  Hibernate comes with
                support for two third-party open source JDBC connection pools:
                &lt;a class=&quot;ulink&quot; href=&quot;https://sourceforge.net/projects/c3p0&quot;&gt;c3p0&lt;/a&gt;
                and
                &lt;a class=&quot;ulink&quot; href=&quot;http://proxool.sourceforge.net/&quot;&gt;proxool&lt;/a&gt;.
                However, we will be using the Hibernate built-in connection pool for this tutorial.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;caution&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Caution&lt;/h2&gt;
                &lt;p&gt;
                    The built-in Hibernate connection pool is in no way intended for production use.  It
                    lacks several features found on any decent connection pool.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                For Hibernate&apos;s configuration, we can use a simple &lt;code class=&quot;literal&quot;&gt;hibernate.properties&lt;/code&gt; file, a
                more sophisticated &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt; file, or even complete
                programmatic setup. Most users prefer the XML configuration file:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-configuration PUBLIC
        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-configuration&amp;gt;

    &amp;lt;session-factory&amp;gt;

        &amp;lt;!-- Database connection settings --&amp;gt;
        &amp;lt;property name=&quot;connection.driver_class&quot;&amp;gt;org.hsqldb.jdbcDriver&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;connection.url&quot;&amp;gt;jdbc:hsqldb:hsql://localhost&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;connection.username&quot;&amp;gt;sa&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;connection.password&quot;&amp;gt;&amp;lt;/property&amp;gt;

        &amp;lt;!-- JDBC connection pool (use the built-in) --&amp;gt;
        &amp;lt;property name=&quot;connection.pool_size&quot;&amp;gt;1&amp;lt;/property&amp;gt;

        &amp;lt;!-- SQL dialect --&amp;gt;
        &amp;lt;property name=&quot;dialect&quot;&amp;gt;org.hibernate.dialect.HSQLDialect&amp;lt;/property&amp;gt;

        &amp;lt;!-- Enable Hibernate&apos;s automatic session context management --&amp;gt;
        &amp;lt;property name=&quot;current_session_context_class&quot;&amp;gt;thread&amp;lt;/property&amp;gt;

        &amp;lt;!-- Disable the second-level cache  --&amp;gt;
        &amp;lt;property name=&quot;cache.provider_class&quot;&amp;gt;org.hibernate.cache.internal.NoCacheProvider&amp;lt;/property&amp;gt;

        &amp;lt;!-- Echo all executed SQL to stdout --&amp;gt;
        &amp;lt;property name=&quot;show_sql&quot;&amp;gt;true&amp;lt;/property&amp;gt;

        &amp;lt;!-- Drop and re-create the database schema on startup --&amp;gt;
        &amp;lt;property name=&quot;hbm2ddl.auto&quot;&amp;gt;update&amp;lt;/property&amp;gt;

        &amp;lt;mapping resource=&quot;org/hibernate/tutorial/domain/Event.hbm.xml&quot;/&amp;gt;

    &amp;lt;/session-factory&amp;gt;

&amp;lt;/hibernate-configuration&amp;gt;&lt;/pre&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;Notice that this configuration file specifies a different DTD&lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                You configure Hibernate&apos;s &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;. SessionFactory is a global
                factory responsible for a particular database. If you have several databases, for easier
                startup you should use several &lt;code class=&quot;literal&quot;&gt;&amp;lt;session-factory&amp;gt;&lt;/code&gt; configurations in
                several configuration files.
            &lt;/p&gt;

            &lt;p&gt;
                The first four &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt; elements contain the necessary
                configuration for the JDBC connection. The dialect &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;
                element specifies the particular SQL variant Hibernate generates.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
                &lt;p&gt;
                    In most cases, Hibernate is able to properly determine which dialect to use.  See
                    &lt;a class=&quot;xref&quot; href=&quot;#portability-dialectresolver&quot; title=&quot;27.3. Dialect resolution&quot;&gt;Section 27.3, âDialect resolutionâ&lt;/a&gt; for more information.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Hibernate&apos;s automatic session management for persistence contexts is particularly useful
                in this context.  The &lt;code class=&quot;literal&quot;&gt;hbm2ddl.auto&lt;/code&gt; option turns on automatic generation of
                database schemas directly into the database. This can also be turned
                off by removing the configuration option, or redirected to a file with the help of
                the &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; Ant task. Finally, add the mapping file(s)
                for persistent classes to the configuration.
            &lt;/p&gt;

            &lt;p&gt;
                Save this file as &lt;code class=&quot;filename&quot;&gt;hibernate.cfg.xml&lt;/code&gt; into the
                &lt;code class=&quot;filename&quot;&gt;src/main/resources&lt;/code&gt; directory.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.5. Building with Maven&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-mvn&quot;/&gt;1.1.5. Building with Maven&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                We will now build the tutorial with Maven.  You will need to
                have Maven installed; it is available from the
                &lt;a class=&quot;ulink&quot; href=&quot;http://maven.apache.org/download.html&quot;&gt;Maven download page&lt;/a&gt;.
                Maven will read the &lt;code class=&quot;filename&quot;&gt;/pom.xml&lt;/code&gt; file we created
                earlier and know how to perform some basic project tasks.  First,
                lets run the &lt;code class=&quot;literal&quot;&gt;compile&lt;/code&gt; goal to make sure we can compile
                everything so far:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;[hibernateTutorial]$ mvn compile
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Building First Hibernate Tutorial
[INFO]    task-segment: [compile]
[INFO] ------------------------------------------------------------------------
[INFO] [resources:resources]
[INFO] Using default encoding to copy filtered resources.
[INFO] [compiler:compile]
[INFO] Compiling 1 source file to /home/steve/projects/sandbox/hibernateTutorial/target/classes
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESSFUL
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2 seconds
[INFO] Finished at: Tue Jun 09 12:25:25 CDT 2009
[INFO] Final Memory: 5M/547M
[INFO] ------------------------------------------------------------------------&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.6. Startup and helpers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-helpers&quot;/&gt;1.1.6. Startup and helpers&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                It is time to load and store some &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt;
                objects, but first you have to complete the setup with some
                infrastructure code. You have to startup Hibernate by building
                a global &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;
                object and storing it somewhere for easy access in application code.  A
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; is used to
                obtain &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; instances.
                A &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; represents a
                single-threaded unit of work.  The
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; is a
                thread-safe global object that is instantiated once.
            &lt;/p&gt;

            &lt;p&gt;
                We will create a &lt;code class=&quot;literal&quot;&gt;HibernateUtil&lt;/code&gt; helper class that
                takes care of startup and makes accessing the
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; more convenient.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.tutorial.util;

import org.hibernate.SessionFactory;
import org.hibernate.boot.registry.StandardServiceRegistryBuilder;
import org.hibernate.cfg.Configuration;

public class HibernateUtil {

    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            // Create the SessionFactory from hibernate.cfg.xml
            new Configuration().configure().buildSessionFactory(
			    new StandardServiceRegistryBuilder().build() );
        }
        catch (Throwable ex) {
            // Make sure you log the exception, as it might be swallowed
            System.err.println(&quot;Initial SessionFactory creation failed.&quot; + ex);
            throw new ExceptionInInitializerError(ex);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }

}&lt;/pre&gt;

            &lt;p&gt;
                Save this code as
                &lt;code class=&quot;filename&quot;&gt;src/main/java/org/hibernate/tutorial/util/HibernateUtil.java&lt;/code&gt;
            &lt;/p&gt;

            &lt;p&gt;
                This class not only produces the global
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; reference in
                its static initializer; it also hides the fact that it uses a
                static singleton.  We might just as well have looked up the
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; reference from
                JNDI in an application server or any other location for that matter.
            &lt;/p&gt;

            &lt;p&gt;
                If you give the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;
                a name in your configuration, Hibernate will try to bind it to
                JNDI under that name after it has been built.  Another, better option is to
                use a JMX deployment and let the JMX-capable container instantiate and bind
                a &lt;code class=&quot;literal&quot;&gt;HibernateService&lt;/code&gt; to JNDI. Such advanced options are
                discussed later.
            &lt;/p&gt;

            &lt;p&gt;
                You now need to configure a logging
                system.  Hibernate uses commons logging and provides two choices: Log4j and
                JDK 1.4 logging. Most developers prefer Log4j: copy &lt;code class=&quot;literal&quot;&gt;log4j.properties&lt;/code&gt;
                from the Hibernate distribution in the &lt;code class=&quot;literal&quot;&gt;etc/&lt;/code&gt; directory to
                your &lt;code class=&quot;literal&quot;&gt;src&lt;/code&gt; directory, next to &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt;.
                If you prefer to have
                more verbose output than that provided in the example configuration, you can change the settings.  By default, only the Hibernate startup message is shown on stdout.
            &lt;/p&gt;

            &lt;p&gt;
                The tutorial infrastructure is complete and you are now ready to do some real work with
                Hibernate.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.1.7. Loading and storing objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-firstapp-workingpersistence&quot;/&gt;1.1.7. Loading and storing objects&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                We are now ready to start doing some real work with Hibernate.
                Let&apos;s start by writing an &lt;code class=&quot;literal&quot;&gt;EventManager&lt;/code&gt; class
                with a &lt;code class=&quot;literal&quot;&gt;main()&lt;/code&gt; method:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.tutorial;

import org.hibernate.Session;

import java.util.*;

import org.hibernate.tutorial.domain.Event;
import org.hibernate.tutorial.util.HibernateUtil;

public class EventManager {

    public static void main(String[] args) {
        EventManager mgr = new EventManager();

        if (args[0].equals(&quot;store&quot;)) {
            mgr.createAndStoreEvent(&quot;My Event&quot;, new Date());
        }

        HibernateUtil.getSessionFactory().close();
    }

    private void createAndStoreEvent(String title, Date theDate) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();

        Event theEvent = new Event();
        theEvent.setTitle(title);
        theEvent.setDate(theDate);
        session.save(theEvent);

        session.getTransaction().commit();
    }

}&lt;/pre&gt;

            &lt;p&gt;
                In &lt;code class=&quot;literal&quot;&gt;createAndStoreEvent()&lt;/code&gt; we created a new
                &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; object and handed it over to Hibernate.
                At that point, Hibernate takes care of the SQL and executes an
                &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; on the database.
            &lt;/p&gt;

            &lt;p&gt;
                A &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; is designed to
                represent a single unit of work (a single atomic piece of work
                to be performed).  For now we will keep things simple and assume
                a one-to-one granularity between a Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; and a database
                transaction.  To shield our code from the actual underlying
                transaction system we use the Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt; API.
                In this particular case we are using JDBC-based transactional
                semantics, but it could also run with JTA.
            &lt;/p&gt;

            &lt;p&gt;
                What does &lt;code class=&quot;literal&quot;&gt;sessionFactory.getCurrentSession()&lt;/code&gt; do?
                First, you can call it as many times and anywhere you like
                once you get hold of your
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;.
                The &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; method always returns
                the &quot;current&quot; unit of work.  Remember that we switched
                the configuration option for this mechanism to &quot;thread&quot; in our
                &lt;code class=&quot;filename&quot;&gt;src/main/resources/hibernate.cfg.xml&lt;/code&gt;?
                Due to that setting, the context of a current unit of work is bound
                to the current Java thread that executes the application.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    Hibernate offers three methods of current session tracking.
                    The &quot;thread&quot; based method is not intended for production use;
                    it is merely useful for prototyping and tutorials such as this
                    one.  Current session tracking is discussed in more detail
                    later on.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                A &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; begins when the
                first call to &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; is made for
                the current thread.  It is then bound by Hibernate to the current
                thread.  When the transaction ends, either through commit or
                rollback, Hibernate automatically unbinds the
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; from the thread
                and closes it for you. If you call
                &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; again, you get a new
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; and can start a
                new unit of work.
            &lt;/p&gt;

            &lt;p&gt;
                Related to the unit of work scope, should the Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; be used to execute
                one or several database operations?  The above example uses one
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; for one operation.
                However this is pure coincidence; the example is just not complex
                enough to show any other approach. The scope of a Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; is flexible but you
                should never design your application to use a new Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; for
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;every&lt;/em&gt;&lt;/span&gt; database operation. Even though it is
                used in the following examples, consider
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-operation&lt;/em&gt;&lt;/span&gt; an anti-pattern.
                A real web application is shown later in the tutorial which will
                help illustrate this.
            &lt;/p&gt;

            &lt;p&gt;
                See &lt;a class=&quot;xref&quot; href=&quot;#transactions&quot; title=&quot;Chapter 13. Transactions and Concurrency&quot;&gt;Chapter 13, &lt;em&gt;Transactions and Concurrency&lt;/em&gt;&lt;/a&gt; for more information
                about transaction handling and demarcation. The previous
                example also skipped any error handling and rollback.
            &lt;/p&gt;

            &lt;p&gt;
                To run this, we will make use of the Maven exec plugin to call our class
                with the necessary classpath setup:
                &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;mvn exec:java -Dexec.mainClass=&quot;org.hibernate.tutorial.EventManager&quot; -Dexec.args=&quot;store&quot;&lt;/strong&gt;&lt;/span&gt;
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    You may need to perform &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;mvn compile&lt;/strong&gt;&lt;/span&gt; first.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                You should see Hibernate starting up and, depending on your configuration,
                lots of log output. Towards the end, the following line will be displayed:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;[java] Hibernate: insert into EVENTS (EVENT_DATE, title, EVENT_ID) values (?, ?, ?)&lt;/pre&gt;

            &lt;p&gt;
                This is the &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; executed by Hibernate.
            &lt;/p&gt;

            &lt;p&gt;
                To list stored events an option is added to the main method:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;        if (args[0].equals(&quot;store&quot;)) {
            mgr.createAndStoreEvent(&quot;My Event&quot;, new Date());
        }
        else if (args[0].equals(&quot;list&quot;)) {
            List events = mgr.listEvents();
            for (int i = 0; i &amp;lt; events.size(); i++) {
                Event theEvent = (Event) events.get(i);
                System.out.println(
                        &quot;Event: &quot; + theEvent.getTitle() + &quot; Time: &quot; + theEvent.getDate()
                );
            }
        }&lt;/pre&gt;

            &lt;p&gt;
                A new &lt;code class=&quot;literal&quot;&gt;listEvents() method is also added&lt;/code&gt;:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private List listEvents() {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();
        List result = session.createQuery(&quot;from Event&quot;).list();
        session.getTransaction().commit();
        return result;
    }&lt;/pre&gt;

            &lt;p&gt;
                Here, we are using a Hibernate Query Language (HQL) query to load all existing
                &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; objects from the database. Hibernate will generate the
                appropriate SQL, send it to the database and populate &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; objects
                with the data. You can create more complex queries with HQL. See &lt;a class=&quot;xref&quot; href=&quot;#queryhql&quot; title=&quot;Chapter 16. HQL: The Hibernate Query Language&quot;&gt;Chapter 16, &lt;em&gt;HQL: The Hibernate Query Language&lt;/em&gt;&lt;/a&gt;
                for more information.
            &lt;/p&gt;

            &lt;p&gt;
                Now we can call our new functionality, again using the Maven exec plugin:
                &lt;span class=&quot;command&quot;&gt;&lt;strong&gt;mvn exec:java -Dexec.mainClass=&quot;org.hibernate.tutorial.EventManager&quot; -Dexec.args=&quot;list&quot;&lt;/strong&gt;&lt;/span&gt;
            &lt;/p&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;1.2. Part 2 - Mapping associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations&quot;/&gt;1.2. Part 2 - Mapping associations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            So far we have mapped a single persistent entity class to a table in
            isolation.  Let&apos;s expand on that a bit and add some class associations.
            We will add people to the application and store a list of events in
            which they participate.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.1. Mapping the Person class&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-mappinguser&quot;/&gt;1.2.1. Mapping the Person class&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The first cut of the &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; class looks like this:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.tutorial.domain;

public class Person {

    private Long id;
    private int age;
    private String firstname;
    private String lastname;

    public Person() {}

    // Accessor methods for all properties, private setter for &apos;id&apos;

}&lt;/pre&gt;

            &lt;p&gt;
                Save this to a file named
                &lt;code class=&quot;filename&quot;&gt;src/main/java/org/hibernate/tutorial/domain/Person.java&lt;/code&gt;
            &lt;/p&gt;

            &lt;p&gt;
                Next, create the new mapping file as
                &lt;code class=&quot;filename&quot;&gt;src/main/resources/org/hibernate/tutorial/domain/Person.hbm.xml&lt;/code&gt;
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping package=&quot;org.hibernate.tutorial.domain&quot;&amp;gt;

    &amp;lt;class name=&quot;Person&quot; table=&quot;PERSON&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot; column=&quot;PERSON_ID&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;age&quot;/&amp;gt;
        &amp;lt;property name=&quot;firstname&quot;/&amp;gt;
        &amp;lt;property name=&quot;lastname&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Finally, add the new mapping to Hibernate&apos;s configuration:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;mapping resource=&quot;org/hibernate/tutorial/domain/Event.hbm.xml&quot;/&amp;gt;
&amp;lt;mapping resource=&quot;org/hibernate/tutorial/domain/Person.hbm.xml&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Create an association between these two entities. Persons
                can participate in events, and events have participants. The design questions
                you have to deal with are: directionality, multiplicity, and collection
                behavior.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.2. A unidirectional Set-based association&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-unidirset&quot;/&gt;1.2.2. A unidirectional Set-based association&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                By adding a collection of events to the &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;
                class, you can easily navigate to the events for a particular person,
                without executing an explicit query - by calling
                &lt;code class=&quot;literal&quot;&gt;Person#getEvents&lt;/code&gt;.  Multi-valued associations
                are represented in Hibernate by one of the Java Collection Framework
                contracts; here we choose a &lt;code class=&quot;interfacename&quot;&gt;java.util.Set&lt;/code&gt;
                because the collection will not contain duplicate elements and the ordering
                is not relevant to our examples:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Person {

    private Set events = new HashSet();

    public Set getEvents() {
        return events;
    }

    public void setEvents(Set events) {
        this.events = events;
    }
}&lt;/pre&gt;

            &lt;p&gt;
                Before mapping this association, let&apos;s consider the other side.
                We could just keep this unidirectional or create another
                collection on the &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt;, if we wanted to be
                able to navigate it from both directions.  This is not necessary,
                from a functional perspective. You can always execute an explicit
                query to retrieve the participants for a particular event.  This
                is a design choice left to you, but what is clear from this
                discussion is the multiplicity of the association: &quot;many&quot; valued
                on both sides is called a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;many-to-many&lt;/em&gt;&lt;/span&gt;
                association. Hence, we use Hibernate&apos;s many-to-many mapping:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot; table=&quot;PERSON&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;PERSON_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;age&quot;/&amp;gt;
    &amp;lt;property name=&quot;firstname&quot;/&amp;gt;
    &amp;lt;property name=&quot;lastname&quot;/&amp;gt;

    &amp;lt;set name=&quot;events&quot; table=&quot;PERSON_EVENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PERSON_ID&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;EVENT_ID&quot; class=&quot;Event&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;

&amp;lt;/class&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Hibernate supports a broad range of collection mappings, a
                &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt; being most common.  For a many-to-many
                association, or &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;n:m&lt;/em&gt;&lt;/span&gt; entity relationship, an
                association table is required.  Each row in this table represents
                a link between a person and an event.  The table name is
                declared using the &lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; attribute of the
                &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt; element.  The identifier column name in
                the association, for the person side, is defined with the
                &lt;code class=&quot;literal&quot;&gt;key&lt;/code&gt; element, the column name for the event&apos;s
                side with the &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; attribute of the
                &lt;code class=&quot;literal&quot;&gt;many-to-many&lt;/code&gt;. You also have to tell Hibernate
                the class of the objects in your collection (the class on the
                other side of the collection of references).
            &lt;/p&gt;

            &lt;p&gt;
                The database schema for this mapping is therefore:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
    _____________        __________________
   |             |      |                  |       _____________
   |   EVENTS    |      |   PERSON_EVENT   |      |             |
   |_____________|      |__________________|      |    PERSON   |
   |             |      |                  |      |_____________|
   | *EVENT_ID   | &amp;lt;--&amp;gt; | *EVENT_ID        |      |             |
   |  EVENT_DATE |      | *PERSON_ID       | &amp;lt;--&amp;gt; | *PERSON_ID  |
   |  TITLE      |      |__________________|      |  AGE        |
   |_____________|                                |  FIRSTNAME  |
                                                  |  LASTNAME   |
                                                  |_____________|
 &lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.3. Working the association&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-working&quot;/&gt;1.2.3. Working the association&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Now we will bring some people and events together in a new method in &lt;code class=&quot;literal&quot;&gt;EventManager&lt;/code&gt;:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private void addPersonToEvent(Long personId, Long eventId) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();

        Person aPerson = (Person) session.load(Person.class, personId);
        Event anEvent = (Event) session.load(Event.class, eventId);
        aPerson.getEvents().add(anEvent);

        session.getTransaction().commit();
    }&lt;/pre&gt;

            &lt;p&gt;
                After loading a &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; and an
                &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt;, simply modify the collection using the
                normal collection methods. There is no explicit call to
                &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;;
                Hibernate automatically detects that the collection has been modified
                and needs to be updated. This is called
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;automatic dirty checking&lt;/em&gt;&lt;/span&gt;. You can also try
                it by modifying the name or the date property of any of your
                objects.  As long as they are in &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;persistent&lt;/em&gt;&lt;/span&gt;
                state, that is, bound to a particular Hibernate
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;, Hibernate
                monitors any changes and executes SQL in a write-behind fashion.
                The process of synchronizing the memory state with the database,
                usually only at the end of a unit of work, is called
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;flushing&lt;/em&gt;&lt;/span&gt;.  In our code, the unit of work
                ends with a commit, or rollback, of the database transaction.
            &lt;/p&gt;

            &lt;p&gt;
                You can load person and event in different units of work.  Or
                you can modify an object outside of a
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;, when it
                is not in persistent state (if it was persistent before, this
                state is called &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;detached&lt;/em&gt;&lt;/span&gt;).  You can even
                modify a collection when it is detached:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private void addPersonToEvent(Long personId, Long eventId) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();

        Person aPerson = (Person) session
                .createQuery(&quot;select p from Person p left join fetch p.events where p.id = :pid&quot;)
                .setParameter(&quot;pid&quot;, personId)
                .uniqueResult(); // Eager fetch the collection so we can use it detached
        Event anEvent = (Event) session.load(Event.class, eventId);

        session.getTransaction().commit();

        // End of first unit of work

        aPerson.getEvents().add(anEvent); // aPerson (and its collection) is detached

        // Begin second unit of work

        Session session2 = HibernateUtil.getSessionFactory().getCurrentSession();
        session2.beginTransaction();
        session2.update(aPerson); // Reattachment of aPerson

        session2.getTransaction().commit();
    }&lt;/pre&gt;

            &lt;p&gt;
                The call to &lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt; makes a detached object
                persistent again by binding it to a new unit of work, so any
                modifications you made to it while detached can be saved to
                the database. This includes any modifications
                (additions/deletions) you made to a collection of that entity
                object.
            &lt;/p&gt;

            &lt;p&gt;
                This is not much use in our example, but it is an important concept you can
                incorporate into your own application. Complete this exercise by adding a new action
                to the  main method of the &lt;code class=&quot;literal&quot;&gt;EventManager&lt;/code&gt; and call it from the command line. If
                you need the identifiers of a person and an event - the &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; method
                returns it (you might have to modify some of the previous methods to return that identifier):
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;        else if (args[0].equals(&quot;addpersontoevent&quot;)) {
            Long eventId = mgr.createAndStoreEvent(&quot;My Event&quot;, new Date());
            Long personId = mgr.createAndStorePerson(&quot;Foo&quot;, &quot;Bar&quot;);
            mgr.addPersonToEvent(personId, eventId);
            System.out.println(&quot;Added person &quot; + personId + &quot; to event &quot; + eventId);
        }&lt;/pre&gt;

            &lt;p&gt;
                This is an example of an association between two equally important
                classes : two entities.  As mentioned earlier, there are other
                classes and types in a typical model, usually &quot;less important&quot;.
                Some you have already seen, like an &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt; or a
                &lt;code class=&quot;classname&quot;&gt;java.lang.String&lt;/code&gt;.  We call these classes
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;value types&lt;/em&gt;&lt;/span&gt;, and their instances
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;depend&lt;/em&gt;&lt;/span&gt; on a particular entity.  Instances of
                these types do not have their own identity, nor are they shared
                between entities.  Two persons do not reference the same
                &lt;code class=&quot;literal&quot;&gt;firstname&lt;/code&gt; object, even if they have the same
                first name.  Value types cannot only be found in the JDK , but
                you can also write dependent classes yourself
                such as an &lt;code class=&quot;literal&quot;&gt;Address&lt;/code&gt; or
                &lt;code class=&quot;literal&quot;&gt;MonetaryAmount&lt;/code&gt; class.  In fact, in a Hibernate
                application all JDK classes are considered value types.
            &lt;/p&gt;

            &lt;p&gt;
                You can also design a collection of value types.  This is
                conceptually different from a collection of references to other
                entities, but looks almost the same in Java.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.4. Collection of values&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-valuecollections&quot;/&gt;1.2.4. Collection of values&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Let&apos;s add a collection of email addresses to the
                &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; entity.  This will be represented as a
                &lt;code class=&quot;interfacename&quot;&gt;java.util.Set&lt;/code&gt; of
                &lt;code class=&quot;classname&quot;&gt;java.lang.String&lt;/code&gt; instances:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private Set emailAddresses = new HashSet();

    public Set getEmailAddresses() {
        return emailAddresses;
    }

    public void setEmailAddresses(Set emailAddresses) {
        this.emailAddresses = emailAddresses;
    }&lt;/pre&gt;

            &lt;p&gt;
                The mapping of this &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt; is as follows:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;        &amp;lt;set name=&quot;emailAddresses&quot; table=&quot;PERSON_EMAIL_ADDR&quot;&amp;gt;
            &amp;lt;key column=&quot;PERSON_ID&quot;/&amp;gt;
            &amp;lt;element type=&quot;string&quot; column=&quot;EMAIL_ADDR&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                The difference compared with the earlier mapping is the use of
                the &lt;code class=&quot;literal&quot;&gt;element&lt;/code&gt; part which tells Hibernate that the
                collection does not contain references to another entity, but is
                rather a collection whose elements are values types, here specifically
                of type &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt;.  The lowercase name tells you
                it is a Hibernate mapping type/converter.  Again the
                &lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; attribute of the &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt;
                element determines the table name for the collection.   The
                &lt;code class=&quot;literal&quot;&gt;key&lt;/code&gt; element defines the foreign-key column
                name in the collection table. The &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt;
                attribute in the &lt;code class=&quot;literal&quot;&gt;element&lt;/code&gt; element defines the
                column name where the email address values will actually
                be stored.
            &lt;/p&gt;

            &lt;p&gt;
                Here is the updated schema:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
  _____________        __________________
 |             |      |                  |       _____________
 |   EVENTS    |      |   PERSON_EVENT   |      |             |       ___________________
 |_____________|      |__________________|      |    PERSON   |      |                   |
 |             |      |                  |      |_____________|      | PERSON_EMAIL_ADDR |
 | *EVENT_ID   | &amp;lt;--&amp;gt; | *EVENT_ID        |      |             |      |___________________|
 |  EVENT_DATE |      | *PERSON_ID       | &amp;lt;--&amp;gt; | *PERSON_ID  | &amp;lt;--&amp;gt; |  *PERSON_ID       |
 |  TITLE      |      |__________________|      |  AGE        |      |  *EMAIL_ADDR      |
 |_____________|                                |  FIRSTNAME  |      |___________________|
                                                |  LASTNAME   |
                                                |_____________|
 &lt;/pre&gt;

            &lt;p&gt;
                You can see that the primary key of the collection table is in fact a composite key that
                uses both columns. This also implies that there cannot be duplicate email addresses
                per person, which is exactly the semantics we need for a set in Java.
            &lt;/p&gt;

            &lt;p&gt;
                You can now try to add elements to this collection, just like we did before by
                linking persons and events. It is the same code in Java:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private void addEmailToPerson(Long personId, String emailAddress) {
        Session session = HibernateUtil.getSessionFactory().getCurrentSession();
        session.beginTransaction();

        Person aPerson = (Person) session.load(Person.class, personId);
        // adding to the emailAddress collection might trigger a lazy load of the collection
        aPerson.getEmailAddresses().add(emailAddress);

        session.getTransaction().commit();
    }&lt;/pre&gt;

            &lt;p&gt;
                This time we did not use a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;fetch&lt;/em&gt;&lt;/span&gt; query to
                initialize the collection.  Monitor the SQL log and try to
                optimize this with an eager fetch.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.5. Bi-directional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-bidirectional&quot;/&gt;1.2.5. Bi-directional associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Next you will map a bi-directional association.  You will make
                the association between person and event work from both sides
                in Java.  The database schema does not change, so you will still
                have many-to-many multiplicity.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    A relational database is more flexible than a network
                    programming language, in that it does not need a navigation
                    direction; data can be viewed and retrieved in any possible
                    way.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                First, add a collection of participants to the
                &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; class:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private Set participants = new HashSet();

    public Set getParticipants() {
        return participants;
    }

    public void setParticipants(Set participants) {
        this.participants = participants;
    }&lt;/pre&gt;

            &lt;p&gt;
                Now map this side of the association in &lt;code class=&quot;literal&quot;&gt;Event.hbm.xml&lt;/code&gt;.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;        &amp;lt;set name=&quot;participants&quot; table=&quot;PERSON_EVENT&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;EVENT_ID&quot;/&amp;gt;
            &amp;lt;many-to-many column=&quot;PERSON_ID&quot; class=&quot;Person&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                These are normal &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt; mappings in both mapping documents.
                Notice that the column names in &lt;code class=&quot;literal&quot;&gt;key&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;many-to-many&lt;/code&gt; 
                swap in both mapping documents. The most important addition here is the
                &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; attribute in the &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt; element of the
                &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt;&apos;s collection mapping.
            &lt;/p&gt;

            &lt;p&gt;
                What this means is that Hibernate should take the other side, the &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; class,
                when it needs to find out information about the link between the two. This will be a lot easier to
                understand once you see how the bi-directional link between our two entities is created.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.2.6. Working bi-directional links&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-associations-usingbidir&quot;/&gt;1.2.6. Working bi-directional links&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                First, keep in mind that Hibernate does not affect normal Java semantics. How did we create a
                link between a &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; and an &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; in the unidirectional
                example? You add an instance of &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt; to the collection of event references,
                of an instance of &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;.  If you want to make this link
                bi-directional, you have to do the same on the other side by adding a &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;
                reference to the collection in an &lt;code class=&quot;literal&quot;&gt;Event&lt;/code&gt;. This process of &quot;setting the link on both sides&quot;
                is absolutely necessary with bi-directional links.
            &lt;/p&gt;

            &lt;p&gt;
                Many developers program defensively and create link management methods to
                correctly set both sides (for example, in &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;):
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    protected Set getEvents() {
        return events;
    }

    protected void setEvents(Set events) {
        this.events = events;
    }

    public void addToEvent(Event event) {
        this.getEvents().add(event);
        event.getParticipants().add(this);
    }

    public void removeFromEvent(Event event) {
        this.getEvents().remove(event);
        event.getParticipants().remove(this);
    }&lt;/pre&gt;

            &lt;p&gt;
                The get and set methods for the collection are now protected. This allows classes in the
                same package and subclasses to still access the methods, but prevents everybody else from altering
                the collections directly. Repeat the steps for the collection
                on the other side.
            &lt;/p&gt;

            &lt;p&gt;
                What about the &lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt; mapping attribute? For you, and for Java, a bi-directional
                link is simply a matter of setting the references on both sides correctly. Hibernate, however, does not
                have enough information to correctly arrange SQL &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt;
                statements (to avoid constraint violations). Making one side of the association &lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt; tells Hibernate to consider it a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;mirror&lt;/em&gt;&lt;/span&gt; of the other side. That is all that is necessary
                for Hibernate to resolve any issues that arise when transforming a directional navigation model to
                a SQL database schema. The rules are straightforward: all bi-directional associations
                need one side as &lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt;. In a one-to-many association it has to be the many-side,
                and in many-to-many association you can select either side.
            &lt;/p&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;1.3. Part 3 - The EventManager web application&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-webapp&quot;/&gt;1.3. Part 3 - The EventManager web application&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A Hibernate web application uses &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt;
            almost like a standalone application. However, some common patterns are useful. You can now write
            an &lt;code class=&quot;literal&quot;&gt;EventManagerServlet&lt;/code&gt;. This servlet can list all events stored in the
            database, and it provides an HTML form to enter new events.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.3.1. Writing the basic servlet&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-webapp-servlet&quot;/&gt;1.3.1. Writing the basic servlet&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                First we need create our basic processing servlet.  Since our
                servlet only handles HTTP &lt;code class=&quot;literal&quot;&gt;GET&lt;/code&gt; requests, we
                will only implement the &lt;code class=&quot;literal&quot;&gt;doGet()&lt;/code&gt; method:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.tutorial.web;

// Imports

public class EventManagerServlet extends HttpServlet {

    protected void doGet(
            HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {

        SimpleDateFormat dateFormatter = new SimpleDateFormat( &quot;dd.MM.yyyy&quot; );

        try {
            // Begin unit of work
            HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();

            // Process request and render page...

            // End unit of work
            HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
        }
        catch (Exception ex) {
            HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().rollback();
            if ( ServletException.class.isInstance( ex ) ) {
                throw ( ServletException ) ex;
            }
            else {
                throw new ServletException( ex );
            }
        }
    }

}&lt;/pre&gt;

            &lt;p&gt;
                Save this servlet as
                &lt;code class=&quot;filename&quot;&gt;src/main/java/org/hibernate/tutorial/web/EventManagerServlet.java&lt;/code&gt;
            &lt;/p&gt;

            &lt;p&gt;
                The pattern applied here is called &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request&lt;/em&gt;&lt;/span&gt;.
                When a request hits the servlet, a new Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is
                opened through the first call to &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; on the
                &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;. A database transaction is then started. All
                data access occurs inside a transaction irrespective of whether the data is read or written.
                Do not use the auto-commit mode in applications.
            &lt;/p&gt;

            &lt;p&gt;
                Do &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; use a new Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; for
                every database operation. Use one Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; that is
                scoped to the whole request. Use &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt;, so that
                it is automatically bound to the current Java thread.
            &lt;/p&gt;

            &lt;p&gt;
                Next, the possible actions of the request are processed and the response HTML
                is rendered. We will get to that part soon.
            &lt;/p&gt;

            &lt;p&gt;
                Finally, the unit of work ends when processing and rendering are complete. If any
                problems occurred during processing or rendering, an exception will be thrown
                and the database transaction rolled back. This completes the
                &lt;code class=&quot;literal&quot;&gt;session-per-request&lt;/code&gt; pattern. Instead of the transaction
                demarcation code in every servlet, you could also write a servlet filter.
                See the Hibernate website and Wiki for more information about this pattern
                called &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Open Session in View&lt;/em&gt;&lt;/span&gt;. You will need it as soon
                as you consider rendering your view in JSP, not in a servlet.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.3.2. Processing and rendering&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-webapp-processing&quot;/&gt;1.3.2. Processing and rendering&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Now you can implement the processing of the request and the rendering of the page.
            &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;        // Write HTML header
        PrintWriter out = response.getWriter();
        out.println(&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Event Manager&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&quot;);

        // Handle actions
        if ( &quot;store&quot;.equals(request.getParameter(&quot;action&quot;)) ) {

            String eventTitle = request.getParameter(&quot;eventTitle&quot;);
            String eventDate = request.getParameter(&quot;eventDate&quot;);

            if ( &quot;&quot;.equals(eventTitle) || &quot;&quot;.equals(eventDate) ) {
                out.println(&quot;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Please enter event title and date.&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&quot;);
            }
            else {
                createAndStoreEvent(eventTitle, dateFormatter.parse(eventDate));
                out.println(&quot;&amp;lt;b&amp;gt;&amp;lt;i&amp;gt;Added event.&amp;lt;/i&amp;gt;&amp;lt;/b&amp;gt;&quot;);
            }
        }

        // Print page
       printEventForm(out);
       listEvents(out, dateFormatter);

       // Write HTML footer
       out.println(&quot;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;);
       out.flush();
       out.close();&lt;/pre&gt;

            &lt;p&gt;
                This coding style, with a mix of Java and HTML, would not scale
                in a more complex application;keep in mind that we are only illustrating
                basic Hibernate concepts in this tutorial. The code prints an HTML
                header and a footer. Inside this page, an HTML form for event entry and
                a list of all events in the database are printed. The first method is
                trivial and only outputs HTML:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private void printEventForm(PrintWriter out) {
        out.println(&quot;&amp;lt;h2&amp;gt;Add new event:&amp;lt;/h2&amp;gt;&quot;);
        out.println(&quot;&amp;lt;form&amp;gt;&quot;);
        out.println(&quot;Title: &amp;lt;input name=&apos;eventTitle&apos; length=&apos;50&apos;/&amp;gt;&amp;lt;br/&amp;gt;&quot;);
        out.println(&quot;Date (e.g. 24.12.2009): &amp;lt;input name=&apos;eventDate&apos; length=&apos;10&apos;/&amp;gt;&amp;lt;br/&amp;gt;&quot;);
        out.println(&quot;&amp;lt;input type=&apos;submit&apos; name=&apos;action&apos; value=&apos;store&apos;/&amp;gt;&quot;);
        out.println(&quot;&amp;lt;/form&amp;gt;&quot;);
    }&lt;/pre&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;listEvents()&lt;/code&gt; method uses the Hibernate
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; bound to the current thread to execute
                a query:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    private void listEvents(PrintWriter out, SimpleDateFormat dateFormatter) {

        List result = HibernateUtil.getSessionFactory()
                .getCurrentSession().createCriteria(Event.class).list();
        if (result.size() &amp;gt; 0) {
            out.println(&quot;&amp;lt;h2&amp;gt;Events in database:&amp;lt;/h2&amp;gt;&quot;);
            out.println(&quot;&amp;lt;table border=&apos;1&apos;&amp;gt;&quot;);
            out.println(&quot;&amp;lt;tr&amp;gt;&quot;);
            out.println(&quot;&amp;lt;th&amp;gt;Event title&amp;lt;/th&amp;gt;&quot;);
            out.println(&quot;&amp;lt;th&amp;gt;Event date&amp;lt;/th&amp;gt;&quot;);
            out.println(&quot;&amp;lt;/tr&amp;gt;&quot;);
            Iterator it = result.iterator();
            while (it.hasNext()) {
                Event event = (Event) it.next();
                out.println(&quot;&amp;lt;tr&amp;gt;&quot;);
                out.println(&quot;&amp;lt;td&amp;gt;&quot; + event.getTitle() + &quot;&amp;lt;/td&amp;gt;&quot;);
                out.println(&quot;&amp;lt;td&amp;gt;&quot; + dateFormatter.format(event.getDate()) + &quot;&amp;lt;/td&amp;gt;&quot;);
                out.println(&quot;&amp;lt;/tr&amp;gt;&quot;);
            }
            out.println(&quot;&amp;lt;/table&amp;gt;&quot;);
        }
    }&lt;/pre&gt;

            &lt;p&gt;
                Finally, the &lt;code class=&quot;literal&quot;&gt;store&lt;/code&gt; action is dispatched to the
                &lt;code class=&quot;literal&quot;&gt;createAndStoreEvent()&lt;/code&gt; method, which also uses
                the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; of the current thread:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;    protected void createAndStoreEvent(String title, Date theDate) {
        Event theEvent = new Event();
        theEvent.setTitle(title);
        theEvent.setDate(theDate);

        HibernateUtil.getSessionFactory()
                .getCurrentSession().save(theEvent);
    }&lt;/pre&gt;

            &lt;p&gt;
                The servlet is now complete. A request to the servlet will be processed
                in a single &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt;. As
                earlier in the standalone application, Hibernate can automatically bind these
                objects to the current thread of execution. This gives you the freedom to layer
                your code and access the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; in any way you like.
                Usually you would use a more sophisticated design and move the data access code
                into data access objects (the DAO pattern). See the Hibernate Wiki for more
                examples.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;1.3.3. Deploying and testing&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-webapp-deploy&quot;/&gt;1.3.3. Deploying and testing&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                To deploy this application for testing we must create a
                Web ARchive (WAR).  First we must define the WAR descriptor
                as &lt;code class=&quot;filename&quot;&gt;src/main/webapp/WEB-INF/web.xml&lt;/code&gt;
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;web-app version=&quot;2.4&quot;
    xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&amp;gt;

    &amp;lt;servlet&amp;gt;
        &amp;lt;servlet-name&amp;gt;Event Manager&amp;lt;/servlet-name&amp;gt;
        &amp;lt;servlet-class&amp;gt;org.hibernate.tutorial.web.EventManagerServlet&amp;lt;/servlet-class&amp;gt;
    &amp;lt;/servlet&amp;gt;

    &amp;lt;servlet-mapping&amp;gt;
        &amp;lt;servlet-name&amp;gt;Event Manager&amp;lt;/servlet-name&amp;gt;
        &amp;lt;url-pattern&amp;gt;/eventmanager&amp;lt;/url-pattern&amp;gt;
    &amp;lt;/servlet-mapping&amp;gt;
&amp;lt;/web-app&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                To build and deploy call &lt;code class=&quot;literal&quot;&gt;mvn package&lt;/code&gt; in your
                project directory and copy the &lt;code class=&quot;filename&quot;&gt;hibernate-tutorial.war&lt;/code&gt;
                file into your Tomcat &lt;code class=&quot;filename&quot;&gt;webapps&lt;/code&gt; directory.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    If you do not have Tomcat installed, download it from
                    &lt;a class=&quot;ulink&quot; href=&quot;http://tomcat.apache.org/&quot;&gt;http://tomcat.apache.org/&lt;/a&gt;
                    and follow the
                    installation instructions.  Our application requires
                    no changes to the standard Tomcat configuration.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Once deployed and Tomcat is running, access the application at
                &lt;code class=&quot;literal&quot;&gt;http://localhost:8080/hibernate-tutorial/eventmanager&lt;/code&gt;. Make
                sure you watch the Tomcat log to see Hibernate initialize when the first
                request hits your servlet (the static initializer in &lt;code class=&quot;literal&quot;&gt;HibernateUtil&lt;/code&gt;
                is called) and to get the detailed output if any exceptions occurs.
            &lt;/p&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;1.4. Summary&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;tutorial-summary&quot;/&gt;1.4. Summary&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            This tutorial covered the basics of writing a simple standalone Hibernate application
            and a small web application.  More tutorials are available from the Hibernate
            &lt;a class=&quot;ulink&quot; href=&quot;http://hibernate.org&quot;&gt;website&lt;/a&gt;.
        &lt;/p&gt;

    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 2. Architecture&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture&quot;/&gt;Chapter 2. Architecture&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview&quot;&gt;2.1. Overview&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-minimal&quot;&gt;2.1.1. Minimal architecture&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-comprehensive&quot;&gt;2.1.2. Comprehensive architecture&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-overview-terms&quot;&gt;2.1.3. Basic APIs&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#architecture-current-session&quot;&gt;2.2. Contextual sessions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;

    

    &lt;div class=&quot;section&quot; title=&quot;2.1. Overview&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture-overview&quot;/&gt;2.1. Overview&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            The diagram below provides a high-level view of the Hibernate architecture:
        &lt;/p&gt;

        &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/overview.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;

        &lt;p&gt;
            Unfortunately we cannot provide a detailed view of all possible runtime architectures.  Hibernate is
            sufficiently flexible to be used in a number of ways in many, many architectures.  We will, however,
            illustrate 2 specifically since they are extremes.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;2.1.1. Minimal architecture&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture-overview-minimal&quot;/&gt;2.1.1. Minimal architecture&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The &quot;minimal&quot; architecture has the application manage its own JDBC connections and provide those
                connections to Hibernate; additionally the application manages transactions for itself.  This approach
                uses a minimal subset of Hibernate APIs.
            &lt;/p&gt;
            &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/lite.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;2.1.2. Comprehensive architecture&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture-overview-comprehensive&quot;/&gt;2.1.2. Comprehensive architecture&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The &quot;comprehensive&quot; architecture abstracts the application away from the underlying JDBC/JTA APIs and
                allows Hibernate to manage the details.
            &lt;/p&gt;
            &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/full_cream.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;2.1.3. Basic APIs&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture-overview-terms&quot;/&gt;2.1.3. Basic APIs&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;p&gt;
                Here are quick discussions about some of the API objects depicted in the preceding diagrams (you will
                see them again in more detail in later chapters).
                &lt;/p&gt;&lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;SessionFactory (&lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;)&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                A thread-safe, immutable cache of compiled mappings for a single database.
                                A factory for &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; instances.  A client
                                of &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.connection.ConnectionProvider&lt;/code&gt;.  Optionally
                                maintains a &lt;code class=&quot;literal&quot;&gt;second level cache&lt;/code&gt; of data that is reusable between
                                transactions at a process or cluster level.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Session (&lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;)&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                A single-threaded, short-lived object representing a conversation between
                                the application and the persistent store.  Wraps a JDBC
                                &lt;code class=&quot;interfacename&quot;&gt;java.sql.Connection&lt;/code&gt;.  Factory for
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt;.  Maintains a
                                &lt;code class=&quot;literal&quot;&gt;first level cache&lt;/code&gt; of persistent the application&apos;s persistent objects
                                and collections; this cache is used when navigating the object graph or looking up
                                objects by identifier.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Persistent objects and collections&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Short-lived, single threaded objects containing persistent state and business
                                function.  These can be ordinary JavaBeans/POJOs. They are associated with exactly one
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;. Once the
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; is closed, they will be detached
                                and free to use in any application layer (for example, directly as data transfer objects
                                to and from presentation).  &lt;a class=&quot;xref&quot; href=&quot;#objectstate&quot; title=&quot;Chapter 11. Working with objects&quot;&gt;Chapter 11, &lt;em&gt;Working with objects&lt;/em&gt;&lt;/a&gt; discusses transient,
                                persistent and detached object states.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Transient and detached objects and collections&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Instances of persistent classes that are not currently associated with a
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;. They may have been instantiated by
                                the application and not yet persisted, or they may have been instantiated by a
                                closed &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;.
                                &lt;a class=&quot;xref&quot; href=&quot;#objectstate&quot; title=&quot;Chapter 11. Working with objects&quot;&gt;Chapter 11, &lt;em&gt;Working with objects&lt;/em&gt;&lt;/a&gt; discusses transient, persistent and detached object states.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Transaction (&lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt;)&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                (Optional) A single-threaded, short-lived object used by the application to
                                specify atomic units of work. It abstracts the application from the underlying JDBC,
                                JTA or CORBA transaction. A &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; might span several
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt;s in some cases. However,
                                transaction demarcation, either using the underlying API or
                                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt;, is never optional.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;ConnectionProvider (&lt;code class=&quot;interfacename&quot;&gt;org.hibernate.connection.ConnectionProvider&lt;/code&gt;)&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                (Optional) A factory for, and pool of, JDBC connections. It abstracts the application from
                                underlying &lt;code class=&quot;interfacename&quot;&gt;javax.sql.DataSource&lt;/code&gt; or
                                &lt;code class=&quot;interfacename&quot;&gt;java.sql.DriverManager&lt;/code&gt;.  It is not exposed to application,
                                but it can be extended and/or implemented by the developer.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;TransactionFactory (&lt;code class=&quot;interfacename&quot;&gt;org.hibernate.TransactionFactory&lt;/code&gt;)&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                (Optional) A factory for &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Transaction&lt;/code&gt;
                                instances. It is not exposed to the application, but it can be extended and/or
                                implemented by the developer.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Extension Interfaces&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Hibernate offers a range of optional extension interfaces you can implement to customize
                                the behavior of your persistence layer. See the API documentation for details.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;&lt;p&gt;
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;2.2. Contextual sessions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;architecture-current-session&quot;/&gt;2.2. Contextual sessions&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Most applications using Hibernate need some form of &quot;contextual&quot; session, where a given
            session is in effect throughout the scope of a given context. However, across applications
            the definition of what constitutes a context is typically different; different contexts
            define different scopes to the notion of current. Applications using Hibernate prior
            to version 3.0 tended to utilize either home-grown &lt;code class=&quot;literal&quot;&gt;ThreadLocal&lt;/code&gt;-based
            contextual sessions, helper classes such as &lt;code class=&quot;literal&quot;&gt;HibernateUtil&lt;/code&gt;, or utilized
            third-party frameworks, such as Spring or Pico, which provided proxy/interception-based contextual sessions.
        &lt;/p&gt;
        &lt;p&gt;
            Starting with version 3.0.1, Hibernate added the &lt;code class=&quot;literal&quot;&gt;SessionFactory.getCurrentSession()&lt;/code&gt;
            method. Initially, this assumed usage of &lt;code class=&quot;literal&quot;&gt;JTA&lt;/code&gt; transactions, where the
            &lt;code class=&quot;literal&quot;&gt;JTA&lt;/code&gt; transaction defined both the scope and context of a current session.
            Given the maturity of the numerous stand-alone
            &lt;code class=&quot;literal&quot;&gt;JTA TransactionManager&lt;/code&gt; implementations, most, if not all,
            applications should be using &lt;code class=&quot;literal&quot;&gt;JTA&lt;/code&gt; transaction management, whether or not
            they are deployed into a &lt;code class=&quot;literal&quot;&gt;J2EE&lt;/code&gt; container.  Based on that, the
            &lt;code class=&quot;literal&quot;&gt;JTA&lt;/code&gt;-based contextual sessions are all you need to use.
        &lt;/p&gt;
        &lt;p&gt;
            However, as of version 3.1, the processing behind
            &lt;code class=&quot;literal&quot;&gt;SessionFactory.getCurrentSession()&lt;/code&gt; is now pluggable.  To that
            end, a new extension interface, &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.spi.CurrentSessionContext&lt;/code&gt;,
            and a new configuration parameter, &lt;code class=&quot;literal&quot;&gt;hibernate.current_session_context_class&lt;/code&gt;,
            have been added to allow pluggability of the scope and context of defining current sessions.
        &lt;/p&gt;
        &lt;p&gt;
            See the Javadocs for the &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.spi.CurrentSessionContext&lt;/code&gt;
            interface for a detailed discussion of its contract.  It defines a single method,
            &lt;code class=&quot;literal&quot;&gt;currentSession()&lt;/code&gt;, by which the implementation is responsible for
            tracking the current contextual session.  Out-of-the-box, Hibernate comes with three
            implementations of this interface:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.internal.JTASessionContext&lt;/code&gt;: current sessions
                    are tracked and scoped by a &lt;code class=&quot;literal&quot;&gt;JTA&lt;/code&gt; transaction.  The processing
                    here is exactly the same as in the older JTA-only approach.  See the Javadocs
                    for details.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.internal.ThreadLocalSessionContext&lt;/code&gt;:current
                    sessions are tracked by thread of execution. See the Javadocs for details.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.internal.ManagedSessionContext&lt;/code&gt;: current
                    sessions are tracked by thread of execution. However, you are responsible to
                    bind and unbind a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; instance with static methods
                    on this class: it does not open, flush, or close a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            The first two implementations provide a &quot;one session - one database transaction&quot; programming
            model. This is also known and used as &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request&lt;/em&gt;&lt;/span&gt;. The beginning
            and end of a Hibernate session is defined by the duration of a database transaction.
            If you use programmatic transaction demarcation in plain JSE without JTA, you are advised to
            use the Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API to hide the underlying transaction system
            from your code. If you use JTA, you can utilize the JTA interfaces to demarcate transactions. If you
            execute in an EJB container that supports CMT, transaction boundaries are defined declaratively
            and you do not need any transaction or session demarcation operations in your code.
            Refer to &lt;a class=&quot;xref&quot; href=&quot;#transactions&quot; title=&quot;Chapter 13. Transactions and Concurrency&quot;&gt;Chapter 13, &lt;em&gt;Transactions and Concurrency&lt;/em&gt;&lt;/a&gt; for more information and code examples.
        &lt;/p&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;hibernate.current_session_context_class&lt;/code&gt; configuration parameter
            defines which &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.spi.CurrentSessionContext&lt;/code&gt; implementation
            should be used.  For backwards compatibility, if this configuration parameter is not set
            but a &lt;code class=&quot;literal&quot;&gt;org.hibernate.engine.transaction.jta.platform.spi.JtaPlatform&lt;/code&gt; is configured,
            Hibernate will use the &lt;code class=&quot;literal&quot;&gt;org.hibernate.context.internal.JTASessionContext&lt;/code&gt;.
            Typically, the value of this parameter would just name the implementation class to
            use. For the three out-of-the-box implementations, however, there are three corresponding
            short names: &quot;jta&quot;, &quot;thread&quot;, and &quot;managed&quot;.
        &lt;/p&gt;
        
    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 3. Configuration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;session-configuration&quot;/&gt;Chapter 3. Configuration&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-programmatic&quot;&gt;3.1. Programmatic configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-sessionfactory&quot;&gt;3.2. Obtaining a SessionFactory&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-hibernatejdbc&quot;&gt;3.3. JDBC connections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional&quot;&gt;3.4. Optional configuration properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-dialects&quot;&gt;3.4.1. SQL Dialects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-outerjoin&quot;&gt;3.4.2. Outer Join Fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-binarystreams&quot;&gt;3.4.3. Binary Streams&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-cacheprovider&quot;&gt;3.4.4. Second-level and query cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-querysubstitution&quot;&gt;3.4.5. Query Language Substitution&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-statistics&quot;&gt;3.4.6. Hibernate statistics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-logging&quot;&gt;3.5. Logging&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-namingstrategy&quot;&gt;3.6. Implementing a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e1655&quot;&gt;3.7. Implementing a PersisterClassProvider&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-xmlconfig&quot;&gt;3.8. XML configuration file&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-j2ee&quot;&gt;3.9. Java EE Application Server integration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-transactionstrategy&quot;&gt;3.9.1. Transaction strategy configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-optional-jndi&quot;&gt;3.9.2. JNDI-bound &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#configuration-j2ee-currentsession&quot;&gt;3.9.3. Current Session context management with JTA&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;p&gt;Hibernate is designed to operate in many different environments and,
  as such, there is a broad range of configuration parameters. Fortunately,
  most have sensible default values and Hibernate is distributed with an
  example &lt;code class=&quot;literal&quot;&gt;hibernate.properties&lt;/code&gt; file in
  &lt;code class=&quot;literal&quot;&gt;etc/&lt;/code&gt; that displays the various options. Simply put the
  example file in your classpath and customize it to suit your needs.&lt;/p&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.1. Programmatic configuration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-programmatic&quot;/&gt;3.1. Programmatic configuration&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;An instance of
    &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; represents an
    entire set of mappings of an application&apos;s Java types to an SQL database.
    The &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; is used to
    build an immutable
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;. The mappings
    are compiled from various XML mapping files.&lt;/p&gt;

    &lt;p&gt;You can obtain a
    &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; instance by
    instantiating it directly and specifying XML mapping documents. If the
    mapping files are in the classpath, use &lt;code class=&quot;literal&quot;&gt;addResource()&lt;/code&gt;.
    For example:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = new Configuration()
    .addResource(&quot;Item.hbm.xml&quot;)
    .addResource(&quot;Bid.hbm.xml&quot;);&lt;/pre&gt;

    &lt;p&gt;An alternative way is to specify the mapped class and allow
    Hibernate to find the mapping document for you:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = new Configuration()
    .addClass(org.hibernate.auction.Item.class)
    .addClass(org.hibernate.auction.Bid.class);&lt;/pre&gt;

    &lt;p&gt;Hibernate will then search for mapping files named
    &lt;code class=&quot;filename&quot;&gt;/org/hibernate/auction/Item.hbm.xml&lt;/code&gt; and
    &lt;code class=&quot;filename&quot;&gt;/org/hibernate/auction/Bid.hbm.xml&lt;/code&gt; in the classpath.
    This approach eliminates any hardcoded filenames.&lt;/p&gt;

    &lt;p&gt;A &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; also allows
    you to specify configuration properties. For example:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = new Configuration()
    .addClass(org.hibernate.auction.Item.class)
    .addClass(org.hibernate.auction.Bid.class)
    .setProperty(&quot;hibernate.dialect&quot;, &quot;org.hibernate.dialect.MySQLInnoDBDialect&quot;)
    .setProperty(&quot;hibernate.connection.datasource&quot;, &quot;java:comp/env/jdbc/test&quot;)
    .setProperty(&quot;hibernate.order_updates&quot;, &quot;true&quot;);&lt;/pre&gt;

    &lt;p&gt;This is not the only way to pass configuration properties to
    Hibernate. Some alternative options include:&lt;/p&gt;

    &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;Pass an instance of &lt;code class=&quot;classname&quot;&gt;java.util.Properties&lt;/code&gt;
        to &lt;code class=&quot;literal&quot;&gt;Configuration.setProperties()&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;Place a file named &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; in
        a root directory of the classpath.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;Set &lt;code class=&quot;literal&quot;&gt;System&lt;/code&gt; properties using &lt;code class=&quot;literal&quot;&gt;java
        -Dproperty=value&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;Include &lt;code class=&quot;literal&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt; elements in
        &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt; (this is discussed later).&lt;/p&gt;
      &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

    &lt;p&gt;If you want to get started
    quickly&lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; is the easiest
    approach.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; is
    intended as a startup-time object that will be discarded once a
    &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; is created.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.2. Obtaining a SessionFactory&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-sessionfactory&quot;/&gt;3.2. Obtaining a SessionFactory&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;When all mappings have been parsed by the
    &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt;, the application
    must obtain a factory for
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; instances. This
    factory is intended to be shared by all application threads:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SessionFactory sessions = cfg.buildSessionFactory();&lt;/pre&gt;

    &lt;p&gt;Hibernate does allow your application to instantiate more than one
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;. This is
    useful if you are using more than one database.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.3. JDBC connections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-hibernatejdbc&quot;/&gt;3.3. JDBC connections&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;It is advisable to have the
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; create and
    pool JDBC connections for you. If you take this approach, opening a
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; is as simple
    as:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessions.openSession(); // open a new Session&lt;/pre&gt;

    &lt;p&gt;Once you start a task that requires access to the database, a JDBC
    connection will be obtained from the pool.&lt;/p&gt;

    &lt;p&gt;Before you can do this, you first need to pass some JDBC connection
    properties to Hibernate. All Hibernate property names and semantics are
    defined on the class &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Environment&lt;/code&gt;.
    The most important settings for JDBC connection configuration are outlined
    below.&lt;/p&gt;

    &lt;p&gt;Hibernate will obtain and pool connections using
    &lt;code class=&quot;classname&quot;&gt;java.sql.DriverManager&lt;/code&gt; if you set the following
    properties:&lt;/p&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e741&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.1. Hibernate JDBC Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate JDBC Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.driver_class&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;JDBC driver class&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.url&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;JDBC URL&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.username&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;database user&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.password&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;database user password&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.pool_size&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;maximum number of pooled
            connections&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;p&gt;Hibernate&apos;s own connection pooling algorithm is, however, quite
    rudimentary. It is intended to help you get started and is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not
    intended for use in a production system&lt;/em&gt;&lt;/span&gt;, or even for
    performance testing. You should use a third party pool for best
    performance and stability. Just replace the
    &lt;span class=&quot;property&quot;&gt;hibernate.connection.pool_size&lt;/span&gt; property with
    connection pool specific settings. This will turn off Hibernate&apos;s internal
    pool. For example, you might like to use c3p0.&lt;/p&gt;

    &lt;p&gt;C3P0 is an open source JDBC connection pool distributed along with
    Hibernate in the &lt;code class=&quot;filename&quot;&gt;lib&lt;/code&gt; directory. Hibernate will use
    its &lt;code class=&quot;classname&quot;&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;/code&gt;
    for connection pooling if you set &lt;span class=&quot;property&quot;&gt;hibernate.c3p0.*&lt;/span&gt;
    properties. If you would like to use Proxool, refer to the packaged
    &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; and the Hibernate web site for
    more information.&lt;/p&gt;

    &lt;p&gt;The following is an example
    &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; file for c3p0:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.connection.driver_class = org.postgresql.Driver
hibernate.connection.url = jdbc:postgresql://localhost/mydatabase
hibernate.connection.username = myuser
hibernate.connection.password = secret
hibernate.c3p0.min_size=5
hibernate.c3p0.max_size=20
hibernate.c3p0.timeout=1800
hibernate.c3p0.max_statements=50
hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect&lt;/pre&gt;

    &lt;p&gt;For use inside an application server, you should almost always
    configure Hibernate to obtain connections from an application server
    &lt;code class=&quot;interfacename&quot;&gt;javax.sql.Datasource&lt;/code&gt; registered in JNDI.
    You will need to set at least one of the following properties:&lt;/p&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e789&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.2. Hibernate Datasource Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate Datasource Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.datasource&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;datasource JNDI name&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jndi.url&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;URL of the JNDI provider&lt;/em&gt;&lt;/span&gt;
            (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jndi.class&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;class of the JNDI
            &lt;code class=&quot;literal&quot;&gt;InitialContextFactory&lt;/code&gt;&lt;/em&gt;&lt;/span&gt;
            (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.username&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;database user&lt;/em&gt;&lt;/span&gt; (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.password&lt;/span&gt;&lt;/td&gt;&lt;td&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;database user password&lt;/em&gt;&lt;/span&gt;
            (optional)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;p&gt;Here is an example &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; file
    for an application server provided JNDI datasource:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.connection.datasource = java:/comp/env/jdbc/test
hibernate.transaction.factory_class = \
    org.hibernate.transaction.JTATransactionFactory
hibernate.transaction.manager_lookup_class = \
    org.hibernate.transaction.JBossTransactionManagerLookup
hibernate.dialect = org.hibernate.dialect.PostgreSQL82Dialect&lt;/pre&gt;

    &lt;p&gt;JDBC connections obtained from a JNDI datasource will automatically
    participate in the container-managed transactions of the application
    server.&lt;/p&gt;

    &lt;p&gt;Arbitrary connection properties can be given by prepending
    &quot;&lt;code class=&quot;literal&quot;&gt;hibernate.connection&lt;/code&gt;&quot; to the connection property name.
    For example, you can specify a &lt;span class=&quot;property&quot;&gt;charSet&lt;/span&gt; connection
    property using &lt;span class=&quot;property&quot;&gt;hibernate.connection.charSet&lt;/span&gt;.&lt;/p&gt;

    &lt;p&gt;You can define your own plugin strategy for obtaining JDBC
    connections by implementing the interface
    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.connection.ConnectionProvider&lt;/code&gt;,
    and specifying your custom implementation via the
    &lt;span class=&quot;property&quot;&gt;hibernate.connection.provider_class&lt;/span&gt; property.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.4. Optional configuration properties&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional&quot;/&gt;3.4. Optional configuration properties&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;There are a number of other properties that control the behavior of
    Hibernate at runtime. All are optional and have reasonable default
    values.&lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Some of these properties are &quot;system-level&quot;
        only.&lt;/em&gt;&lt;/span&gt; System-level properties can be set only via
        &lt;code class=&quot;literal&quot;&gt;java -Dproperty=value&lt;/code&gt; or
        &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt;. They
        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;cannot&lt;/em&gt;&lt;/span&gt; be set by the other techniques described
        above.&lt;/p&gt;
      &lt;/div&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;configuration-optional-properties&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.3. Hibernate Configuration Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate Configuration Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.dialect&lt;/span&gt;&lt;/td&gt;&lt;td&gt;The classname of a Hibernate
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.dialect.Dialect&lt;/code&gt; which allows
            Hibernate to generate SQL optimized for a particular relational
            database. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;full.classname.of.Dialect&lt;/code&gt; &lt;/p&gt; &lt;p&gt; In
            most cases Hibernate will actually be able to choose the correct
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.dialect.Dialect&lt;/code&gt;
            implementation based on the &lt;code class=&quot;literal&quot;&gt;JDBC metadata&lt;/code&gt;
            returned by the JDBC driver. &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.show_sql&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Write all SQL statements to console. This is an alternative
            to setting the log category &lt;code class=&quot;literal&quot;&gt;org.hibernate.SQL&lt;/code&gt;
            to &lt;code class=&quot;literal&quot;&gt;debug&lt;/code&gt;. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.format_sql&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Pretty print the SQL in the log and console. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.default_schema&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Qualify unqualified table names with the given
            schema/tablespace in generated SQL. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;SCHEMA_NAME&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.default_catalog&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Qualifies unqualified table names with the given catalog in
            generated SQL. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;CATALOG_NAME&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.session_factory_name&lt;/span&gt;&lt;/td&gt;&lt;td&gt;The
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; will
            be automatically bound to this name in JNDI after it has been
            created. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;jndi/composite/name&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.max_fetch_depth&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Sets a maximum &quot;depth&quot; for the outer join fetch tree for
            single-ended associations (one-to-one, many-to-one). A
            &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt; disables default outer join fetching. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; recommended values between
            &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;3&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.default_batch_fetch_size&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Sets a default size for Hibernate batch fetching of
            associations. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            recommended values &lt;code class=&quot;literal&quot;&gt;4&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;8&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;16&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.default_entity_mode&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Sets a default mode for entity representation for all
            sessions opened from this &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;,
            defaults to &lt;code class=&quot;literal&quot;&gt;pojo&lt;/code&gt;.&lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;dynamic-map&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;pojo&lt;/code&gt; &lt;/p&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.order_updates&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Forces Hibernate to order SQL updates by the primary key
            value of the items being updated. This will result in fewer
            transaction deadlocks in highly concurrent systems. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.generate_statistics&lt;/span&gt;&lt;/td&gt;&lt;td&gt;If enabled, Hibernate will collect statistics useful for
            performance tuning. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.use_identifier_rollback&lt;/span&gt;&lt;/td&gt;&lt;td&gt;If enabled, generated identifier properties will be reset
            to default values when objects are deleted. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.use_sql_comments&lt;/span&gt;&lt;/td&gt;&lt;td&gt;If turned on, Hibernate will generate comments inside the
            SQL, for easier debugging, defaults to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;.
            &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.id.new_generator_mappings&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Setting is relevant when using
            &lt;code class=&quot;classname&quot;&gt;@GeneratedValue&lt;/code&gt;. It indicates whether or
            not the new &lt;code class=&quot;classname&quot;&gt;IdentifierGenerator&lt;/code&gt;
            implementations are used for
            &lt;code class=&quot;classname&quot;&gt;javax.persistence.GenerationType.AUTO&lt;/code&gt;,
            &lt;code class=&quot;classname&quot;&gt;javax.persistence.GenerationType.TABLE&lt;/code&gt; and
            &lt;code class=&quot;classname&quot;&gt;javax.persistence.GenerationType.SEQUENCE&lt;/code&gt;.
            Default to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; to keep backward
            compatibility. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;We recommend all new projects which make use of to use
      &lt;code class=&quot;classname&quot;&gt;@GeneratedValue&lt;/code&gt; to also set
      &lt;code class=&quot;code&quot;&gt;hibernate.id.new_generator_mappings=true&lt;/code&gt; as the new
      generators are more efficient and closer to the JPA 2 specification
      semantic. However they are not backward compatible with existing
      databases (if a sequence or a table is used for id generation).&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;configuration-jdbc-properties&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.4. Hibernate JDBC and Connection Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate JDBC and Connection Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.fetch_size&lt;/span&gt;&lt;/td&gt;&lt;td&gt;A non-zero value determines the JDBC fetch size (calls
            &lt;code class=&quot;literal&quot;&gt;Statement.setFetchSize()&lt;/code&gt;).&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.batch_size&lt;/span&gt;&lt;/td&gt;&lt;td&gt;A non-zero value enables use of JDBC2 batch updates by
            Hibernate. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            recommended values between &lt;code class=&quot;literal&quot;&gt;5&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;30&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.batch_versioned_data&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Set this property to &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; if your JDBC
            driver returns correct row counts from
            &lt;code class=&quot;literal&quot;&gt;executeBatch()&lt;/code&gt;. It is usually safe to turn this
            option on. Hibernate will then use batched DML for automatically
            versioned data. Defaults to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.factory_class&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Select a custom
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.jdbc.Batcher&lt;/code&gt;. Most
            applications will not need this configuration property. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.BatcherFactory&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.use_scrollable_resultset&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Enables use of JDBC2 scrollable resultsets by Hibernate.
            This property is only necessary when using user-supplied JDBC
            connections. Hibernate uses connection metadata otherwise. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.use_streams_for_binary&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Use streams when writing/reading &lt;code class=&quot;literal&quot;&gt;binary&lt;/code&gt;
            or &lt;code class=&quot;literal&quot;&gt;serializable&lt;/code&gt; types to/from JDBC.
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;*system-level property*&lt;/em&gt;&lt;/span&gt; &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jdbc.use_get_generated_keys&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Enables use of JDBC3
            &lt;code class=&quot;literal&quot;&gt;PreparedStatement.getGeneratedKeys()&lt;/code&gt; to
            retrieve natively generated keys after insert. Requires JDBC3+
            driver and JRE1.4+, set to false if your driver has problems with
            the Hibernate identifier generators. By default, it tries to
            determine the driver capabilities using connection metadata.
            &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.provider_class&lt;/span&gt;&lt;/td&gt;&lt;td&gt;The classname of a custom
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.connection.ConnectionProvider&lt;/code&gt;
            which provides JDBC connections to Hibernate. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.ConnectionProvider&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.isolation&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Sets the JDBC transaction isolation level. Check
            &lt;code class=&quot;interfacename&quot;&gt;java.sql.Connection&lt;/code&gt; for meaningful
            values, but note that most databases do not support all isolation
            levels and some define additional, non-standard isolations. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;1, 2, 4,
            8&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.autocommit&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Enables autocommit for JDBC pooled connections (it is not
            recommended). &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.release_mode&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Specifies when Hibernate should release JDBC connections.
            By default, a JDBC connection is held until the session is
            explicitly closed or disconnected. For an application server JTA
            datasource, use &lt;code class=&quot;literal&quot;&gt;after_statement&lt;/code&gt; to aggressively
            release connections after every JDBC call. For a non-JTA
            connection, it often makes sense to release the connection at the
            end of each transaction, by using
            &lt;code class=&quot;literal&quot;&gt;after_transaction&lt;/code&gt;. &lt;code class=&quot;literal&quot;&gt;auto&lt;/code&gt; will
            choose &lt;code class=&quot;literal&quot;&gt;after_statement&lt;/code&gt; for the JTA and CMT
            transaction strategies and &lt;code class=&quot;literal&quot;&gt;after_transaction&lt;/code&gt;
            for the JDBC transaction strategy. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;auto&lt;/code&gt; (default) |
            &lt;code class=&quot;literal&quot;&gt;on_close&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;after_transaction&lt;/code&gt;
            | &lt;code class=&quot;literal&quot;&gt;after_statement&lt;/code&gt; &lt;/p&gt; &lt;p&gt; This setting
            only affects &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s returned from
            &lt;code class=&quot;literal&quot;&gt;SessionFactory.openSession&lt;/code&gt;. For
            &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s obtained through
            &lt;code class=&quot;literal&quot;&gt;SessionFactory.getCurrentSession&lt;/code&gt;, the
            &lt;code class=&quot;literal&quot;&gt;CurrentSessionContext&lt;/code&gt; implementation configured
            for use controls the connection release mode for those
            &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s. See &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.connection.&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;propertyName&amp;gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Pass the JDBC property
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;propertyName&amp;gt;&lt;/em&gt;&lt;/span&gt; to
            &lt;code class=&quot;literal&quot;&gt;DriverManager.getConnection()&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;span class=&quot;property&quot;&gt;hibernate.jndi.&lt;/span&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;propertyName&amp;gt;&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Pass the property &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;propertyName&amp;gt;&lt;/em&gt;&lt;/span&gt;
            to the JNDI &lt;code class=&quot;literal&quot;&gt;InitialContextFactory&lt;/code&gt;.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;configuration-cache-properties&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.5. Hibernate Cache Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate Cache Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.provider_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The classname of a custom &lt;code class=&quot;literal&quot;&gt;CacheProvider&lt;/code&gt;.
            &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.CacheProvider&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.use_minimal_puts&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Optimizes second-level cache operation to minimize writes,
            at the cost of more frequent reads. This setting is most useful
            for clustered caches and, in Hibernate, is enabled by default for
            clustered cache implementations. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.use_query_cache&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Enables the query cache. Individual queries still have to
            be set cachable. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.use_second_level_cache&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Can be used to completely disable the second level cache,
            which is enabled by default for classes which specify a
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt; mapping. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.query_cache_factory&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The classname of a custom &lt;code class=&quot;literal&quot;&gt;QueryCache&lt;/code&gt;
            interface, defaults to the built-in
            &lt;code class=&quot;literal&quot;&gt;StandardQueryCache&lt;/code&gt;. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.QueryCache&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.region_prefix&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A prefix to use for second-level cache region names. &lt;p&gt;
            &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;prefix&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.use_structured_entries&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Forces Hibernate to store data in the second-level cache in
            a more human-friendly format. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.auto_evict_collection_cache&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Enables the automatic eviction of a bi-directional association&apos;s collection cache when an element 
            in the ManyToOne collection is added/updated/removed without properly managing the change on the OneToMany 
            side. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt; (default: false)
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.cache.default_cache_concurrency_strategy&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Setting used to give the name of the default
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.annotations.CacheConcurrencyStrategy&lt;/code&gt;
            to use when either &lt;code class=&quot;classname&quot;&gt;@Cacheable&lt;/code&gt; or
            &lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt; is used.
            &lt;code class=&quot;code&quot;&gt;@Cache(strategy=&quot;..&quot;)&lt;/code&gt; is used to override this
            default.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;configuration-transaction-properties&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.6. Hibernate Transaction Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate Transaction Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.transaction.factory_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The classname of a &lt;code class=&quot;literal&quot;&gt;TransactionFactory&lt;/code&gt; to
            use with Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API (defaults to
            &lt;code class=&quot;literal&quot;&gt;JDBCTransactionFactory&lt;/code&gt;). &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.TransactionFactory&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;jta.UserTransaction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A JNDI name used by
            &lt;code class=&quot;literal&quot;&gt;JTATransactionFactory&lt;/code&gt; to obtain the JTA
            &lt;code class=&quot;literal&quot;&gt;UserTransaction&lt;/code&gt; from the application server.
            &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;jndi/composite/name&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;The classname of a
            &lt;code class=&quot;literal&quot;&gt;TransactionManagerLookup&lt;/code&gt;. It is required when
            JVM-level caching is enabled or when using hilo generator in a JTA
            environment. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.TransactionManagerLookup&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.transaction.flush_before_completion&lt;/code&gt;&lt;/td&gt;&lt;td&gt;If enabled, the session will be automatically flushed
            during the before completion phase of the transaction. Built-in
            and automatic session context management is preferred, see &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt;. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.transaction.auto_close_session&lt;/code&gt;&lt;/td&gt;&lt;td&gt;If enabled, the session will be automatically closed during
            the after completion phase of the transaction. Built-in and
            automatic session context management is preferred, see &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt;. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;configuration-misc-properties&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.7. Miscellaneous Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Miscellaneous Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; class=&quot;c2&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property name&lt;/th&gt;&lt;th&gt;Purpose&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.current_session_context_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Supply a custom strategy for the scoping of the &quot;current&quot;
            &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. See &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt; for more information
            about the built-in strategies. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;jta&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;thread&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;managed&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;custom.Class&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.query.factory_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Chooses the HQL parser implementation. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory&lt;/code&gt;
            or
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.query.substitutions&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Is used to map from tokens in Hibernate queries to SQL
            tokens (tokens might be function or literal names, for example).
            &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.hbm2ddl.auto&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Automatically validates or exports schema DDL to the
            database when the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; is created.
            With &lt;code class=&quot;literal&quot;&gt;create-drop&lt;/code&gt;, the database schema will be
            dropped when the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; is closed
            explicitly. &lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;validate&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt; |
            &lt;code class=&quot;literal&quot;&gt;create&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;create-drop&lt;/code&gt;
            &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.hbm2ddl.import_files&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Comma-separated names of the optional files
            containing SQL DML statements executed during the
            &lt;code class=&quot;classname&quot;&gt;SessionFactory&lt;/code&gt; creation. This is useful for
            testing or demoing: by adding INSERT statements for example you
            can populate your database with a minimal set of data when it is
            deployed.&lt;/p&gt;&lt;p&gt;File order matters, the statements of a give
            file are executed before the statements of the following files.
            These statements are only executed if the schema is created ie if
            &lt;code class=&quot;literal&quot;&gt;hibernate.hbm2ddl.auto&lt;/code&gt; is set to
            &lt;code class=&quot;literal&quot;&gt;create&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;create-drop&lt;/code&gt;.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;/humans.sql,/dogs.sql&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.hbm2ddl.import_files_sql_extractor&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;The classname of a custom &lt;code class=&quot;interfacename&quot;&gt;ImportSqlCommandExtractor&lt;/code&gt;
            (defaults to the built-in &lt;code class=&quot;classname&quot;&gt;SingleLineSqlCommandExtractor&lt;/code&gt;).
            This is useful for implementing dedicated parser that extracts
            single SQL statements from each import file. Hibernate provides
            also &lt;code class=&quot;classname&quot;&gt;MultipleLinesSqlCommandExtractor&lt;/code&gt; which
            supports instructions/comments and quoted strings spread over
            multiple lines (mandatory semicolon at the end of each statement).
            &lt;/p&gt;&lt;p&gt;&lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;classname.of.ImportSqlCommandExtractor&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.bytecode.use_reflection_optimizer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;Enables the use of bytecode manipulation instead of
            runtime reflection. This is a System-level property and cannot be
            set in &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt;. Reflection can
            sometimes be useful when troubleshooting. Hibernate always
            requires javassist even if you turn off the
            optimizer.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt;
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; | &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; &lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.bytecode.provider&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;p&gt;At the moment, &lt;code class=&quot;literal&quot;&gt;javassist&lt;/code&gt; is the only supported bytecode provider.&lt;/p&gt;&lt;p&gt; &lt;span class=&quot;strong&quot;&gt;&lt;strong&gt;e.g.&lt;/strong&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;javassist&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.1. SQL Dialects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-dialects&quot;/&gt;3.4.1. SQL Dialects&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Always set the &lt;code class=&quot;literal&quot;&gt;hibernate.dialect&lt;/code&gt; property to
      the correct &lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Dialect&lt;/code&gt; subclass
      for your database. If you specify a dialect, Hibernate will use sensible
      defaults for some of the other properties listed above. This means that
      you will not have to specify them manually.&lt;/p&gt;

      &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;sql-dialects&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.8. Hibernate SQL Dialects
        (&lt;code class=&quot;literal&quot;&gt;hibernate.dialect&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
        

        &lt;table summary=&quot;Hibernate SQL Dialects&amp;#xA;        (hibernate.dialect)&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col/&gt;&lt;col/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;RDBMS&lt;/th&gt;&lt;th&gt;Dialect&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;CUBRID 8.3 and later&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.CUBRIDDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DB2&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.DB2Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DB2 AS/400&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.DB2400Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;DB2 OS390&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.DB2390Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Firebird&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.FirebirdDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;FrontBase&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.FrontbaseDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;H2&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.H2Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;HyperSQL (HSQL)&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.HSQLDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Informix&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.InformixDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ingres&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.IngresDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ingres 9&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Ingres9Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Ingres 10&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Ingres10Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Interbase&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.InterbaseDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;InterSystems Cache 2007.1&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Cache71Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;JDataStore&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.JDataStoreDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mckoi SQL&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MckoiDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Microsoft SQL Server 2000&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SQLServerDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Microsoft SQL Server 2005&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SQLServer2005Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Microsoft SQL Server 2008&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SQLServer2008Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Microsoft SQL Server 2012&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SQLServer2012Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mimer SQL&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MimerSQLDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MySQL&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MySQL with InnoDB&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MySQLInnoDBDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MySQL with MyISAM&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MySQLMyISAMDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MySQL5&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MySQL5Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;MySQL5 with InnoDB&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Oracle 8i&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Oracle8iDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Oracle 9i&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Oracle9iDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Oracle 10g and later&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Oracle10gDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Oracle TimesTen&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.TimesTenDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Pointbase&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.PointbaseDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PostgreSQL 8.1&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.PostgreSQL81Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PostgreSQL 8.2&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.PostgreSQL82Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PostgreSQL 9 and later&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.PostgreSQL9Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Progress&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.ProgressDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SAP DB&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SAPDBDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SAP HANA (column store)&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.HANAColumnStoreDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;SAP HANA (row store)&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.HANARowStoreDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sybase&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SybaseDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sybase 11&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.Sybase11Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sybase ASE 15.5&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SybaseASE15Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sybase ASE 15.7&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SybaseASE157Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Sybase Anywhere&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.SybaseAnywhereDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Teradata&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.TeradataDialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Unisys OS 2200 RDMS&lt;/td&gt;&lt;td&gt;
					&lt;code class=&quot;literal&quot;&gt;org.hibernate.dialect.RDMSOS2200Dialect&lt;/code&gt;
				&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.2. Outer Join Fetching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-outerjoin&quot;/&gt;3.4.2. Outer Join Fetching&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If your database supports ANSI, Oracle or Sybase style outer
      joins, &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;outer join fetching&lt;/em&gt;&lt;/span&gt; will often increase
      performance by limiting the number of round trips to and from the
      database. This is, however, at the cost of possibly more work performed
      by the database itself. Outer join fetching allows a whole graph of
      objects connected by many-to-one, one-to-many, many-to-many and
      one-to-one associations to be retrieved in a single SQL
      &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Outer join fetching can be disabled &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;globally&lt;/em&gt;&lt;/span&gt;
      by setting the property &lt;code class=&quot;literal&quot;&gt;hibernate.max_fetch_depth&lt;/code&gt; to
      &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt;. A setting of &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt; or higher
      enables outer join fetching for one-to-one and many-to-one associations
      that have been mapped with &lt;code class=&quot;literal&quot;&gt;fetch=&quot;join&quot;&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;See &lt;a class=&quot;xref&quot; href=&quot;#performance-fetching&quot; title=&quot;20.1. Fetching strategies&quot;&gt;Section 20.1, âFetching strategiesâ&lt;/a&gt; for more
      information.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.3. Binary Streams&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-binarystreams&quot;/&gt;3.4.3. Binary Streams&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Oracle limits the size of &lt;code class=&quot;literal&quot;&gt;byte&lt;/code&gt; arrays that can
      be passed to and/or from its JDBC driver. If you wish to use large
      instances of &lt;code class=&quot;literal&quot;&gt;binary&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;serializable&lt;/code&gt; type, you should enable
      &lt;code class=&quot;literal&quot;&gt;hibernate.jdbc.use_streams_for_binary&lt;/code&gt;. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;This
      is a system-level setting only.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.4. Second-level and query cache&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-cacheprovider&quot;/&gt;3.4.4. Second-level and query cache&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The properties prefixed by &lt;code class=&quot;literal&quot;&gt;hibernate.cache&lt;/code&gt;
      allow you to use a process or cluster scoped second-level cache system
      with Hibernate. See the &lt;a class=&quot;xref&quot; href=&quot;#performance-cache&quot; title=&quot;20.2. The Second Level Cache&quot;&gt;Section 20.2, âThe Second Level Cacheâ&lt;/a&gt; for more
      information.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.5. Query Language Substitution&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-querysubstitution&quot;/&gt;3.4.5. Query Language Substitution&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;You can define new Hibernate query tokens using
      &lt;code class=&quot;literal&quot;&gt;hibernate.query.substitutions&lt;/code&gt;. For example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.query.substitutions true=1, false=0&lt;/pre&gt;

      &lt;p&gt;This would cause the tokens &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; to be translated to integer literals in the
      generated SQL.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.query.substitutions toLowercase=LOWER&lt;/pre&gt;

      &lt;p&gt;This would allow you to rename the SQL &lt;code class=&quot;literal&quot;&gt;LOWER&lt;/code&gt;
      function.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.4.6. Hibernate statistics&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-statistics&quot;/&gt;3.4.6. Hibernate statistics&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If you enable &lt;code class=&quot;literal&quot;&gt;hibernate.generate_statistics&lt;/code&gt;,
      Hibernate exposes a number of metrics that are useful when tuning a
      running system via &lt;code class=&quot;literal&quot;&gt;SessionFactory.getStatistics()&lt;/code&gt;.
      Hibernate can even be configured to expose these statistics via JMX.
      Read the Javadoc of the interfaces in
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.stats&lt;/code&gt; for more information.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.5. Logging&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-logging&quot;/&gt;3.5. Logging&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
          &lt;p&gt;
              Completely out of date.  Hibernate uses JBoss Logging starting in 4.0.
              This will get documented as we migrate this content to the Developer Guide.
          &lt;/p&gt;
      &lt;/div&gt;

    &lt;p&gt;Hibernate utilizes &lt;a class=&quot;ulink&quot; href=&quot;http://www.slf4j.org/&quot;&gt;Simple Logging
    Facade for Java&lt;/a&gt; (SLF4J) in order to log various system events.
    SLF4J can direct your logging output to several logging frameworks (NOP,
    Simple, log4j version 1.2, JDK 1.4 logging, JCL or logback) depending on
    your chosen binding. In order to setup logging you will need
    &lt;code class=&quot;filename&quot;&gt;slf4j-api.jar&lt;/code&gt; in your classpath together with the jar
    file for your preferred binding - &lt;code class=&quot;filename&quot;&gt;slf4j-log4j12.jar&lt;/code&gt;
    in the case of Log4J. See the SLF4J
        &lt;a class=&quot;ulink&quot; href=&quot;http://www.slf4j.org/manual.html&quot;&gt;documentation&lt;/a&gt;
        for more
    detail. To use Log4j you will also need to place a
    &lt;code class=&quot;filename&quot;&gt;log4j.properties&lt;/code&gt; file in your classpath. An example
    properties file is distributed with Hibernate in the
    &lt;code class=&quot;literal&quot;&gt;src/&lt;/code&gt; directory.&lt;/p&gt;

    &lt;p&gt;It is recommended that you familiarize yourself with Hibernate&apos;s log
    messages. A lot of work has been put into making the Hibernate log as
    detailed as possible, without making it unreadable. It is an essential
    troubleshooting device. The most interesting log categories are the
    following:&lt;/p&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;log-categories&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.9. Hibernate Log Categories&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Hibernate Log Categories&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;2.5*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Category&lt;/th&gt;&lt;th&gt;Function&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.SQL&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all SQL DML statements as they are executed&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all JDBC parameters&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.tool.hbm2ddl&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all SQL DDL statements as they are executed&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.pretty&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log the state of all entities (max 20 entities) associated
            with the session at flush time&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.cache&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all second-level cache activity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log transaction related activity&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.jdbc&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all JDBC resource acquisition&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.hql.internal.ast.AST&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log HQL and SQL ASTs during query parsing&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.secure&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log all JAAS authorization requests&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Log everything. This is a lot of information but it is
            useful for troubleshooting&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;p&gt;When developing applications with Hibernate, you should almost
    always work with &lt;code class=&quot;literal&quot;&gt;debug&lt;/code&gt; enabled for the category
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.SQL&lt;/code&gt;, or, alternatively, the property
    &lt;code class=&quot;literal&quot;&gt;hibernate.show_sql&lt;/code&gt; enabled.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.6. Implementing a NamingStrategy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-namingstrategy&quot;/&gt;3.6. Implementing a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;The interface &lt;code class=&quot;literal&quot;&gt;org.hibernate.cfg.NamingStrategy&lt;/code&gt;
    allows you to specify a &quot;naming standard&quot; for database objects and schema
    elements.&lt;/p&gt;

    &lt;p&gt;You can provide rules for automatically generating database
    identifiers from Java identifiers or for processing &quot;logical&quot; column and
    table names given in the mapping file into &quot;physical&quot; table and column
    names. This feature helps reduce the verbosity of the mapping document,
    eliminating repetitive noise (&lt;code class=&quot;literal&quot;&gt;TBL_&lt;/code&gt; prefixes, for
    example). The default strategy used by Hibernate is quite minimal.&lt;/p&gt;

    &lt;p&gt;You can specify a different strategy by calling
    &lt;code class=&quot;literal&quot;&gt;Configuration.setNamingStrategy()&lt;/code&gt; before adding
    mappings:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SessionFactory sf = new Configuration()
    .setNamingStrategy(ImprovedNamingStrategy.INSTANCE)
    .addFile(&quot;Item.hbm.xml&quot;)
    .addFile(&quot;Bid.hbm.xml&quot;)
    .buildSessionFactory();&lt;/pre&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.cfg.ImprovedNamingStrategy&lt;/code&gt; is a
    built-in strategy that might be a useful starting point for some
    applications.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.7. Implementing a PersisterClassProvider&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e1655&quot;/&gt;3.7. Implementing a PersisterClassProvider&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;You can configure the persister implementation used to persist your
    entities and collections:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;by default, Hibernate uses persisters that make sense in a
        relational model and follow Java Persistence&apos;s specification&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;you can define a &lt;code class=&quot;classname&quot;&gt;PersisterClassProvider&lt;/code&gt;
        implementation that provides the persister class used of a given
        entity or collection&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;finally, you can override them on a per entity and collection
        basis in the mapping using &lt;code class=&quot;classname&quot;&gt;@Persister&lt;/code&gt; or its
        XML equivalent&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;The latter in the list the higher in priority.&lt;/p&gt;

    &lt;p&gt;You can pass the &lt;code class=&quot;classname&quot;&gt;PersisterClassProvider&lt;/code&gt;
    instance to the &lt;code class=&quot;classname&quot;&gt;Configuration&lt;/code&gt; object.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SessionFactory sf = new Configuration()
    .setPersisterClassProvider(customPersisterClassProvider)
    .addAnnotatedClass(Order.class)
    .buildSessionFactory();&lt;/pre&gt;

    &lt;p&gt;The persister class provider methods, when returning a non null
    persister class, override the default Hibernate persisters. The entity
    name or the collection role are passed to the methods. It is a nice way to
    centralize the overriding logic of the persisters instead of spreading
    them on each entity or collection mapping. &lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.8. XML configuration file&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-xmlconfig&quot;/&gt;3.8. XML configuration file&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;An alternative approach to configuration is to specify a full
    configuration in a file named &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt;. This
    file can be used as a replacement for the
    &lt;code class=&quot;literal&quot;&gt;hibernate.properties&lt;/code&gt; file or, if both are present, to
    override properties.&lt;/p&gt;

    &lt;p&gt;The XML configuration file is by default expected to be in the root
    of your &lt;code class=&quot;literal&quot;&gt;CLASSPATH&lt;/code&gt;. Here is an example:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&apos;1.0&apos; encoding=&apos;utf-8&apos;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-configuration PUBLIC
    &quot;-//Hibernate/Hibernate Configuration DTD//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-configuration&amp;gt;

    &amp;lt;!-- a SessionFactory instance listed as /jndi/name --&amp;gt;
    &amp;lt;session-factory
        name=&quot;java:hibernate/SessionFactory&quot;&amp;gt;

        &amp;lt;!-- properties --&amp;gt;
        &amp;lt;property name=&quot;connection.datasource&quot;&amp;gt;java:/comp/env/jdbc/MyDB&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;dialect&quot;&amp;gt;org.hibernate.dialect.MySQLDialect&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;show_sql&quot;&amp;gt;false&amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;transaction.factory_class&quot;&amp;gt;
            org.hibernate.transaction.JTATransactionFactory
        &amp;lt;/property&amp;gt;
        &amp;lt;property name=&quot;jta.UserTransaction&quot;&amp;gt;java:comp/UserTransaction&amp;lt;/property&amp;gt;

        &amp;lt;!-- mapping files --&amp;gt;
        &amp;lt;mapping resource=&quot;org/hibernate/auction/Item.hbm.xml&quot;/&amp;gt;
        &amp;lt;mapping resource=&quot;org/hibernate/auction/Bid.hbm.xml&quot;/&amp;gt;

        &amp;lt;!-- cache settings --&amp;gt;
        &amp;lt;class-cache class=&quot;org.hibernate.auction.Item&quot; usage=&quot;read-write&quot;/&amp;gt;
        &amp;lt;class-cache class=&quot;org.hibernate.auction.Bid&quot; usage=&quot;read-only&quot;/&amp;gt;
        &amp;lt;collection-cache collection=&quot;org.hibernate.auction.Item.bids&quot; usage=&quot;read-write&quot;/&amp;gt;

    &amp;lt;/session-factory&amp;gt;

&amp;lt;/hibernate-configuration&amp;gt;&lt;/pre&gt;

    &lt;p&gt;The advantage of this approach is the externalization of the mapping
    file names to configuration. The &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt; is
    also more convenient once you have to tune the Hibernate cache. It is your
    choice to use either &lt;code class=&quot;literal&quot;&gt;hibernate.properties&lt;/code&gt; or
    &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt;. Both are equivalent, except for the
    above mentioned benefits of using the XML syntax.&lt;/p&gt;

    &lt;p&gt;With the XML configuration, starting Hibernate is then as simple
    as:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SessionFactory sf = new Configuration().configure().buildSessionFactory();&lt;/pre&gt;

    &lt;p&gt;You can select a different XML configuration file using:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SessionFactory sf = new Configuration()
    .configure(&quot;catdb.cfg.xml&quot;)
    .buildSessionFactory();&lt;/pre&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;3.9. Java EE Application Server integration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-j2ee&quot;/&gt;3.9. Java EE Application Server integration&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate has the following integration points for J2EE
    infrastructure:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Container-managed datasources&lt;/em&gt;&lt;/span&gt;: Hibernate
        can use JDBC connections managed by the container and provided through
        JNDI. Usually, a JTA compatible &lt;code class=&quot;literal&quot;&gt;TransactionManager&lt;/code&gt;
        and a &lt;code class=&quot;literal&quot;&gt;ResourceManager&lt;/code&gt; take care of transaction
        management (CMT), especially distributed transaction handling across
        several datasources. You can also demarcate transaction boundaries
        programmatically (BMT), or you might want to use the optional
        Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API for this to keep your
        code portable.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Automatic JNDI binding&lt;/em&gt;&lt;/span&gt;: Hibernate can bind
        its &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; to JNDI after startup.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;JTA Session binding:&lt;/em&gt;&lt;/span&gt; the Hibernate
        &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; can be automatically bound to the scope of
        JTA transactions. Simply lookup the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;
        from JNDI and get the current &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. Let
        Hibernate manage flushing and closing the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
        when your JTA transaction completes. Transaction demarcation is either
        declarative (CMT) or programmatic (BMT/UserTransaction).&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;JMX deployment:&lt;/em&gt;&lt;/span&gt; if you have a JMX capable
        application server (e.g. JBoss AS), you can choose to deploy Hibernate
        as a managed MBean. This saves you the one line startup code to build
        your &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; from a
        &lt;code class=&quot;literal&quot;&gt;Configuration&lt;/code&gt;. The container will startup your
        &lt;code class=&quot;literal&quot;&gt;HibernateService&lt;/code&gt; and also take care of service
        dependencies (datasource has to be available before Hibernate starts,
        etc).&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Depending on your environment, you might have to set the
    configuration option
    &lt;code class=&quot;literal&quot;&gt;hibernate.connection.aggressive_release&lt;/code&gt; to true if your
    application server shows &quot;connection containment&quot; exceptions.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.9.1. Transaction strategy configuration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-transactionstrategy&quot;/&gt;3.9.1. Transaction strategy configuration&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; API is independent of any
      transaction demarcation system in your architecture. If you let
      Hibernate use JDBC directly through a connection pool, you can begin and
      end your transactions by calling the JDBC API. If you run in a J2EE
      application server, you might want to use bean-managed transactions and
      call the JTA API and &lt;code class=&quot;literal&quot;&gt;UserTransaction&lt;/code&gt; when
      needed.&lt;/p&gt;

      &lt;p&gt;To keep your code portable between these two (and other)
      environments we recommend the optional Hibernate
      &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API, which wraps and hides the underlying
      system. You have to specify a factory class for
      &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; instances by setting the Hibernate
      configuration property
      &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.factory_class&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;There are three standard, or built-in, choices:&lt;/p&gt;

      &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JDBCTransactionFactory&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
            &lt;p&gt;delegates to database (JDBC) transactions (default)&lt;/p&gt;
          &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JTATransactionFactory&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
            &lt;p&gt;delegates to container-managed transactions if an existing
            transaction is underway in this context (for example, EJB session
            bean method). Otherwise, a new transaction is started and
            bean-managed transactions are used.&lt;/p&gt;
          &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.CMTTransactionFactory&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
            &lt;p&gt;delegates to container-managed JTA transactions&lt;/p&gt;
          &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

      &lt;p&gt;You can also define your own transaction strategies (for a CORBA
      transaction service, for example).&lt;/p&gt;

      &lt;p&gt;Some features in Hibernate (i.e., the second level cache,
      Contextual Sessions with JTA, etc.) require access to the JTA
      &lt;code class=&quot;literal&quot;&gt;TransactionManager&lt;/code&gt; in a managed environment. In an
      application server, since J2EE does not standardize a single mechanism,
      you have to specify how Hibernate should obtain a reference to the
      &lt;code class=&quot;literal&quot;&gt;TransactionManager&lt;/code&gt;:&lt;/p&gt;

      &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;jtamanagerlookup&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 3.10. JTA TransactionManagers&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
        

        &lt;table summary=&quot;JTA TransactionManagers&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;2.5*&quot;/&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Transaction Factory&lt;/th&gt;&lt;th align=&quot;center&quot;&gt;Application Server&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JBossTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;JBoss AS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.WeblogicTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Weblogic&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.WebSphereTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;WebSphere&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.WebSphereExtendedJTATransactionLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;WebSphere 6&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.OrionTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Orion&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.ResinTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Resin&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JOTMTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;JOTM&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JOnASTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;JOnAS&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JRun4TransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;JRun4&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.BESTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;Borland ES&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JBossTSStandaloneTransactionManagerLookup&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;center&quot;&gt;JBoss TS used standalone (ie. outside
              JBoss AS and a JNDI environment generally). Known to work for
              &lt;code class=&quot;literal&quot;&gt;org.jboss.jbossts:jbossjta:4.11.0.Final&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.9.2. JNDI-bound SessionFactory&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-optional-jndi&quot;/&gt;3.9.2. JNDI-bound &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;A JNDI-bound Hibernate &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; can
      simplify the lookup function of the factory and create new
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s. This is not, however, related to a JNDI
      bound &lt;code class=&quot;literal&quot;&gt;Datasource&lt;/code&gt;; both simply use the same
      registry.&lt;/p&gt;

      &lt;p&gt;If you wish to have the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; bound to
      a JNDI namespace, specify a name (e.g.
      &lt;code class=&quot;literal&quot;&gt;java:hibernate/SessionFactory&lt;/code&gt;) using the property
      &lt;code class=&quot;literal&quot;&gt;hibernate.session_factory_name&lt;/code&gt;. If this property is
      omitted, the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; will not be bound to
      JNDI. This is especially useful in environments with a read-only JNDI
      default implementation (in Tomcat, for example).&lt;/p&gt;

      &lt;p&gt;When binding the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; to JNDI,
      Hibernate will use the values of &lt;code class=&quot;literal&quot;&gt;hibernate.jndi.url&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;hibernate.jndi.class&lt;/code&gt; to instantiate an initial
      context. If they are not specified, the default
      &lt;code class=&quot;literal&quot;&gt;InitialContext&lt;/code&gt; will be used.&lt;/p&gt;

      &lt;p&gt;Hibernate will automatically place the
      &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; in JNDI after you call
      &lt;code class=&quot;literal&quot;&gt;cfg.buildSessionFactory()&lt;/code&gt;. This means you will have
      this call in some startup code, or utility class in your application,
      unless you use JMX deployment with the
      &lt;code class=&quot;literal&quot;&gt;HibernateService&lt;/code&gt; (this is discussed later in greater
      detail).&lt;/p&gt;

      &lt;p&gt;If you use a JNDI &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;, an EJB or any
      other class, you can obtain the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; using
      a JNDI lookup.&lt;/p&gt;

      &lt;p&gt;It is recommended that you bind the
      &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; to JNDI in a managed environment and
      use a &lt;code class=&quot;literal&quot;&gt;static&lt;/code&gt; singleton otherwise. To shield your
      application code from these details, we also recommend to hide the
      actual lookup code for a &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; in a helper
      class, such as &lt;code class=&quot;literal&quot;&gt;HibernateUtil.getSessionFactory()&lt;/code&gt;.
      Note that such a class is also a convenient way to startup Hibernateâsee
      chapter 1.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;3.9.3. Current Session context management with JTA&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;configuration-j2ee-currentsession&quot;/&gt;3.9.3. Current Session context management with JTA&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The easiest way to handle &lt;code class=&quot;literal&quot;&gt;Sessions&lt;/code&gt; and
      transactions is Hibernate&apos;s automatic &quot;current&quot;
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; management. For a discussion of contextual
      sessions see &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt;. Using the
      &lt;code class=&quot;literal&quot;&gt;&quot;jta&quot;&lt;/code&gt; session context, if there is no Hibernate
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; associated with the current JTA transaction,
      one will be started and associated with that JTA transaction the first
      time you call &lt;code class=&quot;literal&quot;&gt;sessionFactory.getCurrentSession()&lt;/code&gt;. The
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s retrieved via
      &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; in the &lt;code class=&quot;literal&quot;&gt;&quot;jta&quot;&lt;/code&gt;
      context are set to automatically flush before the transaction completes,
      close after the transaction completes, and aggressively release JDBC
      connections after each statement. This allows the
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s to be managed by the life cycle of the JTA
      transaction to which it is associated, keeping user code clean of such
      management concerns. Your code can either use JTA programmatically
      through &lt;code class=&quot;literal&quot;&gt;UserTransaction&lt;/code&gt;, or (recommended for portable
      code) use the Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API to set
      transaction boundaries. If you run in an EJB container, declarative
      transaction demarcation with CMT is preferred.&lt;/p&gt;
    &lt;/div&gt;

  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 4. Persistent Classes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes&quot;/&gt;Chapter 4. Persistent Classes&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo&quot;&gt;4.1. A simple POJO example&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-constructor&quot;&gt;4.1.1. Implement a no-argument constructor&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-identifier&quot;&gt;4.1.2. Provide an identifier property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-final&quot;&gt;4.1.3. Prefer non-final classes (semi-optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-pojo-accessors&quot;&gt;4.1.4. Declare accessors and mutators for persistent fields (optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-inheritance&quot;&gt;4.2. Implementing inheritance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-equalshashcode&quot;&gt;4.3. Implementing &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-dynamicmodels&quot;&gt;4.4. Dynamic models&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-tuplizers&quot;&gt;4.5. Tuplizers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#persistent-classes-entity-name-resolver&quot;&gt;4.6. EntityNameResolvers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Persistent classes are classes in an application that implement the entities of the business problem
        (e.g. Customer and Order in an E-commerce application).  The term &quot;persistent&quot; here means that the classes
        are able to be persisted, not that they are in the persistent state (see &lt;a class=&quot;xref&quot; href=&quot;#objectstate-overview&quot; title=&quot;11.1. Hibernate object states&quot;&gt;Section 11.1, âHibernate object statesâ&lt;/a&gt;
        for discussion).
    &lt;/p&gt;

    &lt;p&gt;
        Hibernate works best if these classes follow some simple rules, also known as the Plain Old Java Object (POJO)
        programming model. However, none of these rules are hard requirements. Indeed, Hibernate assumes very little
        about the nature of your persistent objects. You can express a domain model in other ways (using trees of
        &lt;code class=&quot;interfacename&quot;&gt;java.util.Map&lt;/code&gt; instances, for example).
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;4.1. A simple POJO example&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-pojo&quot;/&gt;4.1. A simple POJO example&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-example-cat&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.1. Simple POJO representing a cat&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;
import java.util.Set;
import java.util.Date;

public class Cat {
private Long id; // identifier

private Date birthdate;
private Color color;
private char sex;
private float weight;
    private int litterId;

    private Cat mother;
    private Set kittens = new HashSet();

    private void setId(Long id) {
        this.xml:id=id;
    }
    public Long getId() {
        return id;
    }

    void setBirthdate(Date date) {
        birthdate = date;
    }
    public Date getBirthdate() {
        return birthdate;
    }

    void setWeight(float weight) {
        this.weight = weight;
    }
    public float getWeight() {
        return weight;
    }

    public Color getColor() {
        return color;
    }
    void setColor(Color color) {
        this.color = color;
    }

    void setSex(char sex) {
        this.sex=sex;
    }
    public char getSex() {
        return sex;
    }

    void setLitterId(int id) {
        this.litterId = id;
    }
    public int getLitterId() {
        return litterId;
    }

    void setMother(Cat mother) {
        this.mother = mother;
    }
    public Cat getMother() {
        return mother;
    }
    void setKittens(Set kittens) {
        this.kittens = kittens;
    }
    public Set getKittens() {
        return kittens;
    }

    // addKitten not needed by Hibernate
    public void addKitten(Cat kitten) {
        kitten.setMother(this);
    kitten.setLitterId( kittens.size() );
        kittens.add(kitten);
    }
}&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;


        &lt;p&gt;
            The four main rules of persistent classes are explored in more detail in the following sections.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;4.1.1. Implement a no-argument constructor&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-constructor&quot;/&gt;4.1.1. Implement a no-argument constructor&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                &lt;code class=&quot;classname&quot;&gt;Cat&lt;/code&gt; has a no-argument constructor. All persistent classes must have a default
                constructor (which can be non-public) so that Hibernate can instantiate them using
                &lt;code class=&quot;literal&quot;&gt;java.lang.reflect.Constructor.newInstance()&lt;/code&gt;.  It is recommended
                that this constructor be defined with at least &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;package&lt;/em&gt;&lt;/span&gt; visibility in order for
                runtime proxy generation to work properly.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;4.1.2. Provide an identifier property&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-identifier&quot;/&gt;4.1.2. Provide an identifier property&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Historically this was considered option.  While still not (yet) enforced, this should be considered
                    a deprecated feature as it will be completely required to provide a identifier property in an
                    upcoming release.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                &lt;code class=&quot;classname&quot;&gt;Cat&lt;/code&gt; has a property named &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt;.  This property maps to the
                primary key column(s) of the underlying database table.  The type of the identifier property can
                be any &quot;basic&quot; type (see &lt;a class=&quot;xref&quot; href=&quot;#&quot;&gt;???&lt;/a&gt;).  See &lt;a class=&quot;xref&quot; href=&quot;#components-compositeid&quot; title=&quot;9.4. Components as composite identifiers&quot;&gt;Section 9.4, âComponents as composite identifiersâ&lt;/a&gt;
                for information on mapping composite (multi-column) identifiers.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Identifiers do not necessarily need to identify column(s) in the database physically defined
                    as a primary key.  They should just identify columns that can be used to uniquely identify rows
                    in the underlying table.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                We recommend that you declare consistently-named identifier properties on persistent classes and that you use
                a nullable (i.e., non-primitive) type.
            &lt;/p&gt;
        &lt;/div&gt;


        &lt;div class=&quot;section&quot; title=&quot;4.1.3. Prefer non-final classes (semi-optional)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-final&quot;/&gt;4.1.3. Prefer non-final classes (semi-optional)&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                A central feature of Hibernate, &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;proxies&lt;/em&gt;&lt;/span&gt; (lazy loading), depends upon the
                persistent class being either non-final, or the implementation of an interface that declares all public
                methods.  You can persist &lt;code class=&quot;literal&quot;&gt;final&lt;/code&gt; classes that do not implement an interface with
                Hibernate; you will not, however, be able to use proxies for lazy association fetching which will
                ultimately limit your options for performance tuning.  To persist a &lt;code class=&quot;literal&quot;&gt;final&lt;/code&gt;
                class which does not implement a &quot;full&quot; interface you must disable proxy generation.  See
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-disable-proxies-xml&quot; title=&quot;Example 4.2. Disabling proxies in hbm.xml&quot;&gt;Example 4.2, âDisabling proxies in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;â&lt;/a&gt; and
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-disable-proxies-ann&quot; title=&quot;Example 4.3. Disabling proxies in annotations&quot;&gt;Example 4.3, âDisabling proxies in annotationsâ&lt;/a&gt;.
            &lt;/p&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-final-example-disable-proxies-xml&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.2. Disabling proxies in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Cat&quot; lazy=&quot;false&quot;...&amp;gt;...&amp;lt;/class&amp;gt;&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-final-example-disable-proxies-ann&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.3. Disabling proxies in annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity @Proxy(lazy=false) public class Cat { ... }&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

            &lt;p&gt;
                If the &lt;code class=&quot;literal&quot;&gt;final&lt;/code&gt; class does implement a proper interface, you could alternatively tell
                Hibernate to use the interface instead when generating the proxies.  See
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-proxy-interface-xml&quot; title=&quot;Example 4.4. Proxying an interface in hbm.xml&quot;&gt;Example 4.4, âProxying an interface in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;â&lt;/a&gt; and
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-proxy-interface-ann&quot; title=&quot;Example 4.5. Proxying an interface in annotations&quot;&gt;Example 4.5, âProxying an interface in annotationsâ&lt;/a&gt;.

            &lt;/p&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-final-example-proxy-interface-xml&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.4. Proxying an interface in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Cat&quot; proxy=&quot;ICat&quot;...&amp;gt;...&amp;lt;/class&amp;gt;&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-final-example-proxy-interface-ann&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.5. Proxying an interface in annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity @Proxy(proxyClass=ICat.class) public class Cat implements ICat { ... }&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

            &lt;p&gt;
                You should also avoid declaring &lt;code class=&quot;literal&quot;&gt;public final&lt;/code&gt; methods as this will again limit
                the ability to generate &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;proxies&lt;/em&gt;&lt;/span&gt; from this class.  If you want to use a
                class with &lt;code class=&quot;literal&quot;&gt;public final&lt;/code&gt; methods, you must explicitly disable proxying.  Again, see
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-disable-proxies-xml&quot; title=&quot;Example 4.2. Disabling proxies in hbm.xml&quot;&gt;Example 4.2, âDisabling proxies in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;â&lt;/a&gt; and
                &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-pojo-final-example-disable-proxies-ann&quot; title=&quot;Example 4.3. Disabling proxies in annotations&quot;&gt;Example 4.3, âDisabling proxies in annotationsâ&lt;/a&gt;.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;4.1.4. Declare accessors and mutators for persistent fields (optional)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-pojo-accessors&quot;/&gt;4.1.4. Declare accessors and mutators for persistent fields (optional)&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                &lt;code class=&quot;classname&quot;&gt;Cat&lt;/code&gt; declares accessor methods for all its persistent fields. Many other ORM
                tools directly persist instance variables. It is better to provide an indirection between the relational
                schema and internal data structures of the class. By default, Hibernate persists JavaBeans style
                properties and recognizes method names of the form &lt;code class=&quot;literal&quot;&gt;getFoo&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;isFoo&lt;/code&gt;
                and &lt;code class=&quot;literal&quot;&gt;setFoo&lt;/code&gt;.  If required, you can switch to direct field access for particular
                properties.
            &lt;/p&gt;

            &lt;p&gt;
                Properties need &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; be declared public.  Hibernate can persist a property declared
                with &lt;code class=&quot;literal&quot;&gt;package&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;protected&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;private&lt;/code&gt; visibility
                as well.
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;4.2. Implementing inheritance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-inheritance&quot;/&gt;4.2. Implementing inheritance&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;A subclass must also observe the first and second rules. It inherits
    its identifier property from the superclass, &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;. For
    example:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;

public class DomesticCat extends Cat {
        private String name;

        public String getName() {
                return name;
        }
        protected void setName(String name) {
                this.name=name;
        }
}&lt;/pre&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;4.3. Implementing equals() and hashCode()&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-equalshashcode&quot;/&gt;4.3. Implementing &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;You have to override the &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; methods if you:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;intend to put instances of persistent classes in a
        &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt; (the recommended way to represent many-valued
        associations); &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;and&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;intend to use reattachment of detached instances&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Hibernate guarantees equivalence of persistent identity (database
    row) and Java identity only inside a particular session scope. When you
    mix instances retrieved in different sessions, you must implement
    &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; if you wish
    to have meaningful semantics for &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;s.&lt;/p&gt;

    &lt;p&gt;The most obvious way is to implement
    &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt;/&lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; by comparing the
    identifier value of both objects. If the value is the same, both must be
    the same database row, because they are equal. If both are added to a
    &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;, you will only have one element in the
    &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;). Unfortunately, you cannot use that approach with
    generated identifiers. Hibernate will only assign identifier values to
    objects that are persistent; a newly created instance will not have any
    identifier value. Furthermore, if an instance is unsaved and currently in
    a &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;, saving it will assign an identifier value to the
    object. If &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;
    are based on the identifier value, the hash code would change, breaking
    the contract of the &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;. See the Hibernate website for
    a full discussion of this problem. This is not a Hibernate issue, but
    normal Java semantics of object identity and equality.&lt;/p&gt;

    &lt;p&gt;It is recommended that you implement &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; using &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Business key
    equality&lt;/em&gt;&lt;/span&gt;. Business key equality means that the
    &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; method compares only the properties that form
    the business key. It is a key that would identify our instance in the real
    world (a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;natural&lt;/em&gt;&lt;/span&gt; candidate key):&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Cat {

    ...
    public boolean equals(Object other) {
        if (this == other) return true;
        if ( !(other instanceof Cat) ) return false;

        final Cat cat = (Cat) other;

        if ( !cat.getLitterId().equals( getLitterId() ) ) return false;
        if ( !cat.getMother().equals( getMother() ) ) return false;

        return true;
    }

    public int hashCode() {
        int result;
        result = getMother().hashCode();
        result = 29 * result + getLitterId();
        return result;
    }

}&lt;/pre&gt;

    &lt;p&gt;A business key does not have to be as solid as a database primary
    key candidate (see &lt;a class=&quot;xref&quot; href=&quot;#transactions-basics-identity&quot; title=&quot;13.1.3. Considering object identity&quot;&gt;Section 13.1.3, âConsidering object identityâ&lt;/a&gt;).
    Immutable or unique properties are usually good candidates for a business
    key.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;4.4. Dynamic models&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-dynamicmodels&quot;/&gt;4.4. Dynamic models&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      

      &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;The following features are currently considered
      experimental and may change in the near future.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;Persistent entities do not necessarily have to be represented as
    POJO classes or as JavaBean objects at runtime. Hibernate also supports
    dynamic models (using &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;s of &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;s
    at runtime). With this approach, you do not write persistent classes, 
    only mapping files.&lt;/p&gt;

    &lt;p&gt;By default, Hibernate works in normal POJO mode. You can set a
    default entity representation mode for a particular
    &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; using the
    &lt;code class=&quot;literal&quot;&gt;default_entity_mode&lt;/code&gt; configuration option (see &lt;a class=&quot;xref&quot; href=&quot;#configuration-optional-properties&quot; title=&quot;Table 3.3. Hibernate Configuration Properties&quot;&gt;Table 3.3, âHibernate Configuration Propertiesâ&lt;/a&gt;).&lt;/p&gt;

    &lt;p&gt;The following examples demonstrate the representation using
    &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;s. First, in the mapping file an
    &lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt; has to be declared instead of, or in
    addition to, a class name:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class entity-name=&quot;Customer&quot;&amp;gt;

        &amp;lt;id name=&quot;id&quot;
            type=&quot;long&quot;
            column=&quot;ID&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;

        &amp;lt;property name=&quot;name&quot;
            column=&quot;NAME&quot;
            type=&quot;string&quot;/&amp;gt;

        &amp;lt;property name=&quot;address&quot;
            column=&quot;ADDRESS&quot;
            type=&quot;string&quot;/&amp;gt;

        &amp;lt;many-to-one name=&quot;organization&quot;
            column=&quot;ORGANIZATION_ID&quot;
            class=&quot;Organization&quot;/&amp;gt;

        &amp;lt;bag name=&quot;orders&quot;
            inverse=&quot;true&quot;
            lazy=&quot;false&quot;
            cascade=&quot;all&quot;&amp;gt;
            &amp;lt;key column=&quot;CUSTOMER_ID&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Order&quot;/&amp;gt;
        &amp;lt;/bag&amp;gt;

    &amp;lt;/class&amp;gt;
    
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;Even though associations are declared using target class names, the
    target type of associations can also be a dynamic entity instead of a
    POJO.&lt;/p&gt;

    &lt;p&gt;After setting the default entity mode to
    &lt;code class=&quot;literal&quot;&gt;dynamic-map&lt;/code&gt; for the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;,
    you can, at runtime, work with &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;s of
    &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;s:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session s = openSession();
Transaction tx = s.beginTransaction();

// Create a customer
Map david = new HashMap();
david.put(&quot;name&quot;, &quot;David&quot;);

// Create an organization
Map foobar = new HashMap();
foobar.put(&quot;name&quot;, &quot;Foobar Inc.&quot;);

// Link both
david.put(&quot;organization&quot;, foobar);

// Save both
s.save(&quot;Customer&quot;, david);
s.save(&quot;Organization&quot;, foobar);

tx.commit();
s.close();&lt;/pre&gt;

    &lt;p&gt;One of the main advantages of dynamic mapping is quick turnaround
    time for prototyping, without the need for entity class implementation.
    However, you lose compile-time type checking and will likely deal with
    many exceptions at runtime. As a result of the Hibernate mapping, the
    database schema can easily be normalized and sound, allowing to add a
    proper domain model implementation on top later on.&lt;/p&gt;

    &lt;p&gt;Entity representation modes can also be set on a per
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; basis:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session dynamicSession = pojoSession.getSession(EntityMode.MAP);

// Create a customer
Map david = new HashMap();
david.put(&quot;name&quot;, &quot;David&quot;);
dynamicSession.save(&quot;Customer&quot;, david);
...
dynamicSession.flush();
dynamicSession.close()
...
// Continue on pojoSession
&lt;/pre&gt;

    &lt;p&gt;Please note that the call to &lt;code class=&quot;literal&quot;&gt;getSession()&lt;/code&gt; using
    an &lt;code class=&quot;literal&quot;&gt;EntityMode&lt;/code&gt; is on the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; API,
    not the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;. That way, the new
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; shares the underlying JDBC connection,
    transaction, and other context information. This means you do not have to
    call &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;close()&lt;/code&gt; on the
    secondary &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, and also leave the transaction and
    connection handling to the primary unit of work.&lt;/p&gt;
  &lt;/div&gt;


    &lt;div class=&quot;section&quot; title=&quot;4.5. Tuplizers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-tuplizers&quot;/&gt;4.5. Tuplizers&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.tuple.Tuplizer&lt;/code&gt; and its sub-interfaces are responsible for
            managing a particular representation of a piece of data given that representation&apos;s
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.EntityMode&lt;/code&gt;.  If a given piece of data is thought of as a data
            structure, then a tuplizer is the thing that knows how to create such a data structure, how to extract
            values from such a data structure and how to inject values into such a data structure.  For example, for
            the POJO entity mode, the corresponding tuplizer knows how create the POJO through its constructor.
            It also knows how to access the POJO properties using the defined property accessors.
        &lt;/p&gt;

        &lt;p&gt;
            There are two (high-level) types of Tuplizers:
            &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.tuple.entity.EntityTuplizer&lt;/code&gt; which is
                        responsible for managing the above mentioned contracts in regards to entities
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.tuple.component.ComponentTuplizer&lt;/code&gt; which does the
                        same for components
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
        &lt;/p&gt;

        &lt;p&gt;
            Users can also plug in their own tuplizers. Perhaps you require that
            &lt;code class=&quot;interfacename&quot;&gt;java.util.Map&lt;/code&gt; implementation other than
            &lt;code class=&quot;classname&quot;&gt;java.util.HashMap&lt;/code&gt; be used while in the dynamic-map entity-mode.  Or perhaps you
            need to define a different proxy generation strategy than the one used by default.  Both would be achieved
            by defining a custom tuplizer implementation.  Tuplizer definitions are attached to the entity or component
            mapping they are meant to manage.  Going back to the example of our &lt;code class=&quot;classname&quot;&gt;Customer&lt;/code&gt; entity,
            &lt;a class=&quot;xref&quot; href=&quot;#example-specify-custom-tuplizer-ann&quot; title=&quot;Example 4.6. Specify custom tuplizers in annotations&quot;&gt;Example 4.6, âSpecify custom tuplizers in annotationsâ&lt;/a&gt; shows how to specify a custom
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.tuple.entity.EntityTuplizer&lt;/code&gt; using annotations while
            &lt;a class=&quot;xref&quot; href=&quot;#example-specify-custom-tuplizer-xml&quot; title=&quot;Example 4.7. Specify custom tuplizers in hbm.xml&quot;&gt;Example 4.7, âSpecify custom tuplizers in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;â&lt;/a&gt; shows how to do the same in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;
        &lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-specify-custom-tuplizer-ann&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.6. Specify custom tuplizers in annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
@Tuplizer(impl = DynamicEntityTuplizer.class)
public interface Cuisine {
    @Id
    @GeneratedValue
    public Long getId();
    public void setId(Long id);

    public String getName();
    public void setName(String name);

    @Tuplizer(impl = DynamicComponentTuplizer.class)
    public Country getCountry();
    public void setCountry(Country country);
}&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-specify-custom-tuplizer-xml&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 4.7. Specify custom tuplizers in &lt;code class=&quot;literal&quot;&gt;hbm.xml&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    &amp;lt;class entity-name=&quot;Customer&quot;&amp;gt;
        &amp;lt;!--
            Override the dynamic-map entity-mode
            tuplizer for the customer entity
        --&amp;gt;
        &amp;lt;tuplizer entity-mode=&quot;dynamic-map&quot;
                class=&quot;CustomMapTuplizerImpl&quot;/&amp;gt;

        &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;ID&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;

        &amp;lt;!-- other properties --&amp;gt;
        ...
    &amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;4.6. EntityNameResolvers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;persistent-classes-entity-name-resolver&quot;/&gt;4.6. EntityNameResolvers&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.EntityNameResolver&lt;/code&gt; is a contract for resolving the entity name
            of a given entity instance. The interface defines a single method &lt;code class=&quot;methodname&quot;&gt;resolveEntityName&lt;/code&gt;
            which is passed the entity instance and is expected to return the appropriate entity name (null is
            allowed and would indicate that the resolver does not know how to resolve the entity name of the given entity
            instance). Generally speaking, an &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.EntityNameResolver&lt;/code&gt; is going
            to be most useful in the case of dynamic models. One example might be using proxied interfaces as your
            domain model. The hibernate test suite has an example of this exact style of usage under the
            &lt;span class=&quot;package&quot;&gt;org.hibernate.test.dynamicentity.tuplizer2&lt;/span&gt;. Here is some of the code from that package
            for illustration.
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;/**
 * A very trivial JDK Proxy InvocationHandler implementation where we proxy an
 * interface as the domain model and simply store persistent state in an internal
 * Map.  This is an extremely trivial example meant only for illustration.
 */
public final class DataProxyHandler implements InvocationHandler {
	private String entityName;
	private HashMap data = new HashMap();

	public DataProxyHandler(String entityName, Serializable id) {
		this.entityName = entityName;
		data.put( &quot;Id&quot;, id );
	}

	public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
		String methodName = method.getName();
		if ( methodName.startsWith( &quot;set&quot; ) ) {
			String propertyName = methodName.substring( 3 );
			data.put( propertyName, args[0] );
		}
		else if ( methodName.startsWith( &quot;get&quot; ) ) {
			String propertyName = methodName.substring( 3 );
			return data.get( propertyName );
		}
		else if ( &quot;toString&quot;.equals( methodName ) ) {
			return entityName + &quot;#&quot; + data.get( &quot;Id&quot; );
		}
		else if ( &quot;hashCode&quot;.equals( methodName ) ) {
			return new Integer( this.hashCode() );
		}
		return null;
	}

	public String getEntityName() {
		return entityName;
	}

	public HashMap getData() {
		return data;
	}
}

public class ProxyHelper {
    public static String extractEntityName(Object object) {
        // Our custom java.lang.reflect.Proxy instances actually bundle
        // their appropriate entity name, so we simply extract it from there
        // if this represents one of our proxies; otherwise, we return null
        if ( Proxy.isProxyClass( object.getClass() ) ) {
            InvocationHandler handler = Proxy.getInvocationHandler( object );
            if ( DataProxyHandler.class.isAssignableFrom( handler.getClass() ) ) {
                DataProxyHandler myHandler = ( DataProxyHandler ) handler;
                return myHandler.getEntityName();
            }
        }
        return null;
    }

    // various other utility methods ....

}

/**
 * The EntityNameResolver implementation.
 *
 * IMPL NOTE : An EntityNameResolver really defines a strategy for how entity names
 * should be resolved.  Since this particular impl can handle resolution for all of our
 * entities we want to take advantage of the fact that SessionFactoryImpl keeps these
 * in a Set so that we only ever have one instance registered.  Why?  Well, when it
 * comes time to resolve an entity name, Hibernate must iterate over all the registered
 * resolvers.  So keeping that number down helps that process be as speedy as possible.
 * Hence the equals and hashCode implementations as is
 */
public class MyEntityNameResolver implements EntityNameResolver {
    public static final MyEntityNameResolver INSTANCE = new MyEntityNameResolver();

    public String resolveEntityName(Object entity) {
        return ProxyHelper.extractEntityName( entity );
    }

    public boolean equals(Object obj) {
        return getClass().equals( obj.getClass() );
    }

    public int hashCode() {
        return getClass().hashCode();
    }
}

public class MyEntityTuplizer extends PojoEntityTuplizer {
	public MyEntityTuplizer(EntityMetamodel entityMetamodel, PersistentClass mappedEntity) {
		super( entityMetamodel, mappedEntity );
	}

	public EntityNameResolver[] getEntityNameResolvers() {
		return new EntityNameResolver[] { MyEntityNameResolver.INSTANCE };
	}

    public String determineConcreteSubclassEntityName(Object entityInstance, SessionFactoryImplementor factory) {
        String entityName = ProxyHelper.extractEntityName( entityInstance );
        if ( entityName == null ) {
            entityName = super.determineConcreteSubclassEntityName( entityInstance, factory );
        }
        return entityName;
    }

    ...
&lt;/pre&gt;

        &lt;p&gt;
            In order to register an &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.EntityNameResolver&lt;/code&gt; users must either:
            &lt;/p&gt;&lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        Implement a custom tuplizer (see &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-tuplizers&quot; title=&quot;4.5. Tuplizers&quot;&gt;Section 4.5, âTuplizersâ&lt;/a&gt;), implementing
                        the &lt;code class=&quot;methodname&quot;&gt;getEntityNameResolvers&lt;/code&gt; method
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        Register it with the &lt;code class=&quot;classname&quot;&gt;org.hibernate.impl.SessionFactoryImpl&lt;/code&gt; (which is the
                        implementation class for &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt;) using the
                        &lt;code class=&quot;methodname&quot;&gt;registerEntityNameResolver&lt;/code&gt; method.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;p&gt;
        &lt;/p&gt;
    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 5. Basic O/R Mapping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping&quot;/&gt;Chapter 5. Basic O/R Mapping&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration&quot;&gt;5.1. Mapping declaration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-class&quot;&gt;5.1.1. Entity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-id&quot;&gt;5.1.2. Identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e2835&quot;&gt;5.1.3. Optimistic locking properties (optional)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-property&quot;&gt;5.1.4. Property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-component&quot;&gt;5.1.5. Embedded objects (aka components)&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e3356&quot;&gt;5.1.6. Inheritance strategy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e3678&quot;&gt;5.1.7. Mapping one to one and one to many associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-naturalid&quot;&gt;5.1.8. Natural-id&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-anymapping&quot;&gt;5.1.9. Any&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-declaration-properties&quot;&gt;5.1.10. Properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e4065&quot;&gt;5.1.11. Some hbm.xml specificities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types&quot;&gt;5.2. Hibernate types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-entitiesvalues&quot;&gt;5.2.1. Entities and values&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-basictypes&quot;&gt;5.2.2. Basic value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-types-custom&quot;&gt;5.2.3. Custom value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-entityname&quot;&gt;5.3. Mapping a class more than once&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-quotedidentifiers&quot;&gt;5.4. SQL quoted identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-generated&quot;&gt;5.5. Generated properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-column-read-and-write&quot;&gt;5.6. Column transformers: read and write expressions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#mapping-database-object&quot;&gt;5.7. Auxiliary database objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;div class=&quot;section&quot; title=&quot;5.1. Mapping declaration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration&quot;/&gt;5.1. Mapping declaration&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Object/relational mappings can be defined in three
    approaches:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;using Java 5 annotations (via the Java Persistence 2
        annotations)&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;using JPA 2 XML deployment descriptors (described in chapter
        XXX)&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;using the Hibernate legacy XML files approach known as
        hbm.xml&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Annotations are split in two categories, the logical mapping
    annotations (describing the object model, the association between two
    entities etc.) and the physical mapping annotations (describing the
    physical schema, tables, columns, indexes, etc). We will mix annotations
    from both categories in the following code examples.&lt;/p&gt;

    &lt;p&gt;JPA annotations are in the &lt;code class=&quot;literal&quot;&gt;javax.persistence.*&lt;/code&gt;
    package. Hibernate specific extensions are in
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.annotations.*&lt;/code&gt;. You favorite IDE can
    auto-complete annotations and their attributes for you (even without a
    specific &quot;JPA&quot; plugin, since JPA annotations are plain Java 5
    annotations).&lt;/p&gt;

    &lt;p&gt;Here is an example of mapping&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;

@Entity 
@Table(name=&quot;cats&quot;) @Inheritance(strategy=SINGLE_TABLE)
@DiscriminatorValue(&quot;C&quot;) @DiscriminatorColumn(name=&quot;subclass&quot;, discriminatorType=CHAR)
public class Cat {
   
   @Id @GeneratedValue
   public Integer getId() { return id; }
   public void setId(Integer id) { this.id = id; }
   private Integer id;

   public BigDecimal getWeight() { return weight; }
   public void setWeight(BigDecimal weight) { this.weight = weight; }
   private BigDecimal weight;

   @Temporal(DATE) @NotNull @Column(updatable=false)
   public Date getBirthdate() { return birthdate; }
   public void setBirthdate(Date birthdate) { this.birthdate = birthdate; }
   private Date birthdate;

   @org.hibernate.annotations.Type(type=&quot;eg.types.ColorUserType&quot;)
   @NotNull @Column(updatable=false)
   public ColorType getColor() { return color; }
   public void setColor(ColorType color) { this.color = color; }
   private ColorType color;

   @NotNull @Column(updatable=false)
   public String getSex() { return sex; }
   public void setSex(String sex) { this.sex = sex; }
   private String sex;

   @NotNull @Column(updatable=false)
   public Integer getLitterId() { return litterId; }
   public void setLitterId(Integer litterId) { this.litterId = litterId; }
   private Integer litterId;

   @ManyToOne @JoinColumn(name=&quot;mother_id&quot;, updatable=false)
   public Cat getMother() { return mother; }
   public void setMother(Cat mother) { this.mother = mother; }
   private Cat mother;

   @OneToMany(mappedBy=&quot;mother&quot;) @OrderBy(&quot;litterId&quot;)
   public Set&amp;lt;Cat&amp;gt; getKittens() { return kittens; }
   public void setKittens(Set&amp;lt;Cat&amp;gt; kittens) { this.kittens = kittens; }
   private Set&amp;lt;Cat&amp;gt; kittens = new HashSet&amp;lt;Cat&amp;gt;();
}

@Entity @DiscriminatorValue(&quot;D&quot;)
public class DomesticCat extends Cat {

   public String getName() { return name; }
   public void setName(String name) { this.name = name }
   private String name;
}

@Entity
public class Dog { ... }&lt;/pre&gt;

    &lt;p&gt;The legacy hbm.xml approach uses an XML schema designed to be
    readable and hand-editable. The mapping language is Java-centric, meaning
    that mappings are constructed around persistent class declarations and not
    table declarations.&lt;/p&gt;

    &lt;p&gt;Please note that even though many Hibernate users choose to write
    the XML by hand, a number of tools exist to generate the mapping document.
    These include XDoclet, Middlegen and AndroMDA.&lt;/p&gt;

    &lt;p&gt;Here is an example mapping:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-mapping PUBLIC
      &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
          &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-mapping package=&quot;eg&quot;&amp;gt;

        &amp;lt;class name=&quot;Cat&quot;
            table=&quot;cats&quot;
            discriminator-value=&quot;C&quot;&amp;gt;

                &amp;lt;id name=&quot;id&quot;&amp;gt;
                        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
                &amp;lt;/id&amp;gt;

                &amp;lt;discriminator column=&quot;subclass&quot;
                     type=&quot;character&quot;/&amp;gt;

                &amp;lt;property name=&quot;weight&quot;/&amp;gt;

                &amp;lt;property name=&quot;birthdate&quot;
                    type=&quot;date&quot;
                    not-null=&quot;true&quot;
                    update=&quot;false&quot;/&amp;gt;

                &amp;lt;property name=&quot;color&quot;
                    type=&quot;eg.types.ColorUserType&quot;
                    not-null=&quot;true&quot;
                    update=&quot;false&quot;/&amp;gt;

                &amp;lt;property name=&quot;sex&quot;
                    not-null=&quot;true&quot;
                    update=&quot;false&quot;/&amp;gt;

                &amp;lt;property name=&quot;litterId&quot;
                    column=&quot;litterId&quot;
                    update=&quot;false&quot;/&amp;gt;

                &amp;lt;many-to-one name=&quot;mother&quot;
                    column=&quot;mother_id&quot;
                    update=&quot;false&quot;/&amp;gt;

                &amp;lt;set name=&quot;kittens&quot;
                    inverse=&quot;true&quot;
                    order-by=&quot;litter_id&quot;&amp;gt;
                        &amp;lt;key column=&quot;mother_id&quot;/&amp;gt;
                        &amp;lt;one-to-many class=&quot;Cat&quot;/&amp;gt;
                &amp;lt;/set&amp;gt;

                &amp;lt;subclass name=&quot;DomesticCat&quot;
                    discriminator-value=&quot;D&quot;&amp;gt;

                        &amp;lt;property name=&quot;name&quot;
                            type=&quot;string&quot;/&amp;gt;

                &amp;lt;/subclass&amp;gt;

        &amp;lt;/class&amp;gt;

        &amp;lt;class name=&quot;Dog&quot;&amp;gt;
                &amp;lt;!-- mapping for Dog could go here --&amp;gt;
        &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;We will now discuss the concepts of the mapping documents (both
    annotations and XML). We will only describe, however, the document
    elements and attributes that are used by Hibernate at runtime. The mapping
    document also contains some extra optional attributes and elements that
    affect the database schemas exported by the schema export tool (for
    example, the &lt;code class=&quot;literal&quot;&gt; not-null&lt;/code&gt; attribute).&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.1. Entity&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-class&quot;/&gt;5.1.1. Entity&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;An entity is a regular Java object (aka POJO) which will be
      persisted by Hibernate.&lt;/p&gt;

      &lt;p&gt;To mark an object as an entity in annotations, use the
      &lt;code class=&quot;classname&quot;&gt;@Entity&lt;/code&gt; annotation.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;That&apos;s pretty much it, the rest is optional. There are however any
      options to tweak your entity mapping, let&apos;s explore them.&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@Table&lt;/code&gt; lets you define the table the entity
      will be persisted into. If undefined, the table name is the unqualified
      class name of the entity. You can also optionally define the catalog,
      the schema as well as unique constraints on the table.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
@Table(name=&quot;TBL_FLIGHT&quot;, 
       schema=&quot;AIR_COMMAND&quot;, 
       uniqueConstraints=
           @UniqueConstraint(
               name=&quot;flight_number&quot;, 
               columnNames={&quot;comp_prefix&quot;, &quot;flight_number&quot;} ) )
public class Flight implements Serializable {
    @Column(name=&quot;comp_prefix&quot;)
    public String getCompagnyPrefix() { return companyPrefix; }

    @Column(name=&quot;flight_number&quot;)
    public String getNumber() { return number; }
}&lt;/pre&gt;

      &lt;p&gt;The constraint name is optional (generated if left undefined). The
      column names composing the constraint correspond to the column names as
      defined before the Hibernate &lt;code class=&quot;classname&quot;&gt;NamingStrategy&lt;/code&gt; is
      applied.&lt;/p&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
        &lt;p&gt;Be sure to use the database-level column names for the &lt;code class=&quot;literal&quot;&gt;columnNames&lt;/code&gt;
         property of a &lt;code class=&quot;literal&quot;&gt;@UniqueConstraint&lt;/code&gt;. For example, whilst for simple types the
         database-level column name may be the same as the entity-level property name, this is often
         not the case for relational properties.
        &lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;@Entity.name&lt;/code&gt; lets you define the shortcut name
      of the entity you can used in JP-QL and HQL queries. It defaults to the
      unqualified class name of the class.&lt;/p&gt;

      &lt;p&gt;Hibernate goes beyond the JPA specification and provide additional
      configurations. Some of them are hosted on
      &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Entity&lt;/code&gt;:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;dynamicInsert&lt;/code&gt; /
          &lt;code class=&quot;literal&quot;&gt;dynamicUpdate&lt;/code&gt; (defaults to false): specifies that
          &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; / &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; SQL should be
          generated at runtime and contain only the columns whose values are
          not null. The &lt;code class=&quot;literal&quot;&gt;dynamic-update&lt;/code&gt; and
          &lt;code class=&quot;literal&quot;&gt;dynamic-insert&lt;/code&gt; settings are not inherited by
          subclasses. Although these settings can increase performance in some
          cases, they can actually decrease performance in others.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;selectBeforeUpdate&lt;/code&gt; (defaults to false):
          specifies that Hibernate should &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;never&lt;/em&gt;&lt;/span&gt; perform
          an SQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; unless it is certain that an object
          is actually modified. Only when a transient object has been
          associated with a new session using &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;,
          will Hibernate perform an extra SQL &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; to
          determine if an &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; is actually required. Use
          of &lt;code class=&quot;literal&quot;&gt;select-before-update&lt;/code&gt; will usually decrease
          performance. It is useful to prevent a database update trigger being
          called unnecessarily if you reattach a graph of detached instances
          to a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;polymorphisms&lt;/code&gt; (defaults to
          &lt;code class=&quot;literal&quot;&gt;IMPLICIT&lt;/code&gt;): determines whether implicit or
          explicit query polymorphisms is used. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Implicit&lt;/em&gt;&lt;/span&gt;
          polymorphisms means that instances of the class will be returned by
          a query that names any superclass or implemented interface or class,
          and that instances of any subclass of the class will be returned by
          a query that names the class itself. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Explicit&lt;/em&gt;&lt;/span&gt;
          polymorphisms means that class instances will be returned only by
          queries that explicitly name that class. Queries that name the class
          will return only instances of subclasses mapped. For most purposes,
          the default &lt;code class=&quot;literal&quot;&gt;polymorphisms=IMPLICIT&lt;/code&gt; is
          appropriate. Explicit polymorphisms is useful when two different
          classes are mapped to the same table This allows a &quot;lightweight&quot;
          class that contains a subset of the table columns.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;persister&lt;/code&gt;: specifies a custom
          &lt;code class=&quot;literal&quot;&gt;ClassPersister&lt;/code&gt;. The &lt;code class=&quot;literal&quot;&gt;persister&lt;/code&gt;
          attribute lets you customize the persistence strategy used for the
          class. You can, for example, specify your own subclass of
          &lt;code class=&quot;literal&quot;&gt;org.hibernate.persister.EntityPersister&lt;/code&gt;, or you
          can even provide a completely new implementation of the interface
          &lt;code class=&quot;literal&quot;&gt;org.hibernate.persister.ClassPersister&lt;/code&gt; that
          implements, for example, persistence via stored procedure calls,
          serialization to flat files or LDAP. See
          &lt;code class=&quot;literal&quot;&gt;org.hibernate.test.CustomPersister&lt;/code&gt; for a simple
          example of &quot;persistence&quot; to a &lt;code class=&quot;literal&quot;&gt;Hashtable&lt;/code&gt;.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimisticLock&lt;/code&gt; (defaults to
          &lt;code class=&quot;literal&quot;&gt;VERSION&lt;/code&gt;): determines the optimistic locking
          strategy. If you enable &lt;code class=&quot;literal&quot;&gt;dynamicUpdate&lt;/code&gt;, you will
          have a choice of optimistic locking strategies:&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;version&lt;/code&gt;: check the version/timestamp
              columns&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt;: check all columns&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;dirty&lt;/code&gt;: check the changed columns,
              allowing some concurrent updates&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;: do not use optimistic
              locking&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

          &lt;p&gt;It is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;strongly&lt;/em&gt;&lt;/span&gt; recommended that you use
          version/timestamp columns for optimistic locking with Hibernate.
          This strategy optimizes performance and correctly handles
          modifications made to detached instances (i.e. when
          &lt;code class=&quot;literal&quot;&gt;Session.merge()&lt;/code&gt; is used).&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
        &lt;p&gt;Be sure to import
        &lt;code class=&quot;classname&quot;&gt;@javax.persistence.Entity&lt;/code&gt; to mark a class as an
        entity. It&apos;s a common mistake to import
        &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Entity&lt;/code&gt; by
        accident.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;Some entities are not mutable. They cannot be updated
      by the application. This allows Hibernate to make some minor performance
      optimizations.. Use the &lt;code class=&quot;classname&quot;&gt;@Immutable&lt;/code&gt;
      annotation.&lt;/p&gt;

      &lt;p&gt;You can also alter how Hibernate deals with lazy initialization
      for this class. On &lt;code class=&quot;classname&quot;&gt;@Proxy&lt;/code&gt;, use
      &lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt;=false to disable lazy fetching (not
      recommended). You can also specify an interface to use for lazy
      initializing proxies (defaults to the class itself): use
      &lt;code class=&quot;literal&quot;&gt;proxyClass&lt;/code&gt; on &lt;code class=&quot;classname&quot;&gt;@Proxy&lt;/code&gt;.
      Hibernate will initially return proxies ( using bytecode provider defined by &lt;code class=&quot;literal&quot;&gt;hibernate.bytecode.provider&lt;/code&gt;) that
      implement the named interface. The persistent object will load when a
      method of the proxy is invoked. See &quot;Initializing collections and
      proxies&quot; below.&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@BatchSize&lt;/code&gt; specifies a &quot;batch size&quot; for
      fetching instances of this class by identifier. Not yet loaded instances
      are loaded batch-size at a time (default 1).&lt;/p&gt;

      &lt;p&gt;You can specific an arbitrary SQL WHERE condition to be used when
      retrieving objects of this class. Use &lt;code class=&quot;classname&quot;&gt;@Where&lt;/code&gt; for
      that.&lt;/p&gt;

      &lt;p&gt;In the same vein, &lt;code class=&quot;classname&quot;&gt;@Check&lt;/code&gt; lets you define an
      SQL expression used to generate a multi-row &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;check&lt;/em&gt;&lt;/span&gt;
      constraint for automatic schema generation.&lt;/p&gt;

      &lt;p&gt;There is no difference between a view and a base table for a
      Hibernate mapping. This is transparent at the database level, although
      some DBMS do not support views properly, especially with updates.
      Sometimes you want to use a view, but you cannot create one in the
      database (i.e. with a legacy schema). In this case, you can map an
      immutable and read-only entity to a given SQL subselect expression using
      &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Subselect&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
@Subselect(&quot;select item.name, max(bid.amount), count(*) &quot;
        + &quot;from item &quot;
        + &quot;join bid on bid.item_id = item.id &quot;
        + &quot;group by item.name&quot;)
@Synchronize( {&quot;item&quot;, &quot;bid&quot;} ) //tables impacted
public class Summary {
    @Id
    public String getId() { return id; }
    ...
}&lt;/pre&gt;

      &lt;p&gt;Declare the tables to synchronize this entity with, ensuring that
      auto-flush happens correctly and that queries against the derived entity
      do not return stale data. The &lt;code class=&quot;literal&quot;&gt;&amp;lt;subselect&amp;gt;&lt;/code&gt; is
      available both as an attribute and a nested mapping element.&lt;/p&gt;

      &lt;p&gt;We will now explore the same options using the hbm.xml structure.
      You can declare a persistent class using the &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;
      element. For example:&lt;/p&gt;

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class
        name=&quot;ClassName&quot;                                   &lt;span class=&quot;co&quot; id=&quot;class1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        table=&quot;tableName&quot;                                  &lt;span class=&quot;co&quot; id=&quot;class2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        discriminator-value=&quot;discriminator_value&quot;          &lt;span class=&quot;co&quot; id=&quot;class3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        mutable=&quot;true|false&quot;                               &lt;span class=&quot;co&quot; id=&quot;class4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        schema=&quot;owner&quot;                                     &lt;span class=&quot;co&quot; id=&quot;class5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        catalog=&quot;catalog&quot;                                  &lt;span class=&quot;co&quot; id=&quot;class6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        proxy=&quot;ProxyInterface&quot;                             &lt;span class=&quot;co&quot; id=&quot;class7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        dynamic-update=&quot;true|false&quot;                        &lt;span class=&quot;co&quot; id=&quot;class8&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
        dynamic-insert=&quot;true|false&quot;                        &lt;span class=&quot;co&quot; id=&quot;class9&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
        select-before-update=&quot;true|false&quot;                  &lt;span class=&quot;co&quot; id=&quot;class10&quot;&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;(10)&quot;/&gt;&lt;/span&gt;
        polymorphism=&quot;implicit|explicit&quot;                   &lt;span class=&quot;co&quot; id=&quot;class11&quot;&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;(11)&quot;/&gt;&lt;/span&gt;
        where=&quot;arbitrary sql where condition&quot;              &lt;span class=&quot;co&quot; id=&quot;class12&quot;&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;(12)&quot;/&gt;&lt;/span&gt;
        persister=&quot;PersisterClass&quot;                         &lt;span class=&quot;co&quot; id=&quot;class13&quot;&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;(13)&quot;/&gt;&lt;/span&gt;
        batch-size=&quot;N&quot;                                     &lt;span class=&quot;co&quot; id=&quot;class14&quot;&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;(14)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;none|version|dirty|all&quot;           &lt;span class=&quot;co&quot; id=&quot;class15&quot;&gt;&lt;img src=&quot;images/callouts/15.png&quot; alt=&quot;(15)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;class16&quot;&gt;(16)&lt;/span&gt;
        entity-name=&quot;EntityName&quot;                           &lt;span class=&quot;co&quot; id=&quot;class17&quot;&gt;(17)&lt;/span&gt;
        check=&quot;arbitrary sql check condition&quot;              &lt;span class=&quot;co&quot; id=&quot;class18&quot;&gt;(18)&lt;/span&gt;
        rowxml:id=&quot;rowid&quot;                                  &lt;span class=&quot;co&quot; id=&quot;class19&quot;&gt;(19)&lt;/span&gt;
        subselect=&quot;SQL expression&quot;                         &lt;span class=&quot;co&quot; id=&quot;class20&quot;&gt;(20)&lt;/span&gt;
        abstract=&quot;true|false&quot;                              &lt;span class=&quot;co&quot; id=&quot;class21&quot;&gt;(21)&lt;/span&gt;
        node=&quot;element-name&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; (optional): the fully qualified Java
            class name of the persistent class or interface. If this attribute
            is missing, it is assumed that the mapping is for a non-POJO
            entity.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; (optional - defaults to the
            unqualified class name): the name of its database table.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;discriminator-value&lt;/code&gt; (optional - defaults
            to the class name): a value that distinguishes individual
            subclasses that is used for polymorphic behavior. Acceptable
            values include &lt;code class=&quot;literal&quot;&gt;null&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;not
            null&lt;/code&gt;.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;mutable&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that instances of the class
            are (not) mutable.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt; (optional): overrides the schema
            name specified by the root
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;catalog&lt;/code&gt; (optional): overrides the catalog
            name specified by the root
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt; (optional): specifies an interface
            to use for lazy initializing proxies. You can specify the name of
            the class itself.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;dynamic-update&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that
            &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; SQL should be generated at runtime and
            can contain only those columns whose values have changed.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;9&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;dynamic-insert&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that
            &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; SQL should be generated at runtime and
            contain only the columns whose values are not null.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;select-before-update&lt;/code&gt; (optional - defaults
            to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that Hibernate should
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;never&lt;/em&gt;&lt;/span&gt; perform an SQL
            &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; unless it is certain that an object is
            actually modified. Only when a transient object has been
            associated with a new session using &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;,
            will Hibernate perform an extra SQL &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; to
            determine if an &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; is actually
            required.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;11&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;polymorphisms&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;implicit&lt;/code&gt;): determines whether implicit or
            explicit query polymorphisms is used.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;12&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; (optional): specifies an arbitrary
            SQL &lt;code class=&quot;literal&quot;&gt;WHERE&lt;/code&gt; condition to be used when retrieving
            objects of this class.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;13&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;persister&lt;/code&gt; (optional): specifies a custom
            &lt;code class=&quot;literal&quot;&gt;ClassPersister&lt;/code&gt;.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;14&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): specifies a &quot;batch size&quot; for fetching
            instances of this class by identifier.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/15.png&quot; alt=&quot;15&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;version&lt;/code&gt;): determines the optimistic locking
            strategy.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(16)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional): lazy fetching can be
            disabled by setting &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt;.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(17)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt; (optional - defaults to the
            class name): Hibernate allows a class to be mapped multiple
            times, potentially to different tables. It also allows entity
            mappings that are represented by Maps or XML at the Java level. In
            these cases, you should provide an explicit arbitrary name for the
            entity. See &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes-dynamicmodels&quot; title=&quot;4.4. Dynamic models&quot;&gt;Section 4.4, âDynamic modelsâ&lt;/a&gt;
            and &lt;a class=&quot;xref&quot; href=&quot;#&quot;&gt;???&lt;/a&gt; for more information.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(18)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;check&lt;/code&gt; (optional): an SQL expression used
            to generate a multi-row &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;check&lt;/em&gt;&lt;/span&gt; constraint for
            automatic schema generation.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(19)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;rowid&lt;/code&gt; (optional): Hibernate can use
            ROWIDs on databases. On Oracle, for example, Hibernate can use the
            &lt;code class=&quot;literal&quot;&gt;rowid&lt;/code&gt; extra column for fast updates once this
            option has been set to &lt;code class=&quot;literal&quot;&gt;rowid&lt;/code&gt;. A ROWID is an
            implementation detail and represents the physical location of a
            stored tuple.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(20)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;subselect&lt;/code&gt; (optional): maps an immutable
            and read-only entity to a database subselect. This is useful if
            you want to have a view instead of a base table. See below for
            more information.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;(21)&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;abstract&lt;/code&gt; (optional): is used to mark
            abstract superclasses in &lt;code class=&quot;literal&quot;&gt;&amp;lt;union-subclass&amp;gt;&lt;/code&gt;
            hierarchies.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

      &lt;p&gt;It is acceptable for the named persistent class to be an
      interface. You can declare implementing classes of that interface using
      the &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt; element. You can persist any
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;static&lt;/em&gt;&lt;/span&gt; inner class. Specify the class name using
      the standard form i.e. &lt;code class=&quot;literal&quot;&gt;e.g.Foo$Bar&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Here is how to do a virtual view (subselect) in XML:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Summary&quot;&amp;gt;
    &amp;lt;subselect&amp;gt;
        select item.name, max(bid.amount), count(*)
        from item
        join bid on bid.item_id = item.id
        group by item.name
    &amp;lt;/subselect&amp;gt;
    &amp;lt;synchronize table=&quot;item&quot;/&amp;gt;
    &amp;lt;synchronize table=&quot;bid&quot;/&amp;gt;
    &amp;lt;id name=&quot;name&quot;/&amp;gt;
    ...
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;subselect&amp;gt;&lt;/code&gt; is available both as an
      attribute and a nested mapping element.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.2. Identifiers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id&quot;/&gt;5.1.2. Identifiers&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Mapped classes &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;must&lt;/em&gt;&lt;/span&gt; declare the primary key
      column of the database table. Most classes will also have a
      JavaBeans-style property holding the unique identifier of an
      instance.&lt;/p&gt;

      &lt;p&gt;Mark the identifier property with
      &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt;.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
public class Person {
   @Id Integer getId() { ... }
   ...
}&lt;/pre&gt;

      &lt;p&gt;In hbm.xml, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;id&amp;gt;&lt;/code&gt; element which
      defines the mapping from that property to the primary key column.&lt;/p&gt;

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;id1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        type=&quot;typename&quot;                                    &lt;span class=&quot;co&quot; id=&quot;id2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;id3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        unsaved-value=&quot;null|any|none|undefined|id_value&quot;   &lt;span class=&quot;co&quot; id=&quot;id4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;&amp;gt;                 &lt;span class=&quot;co&quot; id=&quot;id5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;

        &amp;lt;generator class=&quot;generatorClass&quot;/&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; (optional): the name of the
            identifier property.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (optional): a name that indicates
            the Hibernate type.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional - defaults to the
            property name): the name of the primary key column.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; (optional - defaults to a
            &quot;sensible&quot; value): an identifier property value that indicates an
            instance is newly instantiated (unsaved), distinguishing it from
            detached instances that were saved or loaded in a previous
            session.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate should use
            for accessing the property value.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

      &lt;p&gt;If the &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; attribute is missing, it is assumed
      that the class has no identifier property.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; attribute is almost never
      needed in Hibernate and indeed has no corresponding element in
      annotations.&lt;/p&gt;

      &lt;p&gt;You can also declare the identifier as a composite identifier.
      This allows access to legacy data with composite keys. Its use is
      strongly discouraged for anything else.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.2.1. Composite identifier&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2338&quot;/&gt;5.1.2.1. Composite identifier&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;You can define a composite primary key through several
        syntaxes:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;use a component type to represent the identifier and map it
            as a property in the entity: you then annotated the property as
            &lt;code class=&quot;classname&quot;&gt;@EmbeddedId&lt;/code&gt;. The component type has to be
            &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;map multiple properties as &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt;
            properties: the identifier type is then the entity class itself
            and needs to be &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt;. This approach
            is unfortunately not standard and only supported by
            Hibernate.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;map multiple properties as &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt;
            properties and declare an external class to be the identifier
            type. This class, which needs to be
            &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt;, is declared on the entity via
            the &lt;code class=&quot;classname&quot;&gt;@IdClass&lt;/code&gt; annotation. The identifier
            type must contain the same properties as the identifier properties
            of the entity: each property name must be the same, its type must
            be the same as well if the entity property is of a basic type, its
            type must be the type of the primary key of the associated entity
            if the entity property is an association (either a
            &lt;code class=&quot;classname&quot;&gt;@OneToOne&lt;/code&gt; or a
            &lt;code class=&quot;classname&quot;&gt;@ManyToOne&lt;/code&gt;).&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;As you can see the last case is far from obvious. It has been
        inherited from the dark ages of EJB 2 for backward compatibilities and
        we recommend you not to use it (for simplicity sake).&lt;/p&gt;

        &lt;p&gt;Let&apos;s explore all three cases using examples.&lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.1.1. id as a property using a component type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2359&quot;/&gt;5.1.2.1.1. id as a property using a component type&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Here is a simple example of
          &lt;code class=&quot;classname&quot;&gt;@EmbeddedId&lt;/code&gt;.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_firstname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;You can notice that the &lt;code class=&quot;classname&quot;&gt;UserId&lt;/code&gt; class is
          serializable. To override the column mapping, use
          &lt;code class=&quot;classname&quot;&gt;@AttributeOverride&lt;/code&gt;.&lt;/p&gt;

          &lt;p&gt;An embedded id can itself contains the primary key of an
          associated entity.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;preferredCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MapsId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userId&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userfirstname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userlastname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;userId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;In the embedded id object, the association is represented as
          the identifier of the associated entity. But you can link its value
          to a regular association in the entity via the
          &lt;code class=&quot;classname&quot;&gt;@MapsId&lt;/code&gt; annotation. The
          &lt;code class=&quot;classname&quot;&gt;@MapsId&lt;/code&gt; value correspond to the property name
          of the embedded id object containing the associated entity&apos;s
          identifier. In the database, it means that the
          &lt;code class=&quot;literal&quot;&gt;Customer.user&lt;/code&gt; and the
          &lt;code class=&quot;literal&quot;&gt;CustomerId.userId&lt;/code&gt; properties share the same
          underlying column (&lt;code class=&quot;literal&quot;&gt;user_fk&lt;/code&gt; in this case).&lt;/p&gt;

          &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
            &lt;p&gt;The component type used as identifier must implement
            &lt;code class=&quot;methodname&quot;&gt;equals()&lt;/code&gt; and
            &lt;code class=&quot;methodname&quot;&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;
          &lt;/div&gt;

          &lt;p&gt;In practice, your code only sets the
          &lt;code class=&quot;literal&quot;&gt;Customer.user&lt;/code&gt; property and the user id value is
          copied by Hibernate into the &lt;code class=&quot;literal&quot;&gt;CustomerId.userId&lt;/code&gt;
          property.&lt;/p&gt;

          &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
            &lt;p&gt;The id value can be copied as late as flush time, don&apos;t rely
            on it until after flush time.&lt;/p&gt;
          &lt;/div&gt;

          &lt;p&gt;While not supported in JPA, Hibernate lets you place your
          association directly in the embedded id component (instead of having
          to use the &lt;code class=&quot;classname&quot;&gt;@MapsId&lt;/code&gt; annotation).&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;preferredCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userfirstname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userlastname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;Let&apos;s now rewrite these examples using the hbm.xml
          syntax.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;composite-id
        name=&quot;propertyName&quot;
        class=&quot;ClassName&quot;
        mapped=&quot;true|false&quot;
        access=&quot;field|property|ClassName&quot;
        node=&quot;element-name|.&quot;&amp;gt;

        &amp;lt;key-property name=&quot;propertyName&quot; type=&quot;typename&quot; column=&quot;column_name&quot;/&amp;gt;
        &amp;lt;key-many-to-one name=&quot;propertyName&quot; class=&quot;ClassName&quot; column=&quot;column_name&quot;/&amp;gt;
        ......
&amp;lt;/composite-id&amp;gt;&lt;/pre&gt;

          &lt;p&gt;First a simple example:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;User&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;UserId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot; column=&quot;fld_firstname&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

          &lt;p&gt;Then an example showing how an association can be
          mapped.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;CustomerId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot; column=&quot;userfirstname_fk&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot; column=&quot;userfirstname_fk&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;customerNumber&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;preferredCustomer&quot;/&amp;gt;

   &amp;lt;many-to-one name=&quot;user&quot;&amp;gt;
      &amp;lt;column name=&quot;userfirstname_fk&quot; updatable=&quot;false&quot; insertable=&quot;false&quot;/&amp;gt;
      &amp;lt;column name=&quot;userlastname_fk&quot; updatable=&quot;false&quot; insertable=&quot;false&quot;/&amp;gt;
   &amp;lt;/many-to-one&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;User&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;UserId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;age&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

          &lt;p&gt;Notice a few things in the previous example:&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;the order of the properties (and column) matters. It must
              be the same between the association and the primary key of the
              associated entity&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;the many to one uses the same columns as the primary key
              and thus must be marked as read only
              (&lt;code class=&quot;literal&quot;&gt;insertable&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;updatable&lt;/code&gt;
              to false).&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;unlike with &lt;code class=&quot;classname&quot;&gt;@MapsId&lt;/code&gt;, the id value
              of the associated entity is not transparently copied, check the
              &lt;code class=&quot;literal&quot;&gt;foreign&lt;/code&gt; id generator for more
              information.&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

          &lt;p&gt;The last example shows how to map association directly in the
          embedded id component.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;CustomerId&quot;&amp;gt;
      &amp;lt;key-many-to-one name=&quot;user&quot;&amp;gt;
         &amp;lt;column name=&quot;userfirstname_fk&quot;/&amp;gt;
         &amp;lt;column name=&quot;userlastname_fk&quot;/&amp;gt;
      &amp;lt;/key-many-to-one&amp;gt;
      &amp;lt;key-property name=&quot;customerNumber&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;preferredCustomer&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;User&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;UserId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;age&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

          &lt;p&gt;This is the recommended approach to map composite identifier.
          The following options should not be considered unless some
          constraint are present.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.1.2. Multiple id properties without identifier type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2408&quot;/&gt;5.1.2.1.2. Multiple id properties without identifier type&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Another, arguably more natural, approach is to place
          &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt; on multiple properties of your entity.
          This approach is only supported by Hibernate (not JPA compliant) but
          does not require an extra embeddable component.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userfirstname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userlastname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;preferredCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;In this case &lt;code class=&quot;classname&quot;&gt;Customer&lt;/code&gt; is its own
          identifier representation: it must implement
          &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt; and must implement
          &lt;code class=&quot;methodname&quot;&gt;equals()&lt;/code&gt; and
          &lt;code class=&quot;methodname&quot;&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;

          &lt;p&gt;In hbm.xml, the same mapping is:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot;&amp;gt;
   &amp;lt;composite-id&amp;gt;
      &amp;lt;key-many-to-one name=&quot;user&quot;&amp;gt;
         &amp;lt;column name=&quot;userfirstname_fk&quot;/&amp;gt;
         &amp;lt;column name=&quot;userlastname_fk&quot;/&amp;gt;
      &amp;lt;/key-many-to-one&amp;gt;
      &amp;lt;key-property name=&quot;customerNumber&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;preferredCustomer&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;User&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;UserId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;age&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.1.3. Multiple id properties with with a dedicated identifier type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2420&quot;/&gt;5.1.2.1.3. Multiple id properties with with a dedicated identifier
          type&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@IdClass&lt;/code&gt; on an entity points to the
          class (component) representing the identifier of the class. The
          properties marked &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt; on the entity must have
          their corresponding property on the &lt;code class=&quot;classname&quot;&gt;@IdClass&lt;/code&gt;.
          The return type of search twin property must be either identical for
          basic properties or must correspond to the identifier class of the
          associated entity for an association.&lt;/p&gt;

          &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
            &lt;p&gt;This approach is inherited from the EJB 2 days and we
            recommend against its use. But, after all it&apos;s your application
            and Hibernate supports it.&lt;/p&gt;
          &lt;/div&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;IdClass&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userfirstname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userlastname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;preferredCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;Customer&lt;/code&gt; and
          &lt;code class=&quot;classname&quot;&gt;CustomerId&lt;/code&gt; do have the same properties
          &lt;code class=&quot;literal&quot;&gt;customerNumber&lt;/code&gt; as well as
          &lt;code class=&quot;literal&quot;&gt;user&lt;/code&gt;. &lt;code class=&quot;classname&quot;&gt;CustomerId&lt;/code&gt; must be
          &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt; and implement
          &lt;code class=&quot;classname&quot;&gt;equals()&lt;/code&gt; and
          &lt;code class=&quot;classname&quot;&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;

          &lt;p&gt;While not JPA standard, Hibernate let&apos;s you declare the
          vanilla associated property in the
          &lt;code class=&quot;classname&quot;&gt;@IdClass&lt;/code&gt;.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;IdClass&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userfirstname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;userlastname_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;preferredCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;user&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customerNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EmbeddedId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;age&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;equals&amp;nbsp;and&amp;nbsp;hashCode&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;This feature is of limited interest though as you are likely
          to have chosen the &lt;code class=&quot;classname&quot;&gt;@IdClass&lt;/code&gt; approach to stay
          JPA compliant or you have a quite twisted mind.&lt;/p&gt;

          &lt;p&gt;Here are the equivalent on hbm.xml files:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot;&amp;gt;
   &amp;lt;composite-id class=&quot;CustomerId&quot; mapped=&quot;true&quot;&amp;gt;
      &amp;lt;key-many-to-one name=&quot;user&quot;&amp;gt;
         &amp;lt;column name=&quot;userfirstname_fk&quot;/&amp;gt;
         &amp;lt;column name=&quot;userlastname_fk&quot;/&amp;gt;
      &amp;lt;/key-many-to-one&amp;gt;
      &amp;lt;key-property name=&quot;customerNumber&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;preferredCustomer&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;User&quot;&amp;gt;
   &amp;lt;composite-id name=&quot;id&quot; class=&quot;UserId&quot;&amp;gt;
      &amp;lt;key-property name=&quot;firstName&quot;/&amp;gt;
      &amp;lt;key-property name=&quot;lastName&quot;/&amp;gt;
   &amp;lt;/composite-id&amp;gt;

   &amp;lt;property name=&quot;age&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.2.2. Identifier generator&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-generator&quot;/&gt;5.1.2.2. Identifier generator&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Hibernate can generate and populate identifier values for you
        automatically. This is the recommended approach over &quot;business&quot; or
        &quot;natural&quot; id (especially composite ids).&lt;/p&gt;

        &lt;p&gt;Hibernate offers various generation strategies, let&apos;s explore
        the most common ones first that happens to be standardized by
        JPA:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;IDENTITY: supports identity columns in DB2, MySQL, MS SQL
            Server, Sybase and HypersonicSQL. The returned identifier is of
            type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;SEQUENCE (called &lt;code class=&quot;literal&quot;&gt;seqhilo&lt;/code&gt; in Hibernate):
            uses a hi/lo algorithm to efficiently generate identifiers of type
            &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;, given a named database sequence.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;TABLE (called
            &lt;code class=&quot;classname&quot;&gt;MultipleHiLoPerTableGenerator&lt;/code&gt; in Hibernate)
            : uses a hi/lo algorithm to efficiently generate identifiers of
            type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;, given a table and column as a source of hi
            values. The hi/lo algorithm generates identifiers that are unique
            only for a particular database.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;AUTO: selects &lt;code class=&quot;literal&quot;&gt;IDENTITY&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;SEQUENCE&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;TABLE&lt;/code&gt; depending
            upon the capabilities of the underlying database.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
          &lt;p&gt;We recommend all new projects to use the new enhanced
          identifier generators. They are deactivated by default for entities
          using annotations but can be activated using
          &lt;code class=&quot;code&quot;&gt;hibernate.id.new_generator_mappings=true&lt;/code&gt;. These new
          generators are more efficient and closer to the JPA 2 specification
          semantic.&lt;/p&gt;

          &lt;p&gt;However they are not backward compatible with existing
          Hibernate based application (if a sequence or a table is used for id
          generation). See XXXXXXX &lt;a class=&quot;xref&quot; href=&quot;#&quot;&gt;???&lt;/a&gt; for
          more information on how to activate them.&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;To mark an id property as generated, use the
        &lt;code class=&quot;classname&quot;&gt;@GeneratedValue&lt;/code&gt; annotation. You can specify the
        strategy used (default to &lt;code class=&quot;literal&quot;&gt;AUTO&lt;/code&gt;) by setting
        &lt;code class=&quot;literal&quot;&gt;strategy&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
public class Customer {
   @Id @GeneratedValue
   Integer getId() { ... };
}

@Entity 
public class Invoice {
   @Id @GeneratedValue(strategy=GenerationType.IDENTITY)
   Integer getId() { ... };
}&lt;/pre&gt;

        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;SEQUENCE&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;TABLE&lt;/code&gt; require
        additional configurations that you can set using
        &lt;code class=&quot;classname&quot;&gt;@SequenceGenerator&lt;/code&gt; and
        &lt;code class=&quot;classname&quot;&gt;@TableGenerator&lt;/code&gt;:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: name of the generator&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; / &lt;code class=&quot;literal&quot;&gt;sequenceName&lt;/code&gt;:
            name of the table or the sequence (defaulting respectively to
            &lt;code class=&quot;literal&quot;&gt;hibernate_sequences&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;hibernate_sequence&lt;/code&gt;)&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;catalog&lt;/code&gt; /
            &lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt;:&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;initialValue&lt;/code&gt;: the value from which the id
            is to start generating&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;allocationSize&lt;/code&gt;: the amount to increment
            by when allocating id numbers from the generator&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;In addition, the &lt;code class=&quot;classname&quot;&gt;TABLE&lt;/code&gt; strategy also let
        you customize:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;pkColumnName&lt;/code&gt;: the column name containing
            the entity identifier&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;valueColumnName&lt;/code&gt;: the column name
            containing the identifier value&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;pkColumnValue&lt;/code&gt;: the entity
            identifier&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;uniqueConstraints&lt;/code&gt;: any potential column
            constraint on the table containing the ids&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;To link a table or sequence generator definition with an actual
        generated property, use the same name in both the definition
        &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; and the generator value
        &lt;code class=&quot;literal&quot;&gt;generator&lt;/code&gt; as shown below.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strategy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;SEQUENCE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;generator&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;SEQ_GEN&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;span class=&quot;java_plain&quot;&gt;@javax&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SequenceGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;SEQ_GEN&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sequenceName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;my_sequence&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocationSize&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;20&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;The scope of a generator definition can be the application or
        the class. Class-defined generators are not visible outside the class
        and can override application level generators. Application level
        generators are defined in JPA&apos;s XML deployment descriptors (see XXXXXX
        &lt;a class=&quot;xref&quot; href=&quot;#&quot;&gt;???&lt;/a&gt;):&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;table&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;generator&amp;nbsp;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMP_GEN&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;GENERATOR_TABLE&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pk&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;value&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pk&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMP&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocation&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;and&amp;nbsp;the&amp;nbsp;annotation&amp;nbsp;equivalent&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@javax&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TableGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMP_GEN&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;GENERATOR_TABLE&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pkColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;valueColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pkColumnValue&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMP&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocationSize&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;20&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;generator&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;SEQ_GEN&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sequence&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;my_sequence&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocation&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;20&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;and&amp;nbsp;the&amp;nbsp;annotation&amp;nbsp;equivalent&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@javax&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SequenceGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;SEQ_GEN&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sequenceName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;my_sequence&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocationSize&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;20&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;If a JPA XML descriptor (like
        &lt;code class=&quot;filename&quot;&gt;META-INF/orm.xml&lt;/code&gt;) is used to define the
        generators, &lt;code class=&quot;literal&quot;&gt;EMP_GEN&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;SEQ_GEN&lt;/code&gt;
        are application level generators.&lt;/p&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;Package level definition is not supported by the JPA
          specification. However, you can use the
          &lt;code class=&quot;literal&quot;&gt;@GenericGenerator&lt;/code&gt; at the package level (see &lt;a class=&quot;xref&quot; href=&quot;#&quot;&gt;???&lt;/a&gt;).&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;These are the four standard JPA generators. Hibernate goes
        beyond that and provide additional generators or additional options as
        we will see below. You can also write your own custom identifier
        generator by implementing
        &lt;code class=&quot;classname&quot;&gt;org.hibernate.id.IdentifierGenerator&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;To define a custom generator, use the
        &lt;code class=&quot;classname&quot;&gt;@GenericGenerator&lt;/code&gt; annotation (and its plural
        counter part &lt;code class=&quot;classname&quot;&gt;@GenericGenerators&lt;/code&gt;) that describes
        the class of the identifier generator or its short cut name (as
        described below) and a list of key/value parameters. When using
        &lt;code class=&quot;classname&quot;&gt;@GenericGenerator&lt;/code&gt; and assigning it via
        &lt;code class=&quot;classname&quot;&gt;@GeneratedValue.generator&lt;/code&gt;, the
        &lt;code class=&quot;classname&quot;&gt;@GeneratedValue.strategy&lt;/code&gt; is ignored: leave it
        blank.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;generator&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;system-uuid&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GenericGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;system-uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;strategy&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;trigger-generated&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GenericGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;trigger-generated&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;strategy&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parameters&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;socialSecurityNumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;The hbm.xml approach uses the optional
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;generator&amp;gt;&lt;/code&gt; child element inside
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;id&amp;gt;&lt;/code&gt;. If any parameters are required to
        configure or initialize the generator instance, they are passed using
        the &lt;code class=&quot;literal&quot;&gt;&amp;lt;param&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;cat_id&quot;&amp;gt;
        &amp;lt;generator class=&quot;org.hibernate.id.TableHiLoGenerator&quot;&amp;gt;
                &amp;lt;param name=&quot;table&quot;&amp;gt;uid_table&amp;lt;/param&amp;gt;
                &amp;lt;param name=&quot;column&quot;&amp;gt;next_hi_value_column&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.1. Various additional generators&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2551&quot;/&gt;5.1.2.2.1. Various additional generators&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;All generators implement the interface
          &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.IdentifierGenerator&lt;/code&gt;. This is a
          very simple interface. Some applications can choose to provide their
          own specialized implementations, however, Hibernate provides a range
          of built-in implementations. The shortcut names for the built-in
          generators are as follows: &lt;/p&gt;&lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;increment&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;generates identifiers of type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;,
                  &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt; that are
                  unique only when no other process is inserting data into the
                  same table. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Do not use in a
                  cluster.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;supports identity columns in DB2, MySQL, MS SQL
                  Server, Sybase and HypersonicSQL. The returned identifier is
                  of type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or
                  &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;uses a sequence in DB2, PostgreSQL, Oracle, SAP DB,
                  McKoi or a generator in Interbase. The returned identifier
                  is of type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt;
                  or &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;&lt;a id=&quot;mapping-declaration-id-hilodescription&quot;/&gt;uses a hi/lo algorithm to efficiently generate
                  identifiers of type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;,
                  &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;, given a
                  table and column (by default
                  &lt;code class=&quot;literal&quot;&gt;hibernate_unique_key&lt;/code&gt; and
                  &lt;code class=&quot;literal&quot;&gt;next_hi&lt;/code&gt; respectively) as a source of hi
                  values. The hi/lo algorithm generates identifiers that are
                  unique only for a particular database.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;seqhilo&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;uses a hi/lo algorithm to efficiently generate
                  identifiers of type &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt;,
                  &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt;, given a
                  named database sequence.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;uuid&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;Generates a 128-bit UUID based on a custom algorithm.
                  The value generated is represented as a string of 32
                  hexidecimal digits. Users can also configure it to use a
                  separator (config parameter &quot;separator&quot;) which separates the
                  hexidecimal digits into 8{sep}8{sep}4{sep}8{sep}4. Note
                  specifically that this is different than the IETF RFC 4122
                  representation of 8-4-4-4-12. If you need RFC 4122 compliant
                  UUIDs, consider using &quot;uuid2&quot; generator discussed
                  below.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;uuid2&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;Generates a IETF RFC 4122 compliant (variant 2)
                  128-bit UUID. The exact &quot;version&quot; (the RFC term) generated
                  depends on the pluggable &quot;generation strategy&quot; used (see
                  below). Capable of generating values as
                  &lt;code class=&quot;classname&quot;&gt;java.util.UUID&lt;/code&gt;,
                  &lt;code class=&quot;classname&quot;&gt;java.lang.String&lt;/code&gt; or as a byte array
                  of length 16 (&lt;code class=&quot;literal&quot;&gt;byte[16]&lt;/code&gt;). The &quot;generation
                  strategy&quot; is defined by the interface
                  &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.id.UUIDGenerationStrategy&lt;/code&gt;.
                  The generator defines 2 configuration parameters for
                  defining which generation strategy to use: &lt;/p&gt;&lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;uuid_gen_strategy_class&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                          &lt;p&gt;Names the UUIDGenerationStrategy class to
                          use&lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;uuid_gen_strategy&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                          &lt;p&gt;Names the UUIDGenerationStrategy instance to
                          use&lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

                  &lt;p&gt;Out of the box, comes with the following strategies:
                  &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.id.uuid.StandardRandomStrategy&lt;/code&gt;
                        (the default) - generates &quot;version 3&quot; (aka, &quot;random&quot;)
                        UUID values via the
                        &lt;code class=&quot;methodname&quot;&gt;randomUUID&lt;/code&gt; method of
                        &lt;code class=&quot;classname&quot;&gt;java.util.UUID&lt;/code&gt;&lt;/p&gt;
                      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.id.uuid.CustomVersionOneStrategy&lt;/code&gt;
                        - generates &quot;version 1&quot; UUID values, using IP address
                        since mac address not available. If you need mac
                        address to be used, consider leveraging one of the
                        existing third party UUID generators which sniff out
                        mac address and integrating it via the
                        &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.id.UUIDGenerationStrategy&lt;/code&gt;
                        contract. Two such libraries known at time of this
                        writing include &lt;a class=&quot;ulink&quot; href=&quot;http://johannburkard.de/software/uuid/&quot;&gt;http://johannburkard.de/software/uuid/&lt;/a&gt;
                        and &lt;a class=&quot;ulink&quot; href=&quot;http://commons.apache.org/sandbox/id/uuid.html&quot;&gt;http://commons.apache.org/sandbox/id/uuid.html&lt;/a&gt;
                        &lt;/p&gt;
                      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;guid&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;uses a database-generated GUID string on MS SQL Server
                  and MySQL.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;selects &lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt;,
                  &lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt;
                  depending upon the capabilities of the underlying
                  database.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;assigned&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;lets the application assign an identifier to the
                  object before &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; is called. This is
                  the default strategy if no
                  &lt;code class=&quot;literal&quot;&gt;&amp;lt;generator&amp;gt;&lt;/code&gt; element is
                  specified.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;retrieves a primary key, assigned by a database
                  trigger, by selecting the row by some unique key and
                  retrieving the primary key value.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;foreign&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;uses the identifier of another associated object. It
                  is usually used in conjunction with a
                  &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt; primary key
                  association.&lt;/p&gt;
                &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;sequence-identity&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                  &lt;p&gt;a specialized sequence generation strategy that
                  utilizes a database sequence for the actual value
                  generation, but combines this with JDBC3 getGeneratedKeys to
                  return the generated identifier value as part of the insert
                  statement execution. This strategy is only supported on
                  Oracle 10g drivers targeted for JDK 1.4. Comments on these
                  insert statements are disabled due to a bug in the Oracle
                  drivers.&lt;/p&gt;
                &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.2. Hi/lo algorithm&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-hilo&quot;/&gt;5.1.2.2.2. Hi/lo algorithm&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;seqhilo&lt;/code&gt;
          generators provide two alternate implementations of the hi/lo
          algorithm. The first implementation requires a &quot;special&quot; database
          table to hold the next available &quot;hi&quot; value. Where supported, the
          second uses an Oracle-style sequence.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;cat_id&quot;&amp;gt;
        &amp;lt;generator class=&quot;hilo&quot;&amp;gt;
                &amp;lt;param name=&quot;table&quot;&amp;gt;hi_value&amp;lt;/param&amp;gt;
                &amp;lt;param name=&quot;column&quot;&amp;gt;next_value&amp;lt;/param&amp;gt;
                &amp;lt;param name=&quot;max_lo&quot;&amp;gt;100&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;cat_id&quot;&amp;gt;
        &amp;lt;generator class=&quot;seqhilo&quot;&amp;gt;
                &amp;lt;param name=&quot;sequence&quot;&amp;gt;hi_value&amp;lt;/param&amp;gt;
                &amp;lt;param name=&quot;max_lo&quot;&amp;gt;100&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

          &lt;p&gt;Unfortunately, you cannot use &lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt; when
          supplying your own &lt;code class=&quot;literal&quot;&gt;Connection&lt;/code&gt; to Hibernate. When
          Hibernate uses an application server datasource to obtain
          connections enlisted with JTA, you must configure the
          &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt;.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.3. UUID algorithm&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-uuid&quot;/&gt;5.1.2.2.3. UUID algorithm&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;The UUID contains: IP address, startup time of the JVM that is
          accurate to a quarter second, system time and a counter value that
          is unique within the JVM. It is not possible to obtain a MAC address
          or memory address from Java code, so this is the best option without
          using JNI.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.4. Identity columns and sequences&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-sequences&quot;/&gt;5.1.2.2.4. Identity columns and sequences&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;For databases that support identity columns (DB2, MySQL,
          Sybase, MS SQL), you can use &lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt; key
          generation. For databases that support sequences (DB2, Oracle,
          PostgreSQL, Interbase, McKoi, SAP DB) you can use
          &lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt; style key generation. Both of these
          strategies require two SQL queries to insert a new object. For
          example:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;person_id&quot;&amp;gt;
        &amp;lt;generator class=&quot;sequence&quot;&amp;gt;
                &amp;lt;param name=&quot;sequence&quot;&amp;gt;person_id_sequence&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;person_id&quot; unsaved-value=&quot;0&quot;&amp;gt;
        &amp;lt;generator class=&quot;identity&quot;/&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

          &lt;p&gt;For cross-platform development, the &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;
          strategy will, depending on the capabilities of the underlying
          database, choose from the &lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt;,
          &lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt;
          strategies.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.5. Assigned identifiers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-assigned&quot;/&gt;5.1.2.2.5. Assigned identifiers&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;If you want the application to assign identifiers, as opposed
          to having Hibernate generate them, you can use the
          &lt;code class=&quot;literal&quot;&gt;assigned&lt;/code&gt; generator. This special generator uses
          the identifier value already assigned to the object&apos;s identifier
          property. The generator is used when the primary key is a natural
          key instead of a surrogate key. This is the default behavior if you
          do not specify &lt;code class=&quot;classname&quot;&gt;@GeneratedValue&lt;/code&gt; nor
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;generator&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

          &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;assigned&lt;/code&gt; generator makes Hibernate use
          &lt;code class=&quot;literal&quot;&gt;unsaved-value=&quot;undefined&quot;&lt;/code&gt;. This forces Hibernate
          to go to the database to determine if an instance is transient or
          detached, unless there is a version or timestamp property, or you
          define &lt;code class=&quot;literal&quot;&gt;Interceptor.isUnsaved()&lt;/code&gt;.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.6. Primary keys assigned by triggers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-select&quot;/&gt;5.1.2.2.6. Primary keys assigned by triggers&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Hibernate does not generate DDL with triggers. It is for
          legacy schemas only.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;person_id&quot;&amp;gt;
        &amp;lt;generator class=&quot;select&quot;&amp;gt;
                &amp;lt;param name=&quot;key&quot;&amp;gt;socialSecurityNumber&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
&amp;lt;/id&amp;gt;&lt;/pre&gt;

          &lt;p&gt;In the above example, there is a unique valued property named
          &lt;code class=&quot;literal&quot;&gt;socialSecurityNumber&lt;/code&gt;. It is defined by the class,
          as a natural key and a surrogate key named
          &lt;code class=&quot;literal&quot;&gt;person_id&lt;/code&gt;, whose value is generated by a
          trigger.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.2.7. Identity copy (foreign generator)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2716&quot;/&gt;5.1.2.2.7. Identity copy (foreign generator)&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Finally, you can ask Hibernate to copy the identifier from
          another associated entity. In the Hibernate jargon, it is known as a
          foreign generator but the JPA mapping reads better and is
          encouraged.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MedicalHistory&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;person_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;patient&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;Or alternatively&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MedicalHistory&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MapsId&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;patient_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;patient&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;In hbm.xml use the following approach:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;MedicalHistory&quot;&amp;gt;
   &amp;lt;id name=&quot;id&quot;&amp;gt;
      &amp;lt;generator class=&quot;foreign&quot;&amp;gt;
         &amp;lt;param name=&quot;property&quot;&amp;gt;patient&amp;lt;/param&amp;gt;
      &amp;lt;/generator&amp;gt;
   &amp;lt;/id&amp;gt;
   &amp;lt;one-to-one name=&quot;patient&quot; class=&quot;Person&quot; constrained=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.2.3. Enhanced identifier generators&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-enhanced&quot;/&gt;5.1.2.3. Enhanced identifier generators&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Starting with release 3.2.3, there are 2 new generators which
        represent a re-thinking of 2 different aspects of identifier
        generation. The first aspect is database portability; the second is
        optimization Optimization means that you do not have to query the
        database for every request for a new identifier value. These two new
        generators are intended to take the place of some of the named
        generators described above, starting in 3.3.x. However, they are
        included in the current releases and can be referenced by FQN.&lt;/p&gt;

        &lt;p&gt;The first of these new generators is
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.enhanced.SequenceStyleGenerator&lt;/code&gt;
        which is intended, firstly, as a replacement for the
        &lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt; generator and, secondly, as a better
        portability generator than &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;. This is because
        &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt; generally chooses between
        &lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;sequence&lt;/code&gt; which have
        largely different semantics that can cause subtle issues in
        applications eyeing portability.
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.enhanced.SequenceStyleGenerator&lt;/code&gt;,
        however, achieves portability in a different manner. It chooses
        between a table or a sequence in the database to store its
        incrementing values, depending on the capabilities of the dialect
        being used. The difference between this and &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;
        is that table-based and sequence-based storage have the same exact
        semantic. In fact, sequences are exactly what Hibernate tries to
        emulate with its table-based generators. This generator has a number
        of configuration parameters: &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;sequence_name&lt;/code&gt; (optional, defaults to
              &lt;code class=&quot;literal&quot;&gt;hibernate_sequence&lt;/code&gt;): the name of the sequence
              or table to be used.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;initial_value&lt;/code&gt; (optional, defaults to
              &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): the initial value to be retrieved from
              the sequence/table. In sequence creation terms, this is
              analogous to the clause typically named &quot;STARTS WITH&quot;.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;increment_size&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): the value by which subsequent calls to
              the sequence/table should differ. In sequence creation terms,
              this is analogous to the clause typically named &quot;INCREMENT
              BY&quot;.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;force_table_use&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): should we force the use of a table as
              the backing structure even though the dialect might support
              sequence?&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;value_column&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;next_val&lt;/code&gt;): only relevant for table
              structures, it is the name of the column on the table which is
              used to hold the value.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;prefer_sequence_per_entity&lt;/code&gt; (optional -
              defaults to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): should we create
              separate sequence for each entity that share current generator
              based on its name?&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;sequence_per_entity_suffix&lt;/code&gt; (optional -
              defaults to &lt;code class=&quot;literal&quot;&gt;_SEQ&lt;/code&gt;): suffix added to the name
              of a dedicated sequence.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimizer&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;): See &lt;a class=&quot;xref&quot; href=&quot;#mapping-declaration-id-enhanced-optimizers&quot; title=&quot;5.1.2.3.1. Identifier generator optimization&quot;&gt;Section 5.1.2.3.1, âIdentifier generator optimizationâ&lt;/a&gt;&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;The second of these new generators is
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.enhanced.TableGenerator&lt;/code&gt;, which is
        intended, firstly, as a replacement for the &lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt;
        generator, even though it actually functions much more like
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.MultipleHiLoPerTableGenerator&lt;/code&gt;, and
        secondly, as a re-implementation of
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.MultipleHiLoPerTableGenerator&lt;/code&gt; that
        utilizes the notion of pluggable optimizers. Essentially this
        generator defines a table capable of holding a number of different
        increment values simultaneously by using multiple distinctly keyed
        rows. This generator has a number of configuration parameters:
        &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table_name&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;hibernate_sequences&lt;/code&gt;): the name of the table
              to be used.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;value_column_name&lt;/code&gt; (optional - defaults
              to &lt;code class=&quot;literal&quot;&gt;next_val&lt;/code&gt;): the name of the column on the
              table that is used to hold the value.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;segment_column_name&lt;/code&gt; (optional -
              defaults to &lt;code class=&quot;literal&quot;&gt;sequence_name&lt;/code&gt;): the name of the
              column on the table that is used to hold the &quot;segment key&quot;. This
              is the value which identifies which increment value to
              use.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;segment_value&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;default&lt;/code&gt;): The &quot;segment key&quot; value for the
              segment from which we want to pull increment values for this
              generator.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;segment_value_length&lt;/code&gt; (optional -
              defaults to &lt;code class=&quot;literal&quot;&gt;255&lt;/code&gt;): Used for schema generation;
              the column size to create this segment key column.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;initial_value&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): The initial value to be retrieved from
              the table.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;increment_size&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): The value by which subsequent calls to
              the table should differ.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimizer&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;??&lt;/code&gt;): See &lt;a class=&quot;xref&quot; href=&quot;#mapping-declaration-id-enhanced-optimizers&quot; title=&quot;5.1.2.3.1. Identifier generator optimization&quot;&gt;Section 5.1.2.3.1, âIdentifier generator optimizationâ&lt;/a&gt;.&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.2.3.1. Identifier generator optimization&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-id-enhanced-optimizers&quot;/&gt;5.1.2.3.1. Identifier generator optimization&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;For identifier generators that store values in the database,
          it is inefficient for them to hit the database on each and every
          call to generate a new identifier value. Instead, you can group a
          bunch of them in memory and only hit the database when you have
          exhausted your in-memory value group. This is the role of the
          pluggable optimizers. Currently only the two enhanced generators
          (&lt;a class=&quot;xref&quot; href=&quot;#mapping-declaration-id-enhanced&quot; title=&quot;5.1.2.3. Enhanced identifier generators&quot;&gt;Section 5.1.2.3, âEnhanced identifier generatorsâ&lt;/a&gt; support this
          operation.&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt; (generally this is the default if
              no optimizer was specified): this will not perform any
              optimizations and hit the database for each and every
              request.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt;: applies a hi/lo algorithm around
              the database retrieved values. The values from the database for
              this optimizer are expected to be sequential. The values
              retrieved from the database structure for this optimizer
              indicates the &quot;group number&quot;. The
              &lt;code class=&quot;literal&quot;&gt;increment_size&lt;/code&gt; is multiplied by that value in
              memory to define a group &quot;hi value&quot;.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;pooled&lt;/code&gt;: as with the case of
              &lt;code class=&quot;literal&quot;&gt;hilo&lt;/code&gt;, this optimizer attempts to minimize the
              number of hits to the database. Here, however, we simply store
              the starting value for the &quot;next group&quot; into the database
              structure rather than a sequential value in combination with an
              in-memory grouping algorithm. Here,
              &lt;code class=&quot;literal&quot;&gt;increment_size&lt;/code&gt; refers to the values coming
              from the database.&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.2.4. Partial identifier generation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2826&quot;/&gt;5.1.2.4. Partial identifier generation&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Hibernate supports the automatic generation of some of the
        identifier properties. Simply use the
        &lt;code class=&quot;classname&quot;&gt;@GeneratedValue&lt;/code&gt; annotation on one or several id
        properties.&lt;/p&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
          &lt;p&gt;The Hibernate team has always felt such a construct as
          fundamentally wrong. Try hard to fix your data model before using
          this feature.&lt;/p&gt;
        &lt;/div&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CustomerInventory&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TableGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;inventory&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;table&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;U_SEQUENCES&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pkColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;S_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;valueColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;S_NEXTNUM&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pkColumnValue&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;inventory&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;allocationSize&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;strategy&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GenerationType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;TABLE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;generator&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;inventory&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;You can also generate properties inside an
        &lt;code class=&quot;classname&quot;&gt;@EmbeddedId&lt;/code&gt; class.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.3. Optimistic locking properties (optional)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2835&quot;/&gt;5.1.3. Optimistic locking properties (optional)&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;When using long transactions or conversations that span several
      database transactions, it is useful to store versioning data to ensure
      that if the same entity is updated by two conversations, the last to
      commit changes will be informed and not override the other
      conversation&apos;s work. It guarantees some isolation while still allowing
      for good scalability and works particularly well in read-often
      write-sometimes situations.&lt;/p&gt;

      &lt;p&gt;You can use two approaches: a dedicated version number or a
      timestamp.&lt;/p&gt;

      &lt;p&gt;A version or timestamp property should never be null for a
      detached instance. Hibernate will detect any instance with a null
      version or timestamp as transient, irrespective of what other
      &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; strategies are specified.
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Declaring a nullable version or timestamp property is an easy
      way to avoid problems with transitive reattachment in Hibernate. It is
      especially useful for people using assigned identifiers or composite
      keys&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.3.1. Version number&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;entity-mapping-entity-version&quot;/&gt;5.1.3.1. Version number&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;You can add optimistic locking capability to an entity using the
        &lt;code class=&quot;literal&quot;&gt;@Version&lt;/code&gt; annotation:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Version&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;OPTLOCK&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getVersion&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;The version property will be mapped to the
        &lt;code class=&quot;literal&quot;&gt;OPTLOCK&lt;/code&gt; column, and the entity manager will use it
        to detect conflicting updates (preventing lost updates you might
        otherwise see with the last-commit-wins strategy).&lt;/p&gt;

        &lt;p&gt;The version column may be a numeric. Hibernate supports any kind
        of type provided that you define and implement the appropriate
        &lt;code class=&quot;classname&quot;&gt;UserVersionType&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;The application must not alter the version number set up by
        Hibernate in any way. To artificially increase the version number,
        check in Hibernate Entity Manager&apos;s reference documentation
        &lt;code class=&quot;literal&quot;&gt;LockModeType.OPTIMISTIC_FORCE_INCREMENT&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;LockModeType.PESSIMISTIC_FORCE_INCREMENT&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;If the version number is generated by the database (via a
        trigger for example), make sure to use
        &lt;code class=&quot;code&quot;&gt;@org.hibernate.annotations.Generated(GenerationTime.ALWAYS).&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;To declare a version property in hbm.xml, use:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;version
        column=&quot;version_column&quot;                            &lt;span class=&quot;co&quot; id=&quot;version1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;version2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        type=&quot;typename&quot;                                    &lt;span class=&quot;co&quot; id=&quot;version3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;version4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        unsaved-value=&quot;null|negative|undefined&quot;            &lt;span class=&quot;co&quot; id=&quot;version5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        generated=&quot;never|always&quot;                           &lt;span class=&quot;co&quot; id=&quot;version6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;version7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional - defaults to the
              property name): the name of the column holding the version
              number.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of a property of the
              persistent class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;integer&lt;/code&gt;): the type of the version
              number.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses to
              access the property value.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;undefined&lt;/code&gt;): a version property value that
              indicates that an instance is newly instantiated (unsaved),
              distinguishing it from detached instances that were saved or
              loaded in a previous session. &lt;code class=&quot;literal&quot;&gt;Undefined&lt;/code&gt;
              specifies that the identifier property value should be
              used.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;generated&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;never&lt;/code&gt;): specifies that this version property
              value is generated by the database. See the discussion of &lt;a class=&quot;link&quot; href=&quot;#mapping-generated&quot; title=&quot;5.5. Generated properties&quot;&gt;generated properties&lt;/a&gt; for more
              information.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies whether the version column
              should be included in SQL insert statements. It can be set to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; if the database column is defined with
              a default value of &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt;.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.3.2. Timestamp&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-timestamp&quot;/&gt;5.1.3.2. Timestamp&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Alternatively, you can use a timestamp. Timestamps are a less
        safe implementation of optimistic locking. However, sometimes an
        application might use the timestamps in other ways as well.&lt;/p&gt;

        &lt;p&gt;Simply mark a property of type &lt;code class=&quot;classname&quot;&gt;Date&lt;/code&gt; or
        &lt;code class=&quot;classname&quot;&gt;Calendar&lt;/code&gt; as
        &lt;code class=&quot;classname&quot;&gt;@Version&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Version&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastUpdate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;When using timestamp versioning you can tell Hibernate where to
        retrieve the timestamp value from - database or JVM - by optionally
        adding the &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Source&lt;/code&gt;
        annotation to the property. Possible values for the value attribute of
        the annotation are
        &lt;code class=&quot;classname&quot;&gt;org.hibernate.annotations.SourceType.VM&lt;/code&gt; and
        &lt;code class=&quot;classname&quot;&gt;org.hibernate.annotations.SourceType.DB&lt;/code&gt;. The
        default is &lt;code class=&quot;classname&quot;&gt;SourceType.DB&lt;/code&gt; which is also used in
        case there is no &lt;code class=&quot;classname&quot;&gt;@Source&lt;/code&gt; annotation at
        all.&lt;/p&gt;

        &lt;p&gt;Like in the case of version numbers, the timestamp can also be
        generated by the database instead of Hibernate. To do that, use
        &lt;code class=&quot;code&quot;&gt;@org.hibernate.annotations.Generated(GenerationTime.ALWAYS).&lt;/code&gt;&lt;/p&gt;

        &lt;p&gt;In hbm.xml, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;timestamp&amp;gt;&lt;/code&gt;
        element:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;timestamp
        column=&quot;timestamp_column&quot;                          &lt;span class=&quot;co&quot; id=&quot;timestamp1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;timestamp2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;timestamp3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        unsaved-value=&quot;null|undefined&quot;                     &lt;span class=&quot;co&quot; id=&quot;timestamp4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        source=&quot;vm|db&quot;                                     &lt;span class=&quot;co&quot; id=&quot;timestamp5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        generated=&quot;never|always&quot;                           &lt;span class=&quot;co&quot; id=&quot;timestamp6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional - defaults to the
              property name): the name of a column holding the
              timestamp.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of a JavaBeans style
              property of Java type &lt;code class=&quot;literal&quot;&gt;Date&lt;/code&gt; or
              &lt;code class=&quot;literal&quot;&gt;Timestamp&lt;/code&gt; of the persistent class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
              accessing the property value.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;null&lt;/code&gt;): a version property value that
              indicates that an instance is newly instantiated (unsaved),
              distinguishing it from detached instances that were saved or
              loaded in a previous session. &lt;code class=&quot;literal&quot;&gt;Undefined&lt;/code&gt;
              specifies that the identifier property value should be
              used.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;source&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;vm&lt;/code&gt;): Where should Hibernate retrieve the
              timestamp value from? From the database, or from the current
              JVM? Database-based timestamps incur an overhead because
              Hibernate must hit the database in order to determine the &quot;next
              value&quot;. It is safer to use in clustered environments. Not all
              &lt;code class=&quot;literal&quot;&gt;Dialects&lt;/code&gt; are known to support the retrieval
              of the database&apos;s current timestamp. Others may also be unsafe
              for usage in locking due to lack of precision (Oracle 8, for
              example).&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;generated&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;never&lt;/code&gt;): specifies that this timestamp
              property value is actually generated by the database. See the
              discussion of &lt;a class=&quot;link&quot; href=&quot;#mapping-generated&quot; title=&quot;5.5. Generated properties&quot;&gt;generated
              properties&lt;/a&gt; for more information.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          

          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;Timestamp&amp;gt;&lt;/code&gt; is equivalent to
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;version type=&quot;timestamp&quot;&amp;gt;&lt;/code&gt;. And
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;timestamp source=&quot;db&quot;&amp;gt;&lt;/code&gt; is equivalent to
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;version type=&quot;dbtimestamp&quot;&amp;gt;&lt;/code&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.4. Property&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-property&quot;/&gt;5.1.4. Property&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;You need to decide which property needs to be made persistent in a
      given entity. This differs slightly between the annotation driven
      metadata and the hbm.xml files.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.4.1. Property mapping with annotations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e2963&quot;/&gt;5.1.4.1. Property mapping with annotations&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;In the annotations world, every non static non transient
        property (field or method depending on the access type) of an entity
        is considered persistent, unless you annotate it as
        &lt;code class=&quot;literal&quot;&gt;@Transient&lt;/code&gt;. Not having an annotation for your
        property is equivalent to the appropriate &lt;code class=&quot;literal&quot;&gt;@Basic&lt;/code&gt;
        annotation.&lt;/p&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;@Basic&lt;/code&gt; annotation allows you to declare
        the fetching strategy for a property. If set to
        &lt;code class=&quot;literal&quot;&gt;LAZY&lt;/code&gt;, specifies that this property should be
        fetched lazily when the instance variable is first accessed. It
        requires build-time bytecode instrumentation, if your classes are not
        instrumented, property level lazy loading is silently ignored. The
        default is &lt;code class=&quot;literal&quot;&gt;EAGER&lt;/code&gt;. You can also mark a property as
        not optional thanks to the &lt;code class=&quot;classname&quot;&gt;@Basic.optional&lt;/code&gt;
        attribute. This will ensure that the underlying column are not
        nullable (if possible). Note that a better approach is to use the
        &lt;code class=&quot;classname&quot;&gt;@NotNull&lt;/code&gt; annotation of the Bean Validation
        specification.&lt;/p&gt;

        &lt;p&gt;Let&apos;s look at a few examples:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;transient&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;int&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;counter&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;transient&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;persistent&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Transient&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLengthInMeter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;transient&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;persistent&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Basic&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLength&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;persistent&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Basic&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;fetch&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getDetailedComment&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;persistent&amp;nbsp;property&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Temporal&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TemporalType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;TIME&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getDepartureTime&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;persistent&amp;nbsp;property&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Enumerated&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EnumType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;Starred&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNote&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;enum&amp;nbsp;persisted&amp;nbsp;as&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;in&amp;nbsp;database&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;counter&lt;/code&gt;, a transient field, and
        &lt;code class=&quot;literal&quot;&gt;lengthInMeter&lt;/code&gt;, a method annotated as
        &lt;code class=&quot;literal&quot;&gt;@Transient&lt;/code&gt;, and will be ignored by the Hibernate.
        &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;length&lt;/code&gt;, and
        &lt;code class=&quot;literal&quot;&gt;firstname&lt;/code&gt; properties are mapped persistent and
        eagerly fetched (the default for simple properties). The
        &lt;code class=&quot;literal&quot;&gt;detailedComment&lt;/code&gt; property value will be lazily
        fetched from the database once a lazy property of the entity is
        accessed for the first time. Usually you don&apos;t need to lazy simple
        properties (not to be confused with lazy association fetching). The
        recommended alternative is to use the projection capability of JP-QL
        (Java Persistence Query Language) or Criteria queries.&lt;/p&gt;

        &lt;p&gt;JPA support property mapping of all basic types supported by
        Hibernate (all basic Java types , their respective wrappers and
        serializable classes). Hibernate Annotations supports out of the box
        enum type mapping either into a ordinal column (saving the enum
        ordinal) or a string based column (saving the enum string
        representation): the persistence representation, defaulted to ordinal,
        can be overridden through the &lt;code class=&quot;literal&quot;&gt;@Enumerated&lt;/code&gt;
        annotation as shown in the &lt;code class=&quot;literal&quot;&gt;note&lt;/code&gt; property
        example.&lt;/p&gt;

        &lt;p&gt;In plain Java APIs, the temporal precision of time is not
        defined. When dealing with temporal data you might want to describe
        the expected precision in database. Temporal data can have
        &lt;code class=&quot;literal&quot;&gt;DATE&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;TIME&lt;/code&gt;, or
        &lt;code class=&quot;literal&quot;&gt;TIMESTAMP&lt;/code&gt; precision (ie the actual date, only the
        time, or both). Use the &lt;code class=&quot;literal&quot;&gt;@Temporal&lt;/code&gt; annotation to
        fine tune that.&lt;/p&gt;

        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;@Lob&lt;/code&gt; indicates that the property should be
        persisted in a Blob or a Clob depending on the property type:
        &lt;code class=&quot;classname&quot;&gt;java.sql.Clob&lt;/code&gt;,
        &lt;code class=&quot;classname&quot;&gt;Character[]&lt;/code&gt;, &lt;code class=&quot;classname&quot;&gt;char[]&lt;/code&gt; and
        java.lang.&lt;code class=&quot;classname&quot;&gt;String&lt;/code&gt; will be persisted in a Clob.
        &lt;code class=&quot;classname&quot;&gt;java.sql.Blob&lt;/code&gt;, &lt;code class=&quot;classname&quot;&gt;Byte[]&lt;/code&gt;,
        &lt;code class=&quot;classname&quot;&gt;byte[] &lt;/code&gt;and &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt;
        type will be persisted in a Blob.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Lob&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getFullText&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fullText&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Lob&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getFullCode&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fullCode&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;If the property type implements
        &lt;code class=&quot;classname&quot;&gt;java.io.Serializable&lt;/code&gt; and is not a basic type,
        and if the property is not annotated with &lt;code class=&quot;literal&quot;&gt;@Lob&lt;/code&gt;,
        then the Hibernate &lt;code class=&quot;literal&quot;&gt;serializable&lt;/code&gt; type is
        used.&lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.1. Type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3007&quot;/&gt;5.1.4.1.1. Type&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;You can also manually specify a type using the
          &lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.Type&lt;/code&gt; and some
          parameters if needed. &lt;code class=&quot;classname&quot;&gt;@Type.type&lt;/code&gt; could
          be:&lt;/p&gt;

          &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;The name of a Hibernate basic type: &lt;code class=&quot;literal&quot;&gt;integer,
              string, character, date, timestamp, float, binary, serializable,
              object, blob&lt;/code&gt; etc.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;The name of a Java class with a default basic type:
              &lt;code class=&quot;literal&quot;&gt;int, float, char, java.lang.String, java.util.Date,
              java.lang.Integer, java.sql.Clob&lt;/code&gt; etc.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;The name of a serializable Java class.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;The class name of a custom type:
              &lt;code class=&quot;literal&quot;&gt;com.illflow.type.MyCustomType&lt;/code&gt; etc.&lt;/p&gt;
            &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

          &lt;p&gt;If you do not specify a type, Hibernate will use reflection
          upon the named property and guess the correct Hibernate type.
          Hibernate will attempt to interpret the name of the return class of
          the property getter using, in order, rules 2, 3, and 4.&lt;/p&gt;

          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.TypeDef&lt;/code&gt; and
          &lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.TypeDefs&lt;/code&gt; allows you to
          declare type definitions. These annotations can be placed at the
          class or package level. Note that these definitions are global for
          the session factory (even when defined at the class level). If the
          type is used on a single entity, you can place the definition on the
          entity itself. Otherwise, it is recommended to place the definition
          at the package level. In the example below, when Hibernate
          encounters a property of class &lt;code class=&quot;literal&quot;&gt;PhoneNumer&lt;/code&gt;, it
          delegates the persistence strategy to the custom mapping type
          &lt;code class=&quot;literal&quot;&gt;PhoneNumberType&lt;/code&gt;. However, properties belonging to
          other classes, too, can delegate their persistence strategy to
          &lt;code class=&quot;literal&quot;&gt;PhoneNumberType&lt;/code&gt;, by explicitly using the
          &lt;code class=&quot;literal&quot;&gt;@Type&lt;/code&gt; annotation.&lt;/p&gt;

          &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
            &lt;p&gt;Package level annotations are placed in a file named
            &lt;code class=&quot;filename&quot;&gt;package-info.java&lt;/code&gt; in the appropriate package.
            Place your annotations before the package declaration.&lt;/p&gt;
          &lt;/div&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;TypeDef&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;phoneNumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;defaultForType&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;typeClass&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PhoneNumberType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ContactDetails&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PhoneNumber&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;localPhoneNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;phoneNumber&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OverseasPhoneNumber&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;overseasPhoneNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;The following example shows the usage of the
          &lt;code class=&quot;literal&quot;&gt;parameters&lt;/code&gt; attribute to customize the
          TypeDef.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;in&amp;nbsp;org&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;entity&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;package&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;-&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;info&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;java&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TypeDefs&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TypeDef&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;caster&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typeClass&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CasterStringType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;parameters&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;cast&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lower&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;in&amp;nbsp;org&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;java&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;caster&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getSmallText&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;When using composite user type, you will have to express
          column definitions. The &lt;code class=&quot;literal&quot;&gt;@Columns&lt;/code&gt; has been
          introduced for that purpose.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Type&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;type&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;org.hibernate.test.annotations.entity.MonetaryAmountUserType&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Columns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;columns&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;r_amount&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;r_currency&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MonetaryAmount&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getAmount&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;amount&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MonetaryAmount&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;BigDecimal&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;amount&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Currency&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;currency&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.2. Access type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3042&quot;/&gt;5.1.4.1.2. Access type&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;By default the access type of a class hierarchy is defined by
          the position of the &lt;code class=&quot;classname&quot;&gt;@Id&lt;/code&gt; or
          &lt;code class=&quot;classname&quot;&gt;@EmbeddedId&lt;/code&gt; annotations. If these annotations
          are on a field, then only fields are considered for persistence and
          the state is accessed via the field. If these annotations are on a
          getter, then only the getters are considered for persistence and the
          state is accessed via the getter/setter. That works well in practice
          and is the recommended approach.&lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
              &lt;p&gt;The placement of annotations within a class hierarchy has
              to be consistent (either field or on property) to be able to
              determine the default access type. It is recommended to stick to
              one single annotation placement strategy throughout your whole
              application.&lt;/p&gt;
            &lt;/div&gt;

          &lt;p&gt;However in some situations, you need to:&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;force the access type of the entity hierarchy&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;override the access type of a specific entity in the class
              hierarchy&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;override the access type of an embeddable type&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

          &lt;p&gt;The best use case is an embeddable class used by several
          entities that might not use the same access type. In this case it is
          better to force the access type at the embeddable class
          level.&lt;/p&gt;

          &lt;p&gt;To force the access type on a given class, use the
          &lt;code class=&quot;classname&quot;&gt;@Access&lt;/code&gt; annotation as showed below:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embedded&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;address&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embedded&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;address&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AcessType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PROPERTY&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;street1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStreet1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;street1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setStreet1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;street1&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;street1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;hashCode&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;not&amp;nbsp;persistent&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;You can also override the access type of a single property
          while keeping the other properties standard.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Transient&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;userId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Transient&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orderId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Access&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AccessType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PROPERTY&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrderNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;userId&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orderId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrderNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;userId&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orderId&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;In this example, the default access type is
          &lt;code class=&quot;classname&quot;&gt;FIELD&lt;/code&gt; except for the
          &lt;code class=&quot;literal&quot;&gt;orderNumber&lt;/code&gt; property. Note that the corresponding
          field, if any must be marked as &lt;code class=&quot;classname&quot;&gt;@Transient&lt;/code&gt; or
          &lt;code class=&quot;code&quot;&gt;transient&lt;/code&gt;.&lt;/p&gt;

          &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;@org.hibernate.annotations.AccessType&lt;/h2&gt;
            

            &lt;p&gt;The annotation
            &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.AccessType&lt;/code&gt;
            should be considered deprecated for FIELD and PROPERTY access. It
            is still useful however if you need to use a custom access
            type.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.3. Optimistic lock&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3072&quot;/&gt;5.1.4.1.3. Optimistic lock&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;It is sometimes useful to avoid increasing the version number
          even if a given property is dirty (particularly collections). You
          can do that by annotating the property (or collection) with
          &lt;code class=&quot;literal&quot;&gt;@OptimisticLock(excluded=true)&lt;/code&gt;.&lt;/p&gt;

          &lt;p&gt;More formally, specifies that updates to this property do not
          require acquisition of the optimistic lock.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.4. Declaring column attributes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;entity-mapping-property-column&quot;/&gt;5.1.4.1.4. Declaring column attributes&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;The column(s) used for a property mapping can be defined using
          the &lt;code class=&quot;literal&quot;&gt;@Column&lt;/code&gt; annotation. Use it to override
          default values (see the JPA specification for more information on
          the defaults). You can use this annotation at the property level for
          properties that are:&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;not annotated at all&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;annotated with &lt;code class=&quot;literal&quot;&gt;@Basic&lt;/code&gt;&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;annotated with &lt;code class=&quot;literal&quot;&gt;@Version&lt;/code&gt;&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;annotated with &lt;code class=&quot;literal&quot;&gt;@Lob&lt;/code&gt;&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;annotated with &lt;code class=&quot;literal&quot;&gt;@Temporal&lt;/code&gt;&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;updatable&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;flight_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;nullable&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;length&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; property is mapped to the
          &lt;code class=&quot;literal&quot;&gt;flight_name&lt;/code&gt; column, which is not nullable, has a
          length of 50 and is not updatable (making the property
          immutable).&lt;/p&gt;

          &lt;p&gt;This annotation can be applied to regular properties as well
          as &lt;code class=&quot;literal&quot;&gt;@Id&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;@Version&lt;/code&gt;
          properties.&lt;/p&gt;

          &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Column(
    name=&quot;columnName&quot;;                                     &lt;span class=&quot;co&quot; id=&quot;hm1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
    boolean unique() default false;                        &lt;span class=&quot;co&quot; id=&quot;hm2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
    boolean nullable() default true;                       &lt;span class=&quot;co&quot; id=&quot;hm3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
    boolean insertable() default true;                     &lt;span class=&quot;co&quot; id=&quot;hm4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
    boolean updatable() default true;                      &lt;span class=&quot;co&quot; id=&quot;hm5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
    String columnDefinition() default &quot;&quot;;                  &lt;span class=&quot;co&quot; id=&quot;hm6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
    String table() default &quot;&quot;;                             &lt;span class=&quot;co&quot; id=&quot;hm7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
    int length() default 255;                              &lt;span class=&quot;co&quot; id=&quot;hm8&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
    int precision() default 0; // decimal precision        &lt;span class=&quot;co&quot; id=&quot;hm9&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
    int scale() default 0; // decimal scale&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; (optional): the column name
                (default to the property name)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional): set a unique
                constraint on this column or not (default false)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;nullable&lt;/code&gt; (optional): set the column
                as nullable (default true).&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insertable&lt;/code&gt; (optional): whether or not
                the column will be part of the insert statement (default
                true)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;updatable&lt;/code&gt; (optional): whether or not
                the column will be part of the update statement (default
                true)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;columnDefinition&lt;/code&gt; (optional): override
                the sql DDL fragment for this particular column (non
                portable)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; (optional): define the targeted
                table (default primary table)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;length&lt;/code&gt; (optional):
                column length (default 255)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;precision&lt;/code&gt;
                (optional): column decimal precision (default 0)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;scale&lt;/code&gt; (optional):
                column decimal scale if useful (default 0)&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.5. Formula&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3147&quot;/&gt;5.1.4.1.5. Formula&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Sometimes, you want the Database to do some computation for
          you rather than in the JVM, you might also create some kind of
          virtual column. You can use a SQL fragment (aka formula) instead of
          mapping a property into a column. This kind of property is read only
          (its value is calculated by your formula fragment).&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Formula&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;obj_length&amp;nbsp;*&amp;nbsp;obj_height&amp;nbsp;*&amp;nbsp;obj_width&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getObjectVolume&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;The SQL fragment can be as complex as you want and even
          include subselects.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.4.1.6. Non-annotated property defaults&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3152&quot;/&gt;5.1.4.1.6. Non-annotated property defaults&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;If a property is not annotated, the following rules
          apply:&lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;If the property is of a single type, it is mapped as
                @Basic&lt;/p&gt;
              &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;Otherwise, if the type of the property is annotated as
                @Embeddable, it is mapped as @Embedded&lt;/p&gt;
              &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;Otherwise, if the type of the property is
                &lt;code class=&quot;classname&quot;&gt;Serializable&lt;/code&gt;, it is mapped as
                &lt;code class=&quot;classname&quot;&gt;@Basic&lt;/code&gt; in a column holding the object
                in its serialized version&lt;/p&gt;
              &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;Otherwise, if the type of the property is
                &lt;code class=&quot;classname&quot;&gt;java.sql.Clob&lt;/code&gt; or
                &lt;code class=&quot;classname&quot;&gt;java.sql.Blob&lt;/code&gt;, it is mapped as
                &lt;code class=&quot;classname&quot;&gt;@Lob&lt;/code&gt; with the appropriate
                &lt;code class=&quot;classname&quot;&gt;LobType&lt;/code&gt;&lt;/p&gt;
              &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.4.2. Property mapping with hbm.xml&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3170&quot;/&gt;5.1.4.2. Property mapping with hbm.xml&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt; element declares a
        persistent JavaBean style property of the class.&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;property1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;property2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        type=&quot;typename&quot;                                    &lt;span class=&quot;co&quot; id=&quot;property3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        update=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;property4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;property5&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        formula=&quot;arbitrary SQL expression&quot;                 &lt;span class=&quot;co&quot; id=&quot;property6&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;property7&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;property8&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        unique=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;property9&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
        not-null=&quot;true|false&quot;                              &lt;span class=&quot;co&quot; id=&quot;property10&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;true|false&quot;                       &lt;span class=&quot;co&quot; id=&quot;property11&quot;&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;(10)&quot;/&gt;&lt;/span&gt;
        generated=&quot;never|insert|always&quot;                    &lt;span class=&quot;co&quot; id=&quot;property12&quot;&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;(11)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;
        index=&quot;index_name&quot;
        unique_key=&quot;unique_key_id&quot;
        length=&quot;L&quot;
        precision=&quot;P&quot;
        scale=&quot;S&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of the property, with an
              initial lowercase letter.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional - defaults to the
              property name): the name of the mapped database table column.
              This can also be specified by nested
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element(s).&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (optional): a name that indicates
              the Hibernate type.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;update, insert&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that the mapped columns
              should be included in SQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; and/or
              &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statements. Setting both to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; allows a pure &quot;derived&quot; property whose
              value is initialized from some other property that maps to the
              same column(s), or by a trigger or other application.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): an SQL expression
              that defines the value for a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;computed&lt;/em&gt;&lt;/span&gt;
              property. Computed properties do not have a column mapping of
              their own.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
              accessing the property value.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that this property should
              be fetched lazily when the instance variable is first accessed.
              It requires build-time bytecode instrumentation.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional): enables the DDL
              generation of a unique constraint for the columns. Also, allow
              this to be the target of a
              &lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt;.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;9&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt; (optional): enables the DDL
              generation of a nullability constraint for the columns.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that updates to this
              property do or do not require acquisition of the optimistic
              lock. In other words, it determines if a version increment
              should occur when this property is dirty.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;11&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;generated&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;never&lt;/code&gt;): specifies that this property value is
              actually generated by the database. See the discussion of &lt;a class=&quot;link&quot; href=&quot;#mapping-generated&quot; title=&quot;5.5. Generated properties&quot;&gt;generated properties&lt;/a&gt; for more
              information.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;typename&lt;/em&gt;&lt;/span&gt; could be:&lt;/p&gt;

        &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;The name of a Hibernate basic type: &lt;code class=&quot;literal&quot;&gt;integer,
            string, character, date, timestamp, float, binary, serializable,
            object, blob&lt;/code&gt; etc.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;The name of a Java class with a default basic type:
            &lt;code class=&quot;literal&quot;&gt;int, float, char, java.lang.String, java.util.Date,
            java.lang.Integer, java.sql.Clob&lt;/code&gt; etc.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;The name of a serializable Java class.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;The class name of a custom type:
            &lt;code class=&quot;literal&quot;&gt;com.illflow.type.MyCustomType&lt;/code&gt; etc.&lt;/p&gt;
          &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

        &lt;p&gt;If you do not specify a type, Hibernate will use reflection upon
        the named property and guess the correct Hibernate type. Hibernate
        will attempt to interpret the name of the return class of the property
        getter using, in order, rules 2, 3, and 4. In certain cases you will
        need the &lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; attribute. For example, to
        distinguish between &lt;code class=&quot;literal&quot;&gt;Hibernate.DATE&lt;/code&gt; and
        &lt;code class=&quot;literal&quot;&gt;Hibernate.TIMESTAMP&lt;/code&gt;, or to specify a custom
        type.&lt;/p&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; attribute allows you to control
        how Hibernate accesses the property at runtime. By default, Hibernate
        will call the property get/set pair. If you specify
        &lt;code class=&quot;literal&quot;&gt;access=&quot;field&quot;&lt;/code&gt;, Hibernate will bypass the get/set
        pair and access the field directly using reflection. You can specify
        your own strategy for property access by naming a class that
        implements the interface
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.property.PropertyAccessor&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;A powerful feature is derived properties. These properties are
        by definition read-only. The property value is computed at load time.
        You declare the computation as an SQL expression. This then translates
        to a &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; clause subquery in the SQL query that
        loads an instance:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
&amp;lt;property name=&quot;totalPrice&quot;
    formula=&quot;( SELECT SUM (li.quantity*p.price) FROM LineItem li, Product p
                WHERE li.productId = p.productId
                AND li.customerId = customerId
                AND li.orderNumber = orderNumber )&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;You can reference the entity table by not declaring an alias on
        a particular column. This would be &lt;code class=&quot;literal&quot;&gt;customerId&lt;/code&gt; in
        the given example. You can also use the nested
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;formula&amp;gt;&lt;/code&gt; mapping element if you do not want
        to use the attribute.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.5. Embedded objects (aka components)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-component&quot;/&gt;5.1.5. Embedded objects (aka components)&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Embeddable objects (or components) are objects whose properties
      are mapped to the same table as the owning entity&apos;s table. Components
      can, in turn, declare their own properties, components or
      collections&lt;/p&gt;

      &lt;p&gt;It is possible to declare an embedded component inside an entity
      and even override its column mapping. Component classes have to be
      annotated at the class level with the &lt;code class=&quot;literal&quot;&gt;@Embeddable&lt;/code&gt;
      annotation. It is possible to override the column mapping of an embedded
      object for a particular entity using the &lt;code class=&quot;literal&quot;&gt;@Embedded&lt;/code&gt;
      and &lt;code class=&quot;literal&quot;&gt;@AttributeOverride&lt;/code&gt; annotation in the associated
      property:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Persistent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;component&amp;nbsp;using&amp;nbsp;defaults&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;homeAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embedded&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverrides&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;iso2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;bornIso2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;bornCountryName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;bornIn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;city&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;nationality&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;no&amp;nbsp;overriding&amp;nbsp;here&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Country&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;countryName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getIso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setIso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;iso2&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;iso2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;An embeddable object inherits the access type of its owning entity
      (note that you can override that using the &lt;code class=&quot;literal&quot;&gt;@Access&lt;/code&gt;
      annotation).&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; entity has two component properties,
      &lt;code class=&quot;literal&quot;&gt;homeAddress&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;bornIn&lt;/code&gt;.
      &lt;code class=&quot;literal&quot;&gt;homeAddress&lt;/code&gt; property has not been annotated, but
      Hibernate will guess that it is a persistent component by looking for
      the &lt;code class=&quot;literal&quot;&gt;@Embeddable&lt;/code&gt; annotation in the Address class. We
      also override the mapping of a column name (to
      &lt;code class=&quot;literal&quot;&gt;bornCountryName&lt;/code&gt;) with the
      &lt;code class=&quot;literal&quot;&gt;@Embedded&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;@AttributeOverride
      &lt;/code&gt;annotations for each mapped attribute of
      &lt;code class=&quot;literal&quot;&gt;Country&lt;/code&gt;. As you can see, &lt;code class=&quot;literal&quot;&gt;Country
      &lt;/code&gt;is also a nested component of &lt;code class=&quot;literal&quot;&gt;Address&lt;/code&gt;,
      again using auto-detection by Hibernate and JPA defaults. Overriding
      columns of embedded objects of embedded objects is through dotted
      expressions.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Embedded&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverrides&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_city&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nationality.iso2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nat_Iso2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nationality.name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nat_CountryName&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;nationality&amp;nbsp;columns&amp;nbsp;in&amp;nbsp;homeAddress&amp;nbsp;are&amp;nbsp;overridden&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;homeAddress&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;Hibernate Annotations supports something that is not explicitly
      supported by the JPA specification. You can annotate a embedded object
      with the &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; annotation to make the
      superclass properties persistent (see
      &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; for more informations).&lt;/p&gt;

      &lt;p&gt;You can also use association annotations in an embeddable object
      (ie &lt;code class=&quot;literal&quot;&gt;@OneToOne&lt;/code&gt;, &lt;code class=&quot;classname&quot;&gt;@ManyToOne&lt;/code&gt;,
      &lt;code class=&quot;classname&quot;&gt;@OneToMany&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;@ManyToMany&lt;/code&gt;). To
      override the association columns you can use
      &lt;code class=&quot;literal&quot;&gt;@AssociationOverride&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;If you want to have the same embeddable object type twice in the
      same entity, the column name defaulting will not work as several
      embedded objects would share the same set of columns. In plain JPA, you
      need to override at least one set of columns. Hibernate, however, allows
      you to enhance the default naming mechanism through the
      &lt;code class=&quot;classname&quot;&gt;NamingStrategy&lt;/code&gt; interface. You can write a
      strategy that prevent name clashing in such a situation.
      &lt;code class=&quot;classname&quot;&gt;DefaultComponentSafeNamingStrategy&lt;/code&gt; is an example
      of this.&lt;/p&gt;

      &lt;p&gt;If a property of the embedded object points back to the owning
      entity, annotate it with the &lt;code class=&quot;classname&quot;&gt;@Parent&lt;/code&gt; annotation.
      Hibernate will make sure this property is properly loaded with the
      entity reference.&lt;/p&gt;

      &lt;p&gt;In XML, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt;
      element.&lt;/p&gt;

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;component
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;component1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        class=&quot;className&quot;                                  &lt;span class=&quot;co&quot; id=&quot;component2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;component3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        update=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;component4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;component5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;component6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;true|false&quot;                       &lt;span class=&quot;co&quot; id=&quot;component7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        unique=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;component8&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|.&quot;
&amp;gt;

        &amp;lt;property ...../&amp;gt;
        &amp;lt;many-to-one .... /&amp;gt;
        ........
&amp;lt;/component&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of the property.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; (optional - defaults to the
            property type determined by reflection): the name of the component
            (child) class.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt;: do the mapped columns appear in
            SQL &lt;code class=&quot;literal&quot;&gt;INSERTs&lt;/code&gt;?&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt;: do the mapped columns appear in
            SQL &lt;code class=&quot;literal&quot;&gt;UPDATEs&lt;/code&gt;?&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
            accessing the property value.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that this component should be
            fetched lazily when the instance variable is first accessed. It
            requires build-time bytecode instrumentation.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that updates to this component
            either do or do not require acquisition of the optimistic lock. It
            determines if a version increment should occur when this property
            is dirty.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that a unique constraint
            exists upon all mapped columns of the component.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

      &lt;p&gt;The child &lt;code class=&quot;literal&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt; tags map properties
      of the child class to table columns.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element allows a
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;parent&amp;gt;&lt;/code&gt; subelement that maps a property of the
      component class as a reference back to the containing entity.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;dynamic-component&amp;gt;&lt;/code&gt; element allows a
      &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt; to be mapped as a component, where the property
      names refer to keys of the map. See &lt;a class=&quot;xref&quot; href=&quot;#components-dynamic&quot; title=&quot;9.5. Dynamic components&quot;&gt;Section 9.5, âDynamic componentsâ&lt;/a&gt; for more information. This feature is
      not supported in annotations.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.6. Inheritance strategy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3356&quot;/&gt;5.1.6. Inheritance strategy&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Java is a language supporting polymorphism: a class can inherit
      from another. Several strategies are possible to persist a class
      hierarchy:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Single table per class hierarchy strategy: a single table
          hosts all the instances of a class hierarchy&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Joined subclass strategy: one table per class and subclass is
          present and each table persist the properties specific to a given
          subclass. The state of the entity is then stored in its
          corresponding class table and all its superclasses&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Table per class strategy: one table per concrete class and
          subclass is present and each table persist the properties of the
          class and its superclasses. The state of the entity is then stored
          entirely in the dedicated table for its class.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.6.1. Single table per class hierarchy strategy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-subclass&quot;/&gt;5.1.6.1. Single table per class hierarchy strategy&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;With this approach the properties of all the subclasses in a
        given mapped class hierarchy are stored in a single table.&lt;/p&gt;

        &lt;p&gt;Each subclass declares its own persistent properties and
        subclasses. Version and id properties are assumed to be inherited from
        the root class. Each subclass in a hierarchy must define a unique
        discriminator value. If this is not specified, the fully qualified
        Java class name is used.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Inheritance&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;InheritanceType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;SINGLE_TABLE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;planetype&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;discriminatorType&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;STRING&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Plane&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;A320&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A320&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;In hbm.xml, for the table-per-class-hierarchy mapping strategy,
        the &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt; declaration is used. For
        example:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;subclass
        name=&quot;ClassName&quot;                                   &lt;span class=&quot;co&quot; id=&quot;subclass1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        discriminator-value=&quot;discriminator_value&quot;          &lt;span class=&quot;co&quot; id=&quot;subclass2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        proxy=&quot;ProxyInterface&quot;                             &lt;span class=&quot;co&quot; id=&quot;subclass3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;subclass4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        dynamic-update=&quot;true|false&quot;
        dynamic-insert=&quot;true|false&quot;
        entity-name=&quot;EntityName&quot;
        node=&quot;element-name&quot;
        extends=&quot;SuperclassName&quot;&amp;gt;

        &amp;lt;property .... /&amp;gt;
        .....
&amp;lt;/subclass&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the fully qualified class name of
              the subclass.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;discriminator-value&lt;/code&gt; (optional -
              defaults to the class name): a value that distinguishes
              individual subclasses.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt; (optional): specifies a class or
              interface used for lazy initializing proxies.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): setting
              &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; disables the use of lazy
              fetching.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;For information about inheritance mappings see &lt;a class=&quot;xref&quot; href=&quot;#inheritance&quot; title=&quot;Chapter 10. Inheritance mapping&quot;&gt;Chapter 10, &lt;em&gt;Inheritance mapping&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.6.1.1. Discriminator&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-discriminator&quot;/&gt;5.1.6.1.1. Discriminator&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Discriminators are required for polymorphic persistence using
          the table-per-class-hierarchy mapping strategy. It declares a
          discriminator column of the table. The discriminator column contains
          marker values that tell the persistence layer what subclass to
          instantiate for a particular row. Hibernate Core supports the
          follwoing restricted set of types as discriminator column:
          &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;character&lt;/code&gt;,
          &lt;code class=&quot;literal&quot;&gt;integer&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;byte&lt;/code&gt;,
          &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;boolean&lt;/code&gt;,
          &lt;code class=&quot;literal&quot;&gt;yes_no&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;true_false&lt;/code&gt;.&lt;/p&gt;

          &lt;p&gt;Use the &lt;code class=&quot;classname&quot;&gt;@DiscriminatorColumn&lt;/code&gt; to define
          the discriminator column as well as the discriminator type. &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
              &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;The enum DiscriminatorType&lt;/code&gt; used in
              &lt;code class=&quot;classname&quot;&gt;javax.persitence.DiscriminatorColumn&lt;/code&gt; only
              contains the values &lt;code class=&quot;constant&quot;&gt;STRING&lt;/code&gt;,
              &lt;code class=&quot;constant&quot;&gt;CHAR&lt;/code&gt; and &lt;code class=&quot;constant&quot;&gt;INTEGER&lt;/code&gt; which
              means that not all Hibernate supported types are available via
              the &lt;code class=&quot;classname&quot;&gt;@DiscriminatorColumn&lt;/code&gt;
              annotation.&lt;/p&gt;
            &lt;/div&gt;&lt;p&gt;You can also use
          &lt;code class=&quot;classname&quot;&gt;@DiscriminatorFormula&lt;/code&gt; to express in SQL a
          virtual discriminator column. This is particularly useful when the
          discriminator value can be extracted from one or more columns of the
          table. Both &lt;code class=&quot;classname&quot;&gt;@DiscriminatorColumn&lt;/code&gt; and
          &lt;code class=&quot;classname&quot;&gt;@DiscriminatorFormula&lt;/code&gt; are to be set on the
          root entity (once per persisted hierarchy).&lt;/p&gt;

          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.DiscriminatorOptions&lt;/code&gt;
          allows to optionally specify Hibernate specific discriminator
          options which are not standardized in JPA. The available options are
          &lt;code class=&quot;literal&quot;&gt;force&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt;. The
          &lt;code class=&quot;literal&quot;&gt;force&lt;/code&gt; attribute is useful if the table contains
          rows with &quot;extra&quot; discriminator values that are not mapped to a
          persistent class. This could for example occur when working with a
          legacy database. If &lt;code class=&quot;literal&quot;&gt;force&lt;/code&gt; is set to
          &lt;code class=&quot;constant&quot;&gt;true&lt;/code&gt; Hibernate will specify the allowed
          discriminator values in the &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; query, even
          when retrieving all instances of the root class. The second option -
          &lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt; - tells Hibernate whether or not to
          include the discriminator column in SQL &lt;code class=&quot;literal&quot;&gt;INSERTs&lt;/code&gt;.
          Usually the column should be part of the &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt;
          statement, but if your discriminator column is also part of a mapped
          composite identifier you have to set this option to
          &lt;code class=&quot;constant&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
              &lt;p&gt;There is also a
              &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.ForceDiscriminator&lt;/code&gt;
              annotation which is deprecated since version 3.6. Use
              &lt;code class=&quot;classname&quot;&gt;@DiscriminatorOptions&lt;/code&gt; instead.&lt;/p&gt;
            &lt;/div&gt;

          &lt;p&gt;Finally, use &lt;code class=&quot;classname&quot;&gt;@DiscriminatorValue&lt;/code&gt; on
          each class of the hierarchy to specify the value stored in the
          discriminator column for a given entity. If you do not set
          &lt;code class=&quot;classname&quot;&gt;@DiscriminatorValue&lt;/code&gt; on a class, the fully
          qualified class name is used.&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Inheritance&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;InheritanceType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;SINGLE_TABLE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;planetype&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;discriminatorType&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;STRING&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Plane&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DiscriminatorValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;A320&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;A320&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

          &lt;p&gt;In hbm.xml, the &lt;code class=&quot;literal&quot;&gt;&amp;lt;discriminator&amp;gt;&lt;/code&gt;
          element is used to define the discriminator column or
          formula:&lt;/p&gt;

          &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;discriminator
        column=&quot;discriminator_column&quot;                      &lt;span class=&quot;co&quot; id=&quot;discriminator1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        type=&quot;discriminator_type&quot;                          &lt;span class=&quot;co&quot; id=&quot;discriminator2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        force=&quot;true|false&quot;                                 &lt;span class=&quot;co&quot; id=&quot;discriminator3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;discriminator4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        formula=&quot;arbitrary sql expression&quot;                 &lt;span class=&quot;co&quot; id=&quot;discriminator5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional - defaults to
                &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;): the name of the discriminator
                column.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (optional - defaults to
                &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt;): a name that indicates the
                Hibernate type&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;force&lt;/code&gt; (optional - defaults to
                &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): &quot;forces&quot; Hibernate to specify the
                allowed discriminator values, even when retrieving all
                instances of the root class.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt; (optional - defaults to
                &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): set this to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;
                if your discriminator column is also part of a mapped
                composite identifier. It tells Hibernate not to include the
                column in SQL &lt;code class=&quot;literal&quot;&gt;INSERTs&lt;/code&gt;.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): an arbitrary SQL
                expression that is executed when a type has to be evaluated.
                It allows content-based discrimination.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

          &lt;p&gt;Actual values of the discriminator column are specified by the
          &lt;code class=&quot;literal&quot;&gt;discriminator-value&lt;/code&gt; attribute of the
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; and
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt; elements.&lt;/p&gt;

          &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; attribute allows you to declare
          an arbitrary SQL expression that will be used to evaluate the type
          of a row. For example:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;discriminator
    formula=&quot;case when CLASS_TYPE in (&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) then 0 else 1 end&quot;
    type=&quot;integer&quot;/&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.6.2. Joined subclass strategy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-joinedsubclass&quot;/&gt;5.1.6.2. Joined subclass strategy&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Each subclass can also be mapped to its own table. This is
        called the table-per-subclass mapping strategy. An inherited state is
        retrieved by joining with the table of the superclass. A discriminator
        column is not required for this mapping strategy. Each subclass must,
        however, declare a table column holding the object identifier. The
        primary key of this table is also a foreign key to the superclass
        table and described by the
        &lt;code class=&quot;classname&quot;&gt;@PrimaryKeyJoinColumn&lt;/code&gt;s or the
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;CATS&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Inheritance&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;strategy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;InheritanceType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;JOINED&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;generator&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;cat-uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GenericGenerator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;cat-uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;strategy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;uuid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;DOMESTIC_CATS&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PrimaryKeyJoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;CAT&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;DomesticCat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;The table name still defaults to the non qualified class name.
          Also if &lt;code class=&quot;classname&quot;&gt;@PrimaryKeyJoinColumn&lt;/code&gt; is not set, the
          primary key / foreign key columns are assumed to have the same names
          as the primary key columns of the primary table of the
          superclass.&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;In hbm.xml, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;joined-subclass&amp;gt;&lt;/code&gt;
        element. For example:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;joined-subclass
        name=&quot;ClassName&quot;                                   &lt;span class=&quot;co&quot; id=&quot;joinedsubclass1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        table=&quot;tablename&quot;                                  &lt;span class=&quot;co&quot; id=&quot;joinedsubclass2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        proxy=&quot;ProxyInterface&quot;                             &lt;span class=&quot;co&quot; id=&quot;joinedsubclass3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;joinedsubclass4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        dynamic-update=&quot;true|false&quot;
        dynamic-insert=&quot;true|false&quot;
        schema=&quot;schema&quot;
        catalog=&quot;catalog&quot;
        extends=&quot;SuperclassName&quot;
        persister=&quot;ClassName&quot;
        subselect=&quot;SQL expression&quot;
        entity-name=&quot;EntityName&quot;
        node=&quot;element-name&quot;&amp;gt;

        &amp;lt;key .... &amp;gt;

        &amp;lt;property .... /&amp;gt;
        .....
&amp;lt;/joined-subclass&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the fully qualified class name of
              the subclass.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt;: the name of the subclass
              table.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt; (optional): specifies a class or
              interface to use for lazy initializing proxies.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional, defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): setting
              &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; disables the use of lazy
              fetching.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;Use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; element to declare the
        primary key / foreign key column. The mapping at the start of the
        chapter would then be re-written as:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-mapping PUBLIC
        &quot;-//Hibernate/Hibernate Mapping DTD//EN&quot;
        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-mapping package=&quot;eg&quot;&amp;gt;

        &amp;lt;class name=&quot;Cat&quot; table=&quot;CATS&quot;&amp;gt;
                &amp;lt;id name=&quot;id&quot; column=&quot;uid&quot; type=&quot;long&quot;&amp;gt;
                        &amp;lt;generator class=&quot;hilo&quot;/&amp;gt;
                &amp;lt;/id&amp;gt;
                &amp;lt;property name=&quot;birthdate&quot; type=&quot;date&quot;/&amp;gt;
                &amp;lt;property name=&quot;color&quot; not-null=&quot;true&quot;/&amp;gt;
                &amp;lt;property name=&quot;sex&quot; not-null=&quot;true&quot;/&amp;gt;
                &amp;lt;property name=&quot;weight&quot;/&amp;gt;
                &amp;lt;many-to-one name=&quot;mate&quot;/&amp;gt;
                &amp;lt;set name=&quot;kittens&quot;&amp;gt;
                        &amp;lt;key column=&quot;MOTHER&quot;/&amp;gt;
                        &amp;lt;one-to-many class=&quot;Cat&quot;/&amp;gt;
                &amp;lt;/set&amp;gt;
                &amp;lt;joined-subclass name=&quot;DomesticCat&quot; table=&quot;DOMESTIC_CATS&quot;&amp;gt;
                    &amp;lt;key column=&quot;CAT&quot;/&amp;gt;
                    &amp;lt;property name=&quot;name&quot; type=&quot;string&quot;/&amp;gt;
                &amp;lt;/joined-subclass&amp;gt;
        &amp;lt;/class&amp;gt;

        &amp;lt;class name=&quot;eg.Dog&quot;&amp;gt;
                &amp;lt;!-- mapping for Dog could go here --&amp;gt;
        &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

        &lt;p&gt;For information about inheritance mappings see &lt;a class=&quot;xref&quot; href=&quot;#inheritance&quot; title=&quot;Chapter 10. Inheritance mapping&quot;&gt;Chapter 10, &lt;em&gt;Inheritance mapping&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.6.3. Table per class strategy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-unionsubclass&quot;/&gt;5.1.6.3. Table per class strategy&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;A third option is to map only the concrete classes of an
        inheritance hierarchy to tables. This is called the
        table-per-concrete-class strategy. Each table defines all persistent
        states of the class, including the inherited state. In Hibernate, it
        is not necessary to explicitly map such inheritance hierarchies. You
        can map each class as a separate entity root. However, if you wish use
        polymorphic associations (e.g. an association to the superclass of
        your hierarchy), you need to use the union subclass mapping.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Inheritance&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;strategy&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;InheritanceType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;TABLE_PER_CLASS&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;Or in hbm.xml:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;union-subclass
        name=&quot;ClassName&quot;                                   &lt;span class=&quot;co&quot; id=&quot;unionsubclass1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        table=&quot;tablename&quot;                                  &lt;span class=&quot;co&quot; id=&quot;unionsubclass2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        proxy=&quot;ProxyInterface&quot;                             &lt;span class=&quot;co&quot; id=&quot;unionsubclass3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;true|false&quot;                                  &lt;span class=&quot;co&quot; id=&quot;unionsubclass4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        dynamic-update=&quot;true|false&quot;
        dynamic-insert=&quot;true|false&quot;
        schema=&quot;schema&quot;
        catalog=&quot;catalog&quot;
        extends=&quot;SuperclassName&quot;
        abstract=&quot;true|false&quot;
        persister=&quot;ClassName&quot;
        subselect=&quot;SQL expression&quot;
        entity-name=&quot;EntityName&quot;
        node=&quot;element-name&quot;&amp;gt;

        &amp;lt;property .... /&amp;gt;
        .....
&amp;lt;/union-subclass&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the fully qualified class name of
              the subclass.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt;: the name of the subclass
              table.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt; (optional): specifies a class or
              interface to use for lazy initializing proxies.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional, defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): setting
              &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; disables the use of lazy
              fetching.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;No discriminator column or key column is required for this
        mapping strategy.&lt;/p&gt;

        &lt;p&gt;For information about inheritance mappings see &lt;a class=&quot;xref&quot; href=&quot;#inheritance&quot; title=&quot;Chapter 10. Inheritance mapping&quot;&gt;Chapter 10, &lt;em&gt;Inheritance mapping&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.6.4. Inherit properties from superclasses&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3548&quot;/&gt;5.1.6.4. Inherit properties from superclasses&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;This is sometimes useful to share common properties through a
        technical or a business superclass without including it as a regular
        mapped entity (ie no specific table for this entity). For that purpose
        you can map them as &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;MappedSuperclass&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;BaseEntity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Basic&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Temporal&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TemporalType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;TIMESTAMP&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastUpdate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastUpdater&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;BaseEntity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;In database, this hierarchy will be represented as an
        &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt; table having the &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt;,
        &lt;code class=&quot;literal&quot;&gt;lastUpdate&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;lastUpdater&lt;/code&gt;
        columns. The embedded superclass property mappings are copied into
        their entity subclasses. Remember that the embeddable superclass is
        not the root of the hierarchy though.&lt;/p&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;Properties from superclasses not mapped as
          &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; are ignored.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;The default access type (field or methods) is used, unless you
          use the &lt;code class=&quot;literal&quot;&gt;@Access&lt;/code&gt; annotation.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;The same notion can be applied to
          &lt;code class=&quot;literal&quot;&gt;@Embeddable&lt;/code&gt; objects to persist properties from
          their superclasses. You also need to use
          &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; to do that (this should not be
          considered as a standard EJB3 feature though)&lt;/p&gt;
        &lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;It is allowed to mark a class as
          &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; in the middle of the mapped
          inheritance hierarchy.&lt;/p&gt;
        &lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;Any class in the hierarchy non annotated with
          &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; nor &lt;code class=&quot;literal&quot;&gt;@Entity&lt;/code&gt;
          will be ignored.&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;You can override columns defined in entity superclasses at the
        root entity level using the &lt;code class=&quot;literal&quot;&gt;@AttributeOverride&lt;/code&gt;
        annotation.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;MappedSuperclass&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FlyingObject&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getAltitude&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;altitude&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Transient&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getMetricAltitude&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;metricAltitude&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PropulsionType&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getPropulsion&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;metricAltitude&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;altitude&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_altitude&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AssociationOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;propulsion&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;joinColumns&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_propulsion_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Plane&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;extends&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FlyingObject&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;altitude&lt;/code&gt; property will be persisted in an
        &lt;code class=&quot;literal&quot;&gt;fld_altitude&lt;/code&gt; column of table
        &lt;code class=&quot;literal&quot;&gt;Plane&lt;/code&gt; and the propulsion association will be
        materialized in a &lt;code class=&quot;literal&quot;&gt;fld_propulsion_fk&lt;/code&gt; foreign key
        column.&lt;/p&gt;

        &lt;p&gt;You can define &lt;code class=&quot;literal&quot;&gt;@AttributeOverride&lt;/code&gt;(s) and
        &lt;code class=&quot;literal&quot;&gt;@AssociationOverride&lt;/code&gt;(s) on
        &lt;code class=&quot;literal&quot;&gt;@Entity&lt;/code&gt; classes,
        &lt;code class=&quot;literal&quot;&gt;@MappedSuperclass&lt;/code&gt; classes and properties pointing
        to an &lt;code class=&quot;literal&quot;&gt;@Embeddable&lt;/code&gt; object.&lt;/p&gt;

        &lt;p&gt;In hbm.xml, simply map the properties of the superclass in the
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; element of the entity that needs to
        inherit them.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.6.5. Mapping one entity to several tables&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-join&quot;/&gt;5.1.6.5. Mapping one entity to several tables&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;While not recommended for a fresh schema, some legacy databases
        force your to map a single entity on several tables.&lt;/p&gt;

        &lt;p&gt;Using the &lt;code class=&quot;literal&quot;&gt;@SecondaryTable&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;@SecondaryTables&lt;/code&gt; class level annotations. To
        express that a column is in a particular table, use the
        &lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; parameter of &lt;code class=&quot;literal&quot;&gt;@Column&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;@JoinColumn&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;MainCat&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTables&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;pkJoinColumns&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;PrimaryKeyJoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;cat_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;uniqueConstraints&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;UniqueConstraint&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;columnNames&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;storyPart2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStoryPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStoryPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;In this example, &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt; will be in
        &lt;code class=&quot;literal&quot;&gt;MainCat&lt;/code&gt;. &lt;code class=&quot;literal&quot;&gt;storyPart1&lt;/code&gt; will be in
        &lt;code class=&quot;literal&quot;&gt;Cat1&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;storyPart2&lt;/code&gt; will be in
        &lt;code class=&quot;literal&quot;&gt;Cat2&lt;/code&gt;. &lt;code class=&quot;literal&quot;&gt;Cat1&lt;/code&gt; will be joined to
        &lt;code class=&quot;literal&quot;&gt;MainCat&lt;/code&gt; using the &lt;code class=&quot;literal&quot;&gt;cat_id&lt;/code&gt; as a
        foreign key, and &lt;code class=&quot;literal&quot;&gt;Cat2&lt;/code&gt; using &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt;
        (ie the same column name, the &lt;code class=&quot;literal&quot;&gt;MainCat&lt;/code&gt; id column
        has). Plus a unique constraint on &lt;code class=&quot;literal&quot;&gt;storyPart2&lt;/code&gt; has
        been set.&lt;/p&gt;

        &lt;p&gt;There is also additional tuning accessible via the
        &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Table&lt;/code&gt;
        annotation:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt;: If set to JOIN, the default,
            Hibernate will use an inner join to retrieve a secondary table
            defined by a class or its superclasses and an outer join for a
            secondary table defined by a subclass. If set to
            &lt;code class=&quot;classname&quot;&gt;SELECT&lt;/code&gt; then Hibernate will use a sequential
            select for a secondary table defined on a subclass, which will be
            issued only if a row turns out to represent an instance of the
            subclass. Inner joins will still be used to retrieve a secondary
            defined by the class and its superclasses.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt;: If true, Hibernate will not try
            to insert or update the properties defined by this join. Default
            to false.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optional&lt;/code&gt;: If enabled (the default),
            Hibernate will insert a row only if the properties defined by this
            join are non-null and will always use an outer join to retrieve
            the properties.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;foreignKey&lt;/code&gt;: defines the Foreign Key name
            of a secondary table pointing back to the primary table.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;Make sure to use the secondary table name in the
        &lt;code class=&quot;methodname&quot;&gt;appliesto&lt;/code&gt; property&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;MainCat&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;appliesTo&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;fetch&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;optional&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStoryPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStoryPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;storyPart2&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;In hbm.xml, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt;
        element.&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;join
        table=&quot;tablename&quot;                                  &lt;span class=&quot;co&quot; id=&quot;join1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        schema=&quot;owner&quot;                                     &lt;span class=&quot;co&quot; id=&quot;join2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        catalog=&quot;catalog&quot;                                  &lt;span class=&quot;co&quot; id=&quot;join3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        fetch=&quot;join|select&quot;                                &lt;span class=&quot;co&quot; id=&quot;join4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        inverse=&quot;true|false&quot;                               &lt;span class=&quot;co&quot; id=&quot;join5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        optional=&quot;true|false&quot;&amp;gt;                             &lt;span class=&quot;co&quot; id=&quot;join6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;

        &amp;lt;key ... /&amp;gt;

        &amp;lt;property ... /&amp;gt;
        ...
&amp;lt;/join&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt;: the name of the joined
              table.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt; (optional): overrides the schema
              name specified by the root
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;catalog&lt;/code&gt; (optional): overrides the
              catalog name specified by the root
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;join&lt;/code&gt;): if set to &lt;code class=&quot;literal&quot;&gt;join&lt;/code&gt;, the
              default, Hibernate will use an inner join to retrieve a
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt; defined by a class or its
              superclasses. It will use an outer join for a
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt; defined by a subclass. If set to
              &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt; then Hibernate will use a sequential
              select for a &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt; defined on a
              subclass. This will be issued only if a row represents an
              instance of the subclass. Inner joins will still be used to
              retrieve a &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt; defined by the class
              and its superclasses.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): if enabled, Hibernate will not insert
              or update the properties defined by this join.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optional&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): if enabled, Hibernate will insert a
              row only if the properties defined by this join are non-null. It
              will always use an outer join to retrieve the properties.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;For example, address information for a person can be mapped to a
        separate table while preserving value type semantics for all
        properties:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;
    table=&quot;PERSON&quot;&amp;gt;

    &amp;lt;id name=&quot;id&quot; column=&quot;PERSON_ID&quot;&amp;gt;...&amp;lt;/id&amp;gt;

    &amp;lt;join table=&quot;ADDRESS&quot;&amp;gt;
        &amp;lt;key column=&quot;ADDRESS_ID&quot;/&amp;gt;
        &amp;lt;property name=&quot;address&quot;/&amp;gt;
        &amp;lt;property name=&quot;zip&quot;/&amp;gt;
        &amp;lt;property name=&quot;country&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
    ...&lt;/pre&gt;

        &lt;p&gt;This feature is often only useful for legacy data models. We
        recommend fewer tables than classes and a fine-grained domain model.
        However, it is useful for switching between inheritance mapping
        strategies in a single hierarchy, as explained later.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.7. Mapping one to one and one to many associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e3678&quot;/&gt;5.1.7. Mapping one to one and one to many associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;To link one entity to an other, you need to map the association
      property as a to one association. In the relational model, you can
      either use a foreign key or an association table, or (a bit less common)
      share the same primary key value between the two entities.&lt;/p&gt;

      &lt;p&gt;To mark an association, use either
      &lt;code class=&quot;classname&quot;&gt;@ManyToOne&lt;/code&gt; or
      &lt;code class=&quot;classname&quot;&gt;@OnetoOne&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;@ManyToOne&lt;/code&gt; and &lt;code class=&quot;classname&quot;&gt;@OneToOne&lt;/code&gt;
      have a parameter named &lt;code class=&quot;literal&quot;&gt;targetEntity&lt;/code&gt; which describes
      the target entity name. You usually don&apos;t need this parameter since the
      default value (the type of the property that stores the association) is
      good in almost all cases. However this is useful when you want to use
      interfaces as the return type instead of the regular entity.&lt;/p&gt;

      &lt;p&gt;Setting a value of the &lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; attribute to any
      meaningful value other than nothing will propagate certain operations to
      the associated object. The meaningful values are divided into three
      categories.&lt;/p&gt;

      &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;basic operations, which include: &lt;code class=&quot;literal&quot;&gt;persist, merge,
          delete, save-update, evict, replicate, lock and
          refresh&lt;/code&gt;;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;special values: &lt;code class=&quot;literal&quot;&gt;delete-orphan&lt;/code&gt; or
          &lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt; ;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;comma-separated combinations of operation names:
          &lt;code class=&quot;literal&quot;&gt;cascade=&quot;persist,merge,evict&quot;&lt;/code&gt; or
          &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all,delete-orphan&quot;&lt;/code&gt;. See &lt;a class=&quot;xref&quot; href=&quot;#objectstate-transitive&quot; title=&quot;11.11. Transitive persistence&quot;&gt;Section 11.11, âTransitive persistenceâ&lt;/a&gt; for a full explanation. Note
          that single valued many-to-one associations do not support orphan
          delete.&lt;/p&gt;
        &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

      &lt;p&gt;By default, single point associations are eagerly fetched in JPA
      2. You can mark it as lazily fetched by using
      &lt;code class=&quot;classname&quot;&gt;@ManyToOne(fetch=FetchType.LAZY) &lt;/code&gt;in which case
      Hibernate will proxy the association and load it when the state of the
      associated entity is reached. You can force Hibernate not to use a proxy
      by using &lt;code class=&quot;classname&quot;&gt;@LazyToOne(NO_PROXY)&lt;/code&gt;. In this case, the
      property is fetched lazily when the instance variable is first accessed.
      This requires build-time bytecode instrumentation. lazy=&quot;false&quot;
      specifies that the association will always be eagerly fetched.&lt;/p&gt;

      &lt;p&gt;With the default JPA options, single-ended associations are loaded
      with a subsequent select if set to &lt;code class=&quot;literal&quot;&gt;LAZY&lt;/code&gt;, or a SQL
      JOIN is used for &lt;code class=&quot;literal&quot;&gt;EAGER&lt;/code&gt; associations. You can however
      adjust the fetching strategy, ie how data is fetched by using
      &lt;code class=&quot;literal&quot;&gt;@Fetch&lt;/code&gt;. &lt;code class=&quot;literal&quot;&gt;FetchMode&lt;/code&gt; can be
      &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; (a select is triggered when the association
      needs to be loaded) or &lt;code class=&quot;literal&quot;&gt;JOIN&lt;/code&gt; (use a SQL JOIN to load
      the association while loading the owner entity). &lt;code class=&quot;literal&quot;&gt;JOIN&lt;/code&gt;
      overrides any lazy attribute (an association loaded through a
      &lt;code class=&quot;literal&quot;&gt;JOIN&lt;/code&gt; strategy cannot be lazy).&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.7.1. Using a foreign key or an association table&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-manytoone&quot;/&gt;5.1.7.1. Using a foreign key or an association table&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;An ordinary association to another persistent class is declared
        using a&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@ManyToOne&lt;/code&gt; if several entities can
            point to the the target entity&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@OneToOne&lt;/code&gt; if only a single entity can
            point to the the target entity&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;and a foreign key in one table is referencing the primary key
        column(s) of the target table.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;COMP_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCompany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;company&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;@JoinColumn&lt;/code&gt; attribute is optional, the
        default value(s) is the concatenation of the name of the relationship
        in the owner side, &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt; (underscore), and the name of
        the primary key column in the owned side. In this example
        &lt;code class=&quot;literal&quot;&gt;company_id&lt;/code&gt; because the property name is
        &lt;code class=&quot;literal&quot;&gt;company&lt;/code&gt; and the column id of Company is
        &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;targetEntity&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CompanyImpl&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;COMP_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCompany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;company&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

        &lt;p&gt;You can also map a to one association through an association
        table. This association table described by the
        &lt;code class=&quot;literal&quot;&gt;@JoinTable&lt;/code&gt; annotation will contains a foreign key
        referencing back the entity table (through
        &lt;code class=&quot;literal&quot;&gt;@JoinTable.joinColumns&lt;/code&gt;) and a a foreign key
        referencing the target entity table (through
        &lt;code class=&quot;literal&quot;&gt;@JoinTable.inverseJoinColumns&lt;/code&gt;).&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Flight&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Flight_Company&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;joinColumns&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;FLIGHT_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inverseJoinColumns&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;COMP_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Company&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCompany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;company&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;You can use a SQL fragment to simulate a physical join column
          using the &lt;code class=&quot;classname&quot;&gt;@JoinColumnOrFormula&lt;/code&gt; /
          &lt;code class=&quot;classname&quot;&gt;@JoinColumnOrformulas&lt;/code&gt; annotations (just like
          you can use a SQL fragment to simulate a property column via the
          &lt;code class=&quot;classname&quot;&gt;@Formula&lt;/code&gt; annotation).&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumnOrFormula&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;formula&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;(firstname&amp;nbsp;+&amp;nbsp;&apos;&amp;nbsp;&apos;&amp;nbsp;+&amp;nbsp;lastname)&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOwner&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;person&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;

        &lt;p&gt;You can mark an association as mandatory by using the
        &lt;code class=&quot;literal&quot;&gt;optional=false&lt;/code&gt; attribute. We recommend to use Bean
        Validation&apos;s &lt;code class=&quot;classname&quot;&gt;@NotNull&lt;/code&gt; annotation as a better
        alternative however. As a consequence, the foreign key column(s) will
        be marked as not nullable (if possible).&lt;/p&gt;

        &lt;p&gt;When Hibernate cannot resolve the association because the
        expected associated element is not in database (wrong id on the
        association column), an exception is raised. This might be
        inconvenient for legacy and badly maintained schemas. You can ask
        Hibernate to ignore such elements instead of raising an exception
        using the &lt;code class=&quot;literal&quot;&gt;@NotFound&lt;/code&gt; annotation.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e3750&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 5.1. @NotFound annotation&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NotFoundAction&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;IGNORE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getParent&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Sometimes you want to delegate to your database the deletion of
        cascade when a given entity is deleted. In this case Hibernate
        generates a cascade delete constraint at the database level.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e3754&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 5.2. @OnDelete annotation&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OnDelete&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OnDeleteAction&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getParent&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Foreign key constraints, while generated by Hibernate, have a
        fairly unreadable name. You can override the constraint name using
        &lt;code class=&quot;literal&quot;&gt;@ForeignKey&lt;/code&gt;.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e3759&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 5.3. @ForeignKey annotation&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;FK_PARENT&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parent&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getParent&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;alter&amp;nbsp;table&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Child&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;add&amp;nbsp;constraint&amp;nbsp;FK_PARENT&amp;nbsp;foreign&amp;nbsp;key&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;parent_id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;references&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Parent&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Sometimes, you want to link one entity to an other not by the
        target entity primary key but by a different unique key. You can
        achieve that by referencing the unique key column(s) in
        &lt;code class=&quot;methodname&quot;&gt;@JoinColumn.referenceColumnName&lt;/code&gt;.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
class Person {
   @Id Integer personNumber;
   String firstName;
   @Column(name=&quot;I&quot;)
   String initial;
   String lastName;
}

@Entity
class Home {
   @ManyToOne
   @JoinColumns({
      @JoinColumn(name=&quot;first_name&quot;, referencedColumnName=&quot;firstName&quot;),
      @JoinColumn(name=&quot;init&quot;, referencedColumnName=&quot;I&quot;),
      @JoinColumn(name=&quot;last_name&quot;, referencedColumnName=&quot;lastName&quot;),
   })
   Person owner
}&lt;/pre&gt;

        &lt;p&gt;This is not encouraged however and should be reserved to legacy
        mappings.&lt;/p&gt;

        &lt;p&gt;In hbm.xml, mapping an association is similar. The main
        difference is that a &lt;code class=&quot;classname&quot;&gt;@OneToOne&lt;/code&gt; is mapped as
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one unique=&quot;true&quot;/&amp;gt;&lt;/code&gt;, let&apos;s dive into
        the subject.&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;manytoone1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;manytoone2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        class=&quot;ClassName&quot;                                  &lt;span class=&quot;co&quot; id=&quot;manytoone3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        cascade=&quot;cascade_style&quot;                            &lt;span class=&quot;co&quot; id=&quot;manytoone4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        fetch=&quot;join|select&quot;                                &lt;span class=&quot;co&quot; id=&quot;manytoone5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        update=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;manytoone6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;manytoone7&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        property-ref=&quot;propertyNameFromAssociatedClass&quot;     &lt;span class=&quot;co&quot; id=&quot;manytoone8&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;manytoone9&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
        unique=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;manytoone10&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
        not-null=&quot;true|false&quot;                              &lt;span class=&quot;co&quot; id=&quot;manytoone11&quot;&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;(10)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;true|false&quot;                       &lt;span class=&quot;co&quot; id=&quot;manytoone12&quot;&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;(11)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;proxy|no-proxy|false&quot;                        &lt;span class=&quot;co&quot; id=&quot;manytoone13&quot;&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;(12)&quot;/&gt;&lt;/span&gt;
        not-found=&quot;ignore|exception&quot;                       &lt;span class=&quot;co&quot; id=&quot;manytoone14&quot;&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;(13)&quot;/&gt;&lt;/span&gt;
        entity-name=&quot;EntityName&quot;                           &lt;span class=&quot;co&quot; id=&quot;manytoone15&quot;&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;(14)&quot;/&gt;&lt;/span&gt;
        formula=&quot;arbitrary SQL expression&quot;                 &lt;span class=&quot;co&quot; id=&quot;manytoone16&quot;&gt;&lt;img src=&quot;images/callouts/15.png&quot; alt=&quot;(15)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;
        embed-xml=&quot;true|false&quot;
        index=&quot;index_name&quot;
        unique_key=&quot;unique_key_id&quot;
        foreign-key=&quot;foreign_key_name&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of the property.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional): the name of the
              foreign key column. This can also be specified by nested
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element(s).&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; (optional - defaults to the
              property type determined by reflection): the name of the
              associated class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; (optional): specifies which
              operations should be cascaded from the parent object to the
              associated object.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt;): chooses between outer-join fetching
              or sequential select fetching.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;update, insert&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that the mapped columns
              should be included in SQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; and/or
              &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statements. Setting both to
              &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; allows a pure &quot;derived&quot; association
              whose value is initialized from another property that maps to
              the same column(s), or by a trigger or other application.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt; (optional): the name of a
              property of the associated class that is joined to this foreign
              key. If not specified, the primary key of the associated class
              is used.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
              accessing the property value.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;9&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional): enables the DDL
              generation of a unique constraint for the foreign-key column. By
              allowing this to be the target of a
              &lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt;, you can make the association
              multiplicity one-to-one.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt; (optional): enables the DDL
              generation of a nullability constraint for the foreign key
              columns.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;11&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that updates to this
              property do or do not require acquisition of the optimistic
              lock. In other words, it determines if a version increment
              should occur when this property is dirty.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;12&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt;): by default, single point associations
              are proxied. &lt;code class=&quot;literal&quot;&gt;lazy=&quot;no-proxy&quot;&lt;/code&gt; specifies that
              the property should be fetched lazily when the instance variable
              is first accessed. This requires build-time bytecode
              instrumentation. &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; specifies that
              the association will always be eagerly fetched.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;13&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;not-found&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;exception&lt;/code&gt;): specifies how foreign keys that
              reference missing rows will be handled.
              &lt;code class=&quot;literal&quot;&gt;ignore&lt;/code&gt; will treat a missing row as a null
              association.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;14&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt; (optional): the entity name
              of the associated class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/15.png&quot; alt=&quot;15&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): an SQL expression
              that defines the value for a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;computed&lt;/em&gt;&lt;/span&gt;
              foreign key.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;Setting a value of the &lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; attribute to
        any meaningful value other than &lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt; will propagate
        certain operations to the associated object. The meaningful values are
        divided into three categories. First, basic operations, which include:
        &lt;code class=&quot;literal&quot;&gt;persist, merge, delete, save-update, evict, replicate, lock
        and refresh&lt;/code&gt;; second, special values:
        &lt;code class=&quot;literal&quot;&gt;delete-orphan&lt;/code&gt;; and third,&lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt;
        comma-separated combinations of operation names:
        &lt;code class=&quot;literal&quot;&gt;cascade=&quot;persist,merge,evict&quot;&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all,delete-orphan&quot;&lt;/code&gt;. See &lt;a class=&quot;xref&quot; href=&quot;#objectstate-transitive&quot; title=&quot;11.11. Transitive persistence&quot;&gt;Section 11.11, âTransitive persistenceâ&lt;/a&gt; for a full explanation. Note that
        single valued, many-to-one and one-to-one, associations do not support
        orphan delete.&lt;/p&gt;

        &lt;p&gt;Here is an example of a typical &lt;code class=&quot;literal&quot;&gt;many-to-one&lt;/code&gt;
        declaration:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;product&quot; class=&quot;Product&quot; column=&quot;PRODUCT_ID&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt; attribute should only be
        used for mapping legacy data where a foreign key refers to a unique
        key of the associated table other than the primary key. This is a
        complicated and confusing relational model. For example, if the
        &lt;code class=&quot;literal&quot;&gt;Product&lt;/code&gt; class had a unique serial number that is
        not the primary key. The &lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; attribute controls
        Hibernate&apos;s DDL generation with the SchemaExport tool.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;serialNumber&quot; unique=&quot;true&quot; type=&quot;string&quot; column=&quot;SERIAL_NUMBER&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;Then the mapping for &lt;code class=&quot;literal&quot;&gt;OrderItem&lt;/code&gt; might
        use:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;product&quot; property-ref=&quot;serialNumber&quot; column=&quot;PRODUCT_SERIAL_NUMBER&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;This is not encouraged, however.&lt;/p&gt;

        &lt;p&gt;If the referenced unique key comprises multiple properties of
        the associated entity, you should map the referenced properties inside
        a named &lt;code class=&quot;literal&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

        &lt;p&gt;If the referenced unique key is the property of a component, you
        can specify a property path:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;owner&quot; property-ref=&quot;identity.ssn&quot; column=&quot;OWNER_SSN&quot;/&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.7.2. Sharing the primary key with the associated entity&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-onetoone&quot;/&gt;5.1.7.2. Sharing the primary key with the associated entity&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;The second approach is to ensure an entity and its associated
        entity share the same primary key. In this case the primary key column
        is also a foreign key and there is no extra column. These associations
        are always one to one.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e3878&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 5.4. One to One association&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MapsId&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Heart&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getHeart&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;heart&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Heart&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;Many people got confused by these primary key based one to one
          associations. They can only be lazily loaded if Hibernate knows that
          the other side of the association is always present. To indicate to
          Hibernate that it is the case, use
          &lt;code class=&quot;classname&quot;&gt;@OneToOne(optional=false)&lt;/code&gt;.&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;In hbm.xml, use the following mapping.&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-one
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;onetoone1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        class=&quot;ClassName&quot;                                  &lt;span class=&quot;co&quot; id=&quot;onetoone2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        cascade=&quot;cascade_style&quot;                            &lt;span class=&quot;co&quot; id=&quot;onetoone3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        constrained=&quot;true|false&quot;                           &lt;span class=&quot;co&quot; id=&quot;onetoone4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        fetch=&quot;join|select&quot;                                &lt;span class=&quot;co&quot; id=&quot;onetoone5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        property-ref=&quot;propertyNameFromAssociatedClass&quot;     &lt;span class=&quot;co&quot; id=&quot;onetoone6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;onetoone7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
        formula=&quot;any SQL expression&quot;                       &lt;span class=&quot;co&quot; id=&quot;onetoone8&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
        lazy=&quot;proxy|no-proxy|false&quot;                        &lt;span class=&quot;co&quot; id=&quot;onetoone9&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
        entity-name=&quot;EntityName&quot;                           &lt;span class=&quot;co&quot; id=&quot;onetoone10&quot;&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;(10)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name|@attribute-name|element/@attribute|.&quot;
        embed-xml=&quot;true|false&quot;
        foreign-key=&quot;foreign_key_name&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the name of the property.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; (optional - defaults to the
              property type determined by reflection): the name of the
              associated class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; (optional): specifies which
              operations should be cascaded from the parent object to the
              associated object.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;constrained&lt;/code&gt; (optional): specifies that
              a foreign key constraint on the primary key of the mapped table
              and references the table of the associated class. This option
              affects the order in which &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; and
              &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; are cascaded, and determines whether
              the association can be proxied. It is also used by the schema
              export tool.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt;): chooses between outer-join fetching
              or sequential select fetching.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt; (optional): the name of a
              property of the associated class that is joined to the primary
              key of this class. If not specified, the primary key of the
              associated class is used.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
              accessing the property value.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): almost all
              one-to-one associations map to the primary key of the owning
              entity. If this is not the case, you can specify another column,
              columns or expression to join on using an SQL formula. See
              &lt;code class=&quot;literal&quot;&gt;org.hibernate.test.onetooneformula&lt;/code&gt; for an
              example.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;9&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt;): by default, single point associations
              are proxied. &lt;code class=&quot;literal&quot;&gt;lazy=&quot;no-proxy&quot;&lt;/code&gt; specifies that
              the property should be fetched lazily when the instance variable
              is first accessed. It requires build-time bytecode
              instrumentation. &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; specifies that
              the association will always be eagerly fetched. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Note
              that if &lt;code class=&quot;literal&quot;&gt;constrained=&quot;false&quot;&lt;/code&gt;, proxying is
              impossible and Hibernate will eagerly fetch the
              association&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt; (optional): the entity name
              of the associated class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;Primary key associations do not need an extra table column. If
        two rows are related by the association, then the two table rows share
        the same primary key value. To relate two objects by a primary key
        association, ensure that they are assigned the same identifier
        value.&lt;/p&gt;

        &lt;p&gt;For a primary key association, add the following mappings to
        &lt;code class=&quot;literal&quot;&gt;Employee&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;
        respectively:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-one name=&quot;person&quot; class=&quot;Person&quot;/&amp;gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-one name=&quot;employee&quot; class=&quot;Employee&quot; constrained=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;Ensure that the primary keys of the related rows in the PERSON
        and EMPLOYEE tables are equal. You use a special Hibernate identifier
        generation strategy called &lt;code class=&quot;literal&quot;&gt;foreign&lt;/code&gt;:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;person&quot; table=&quot;PERSON&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;PERSON_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;foreign&quot;&amp;gt;
            &amp;lt;param name=&quot;property&quot;&amp;gt;employee&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    ...
    &amp;lt;one-to-one name=&quot;employee&quot;
        class=&quot;Employee&quot;
        constrained=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;A newly saved instance of &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; is assigned
        the same primary key value as the &lt;code class=&quot;literal&quot;&gt;Employee&lt;/code&gt; instance
        referred with the &lt;code class=&quot;literal&quot;&gt;employee&lt;/code&gt; property of that
        &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.8. Natural-id&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-naturalid&quot;/&gt;5.1.8. Natural-id&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Although we recommend the use of surrogate keys as primary keys,
      you should try to identify natural keys for all entities. A natural key
      is a property or combination of properties that is unique and non-null.
      It is also immutable. Map the properties of the natural key as
      &lt;code class=&quot;classname&quot;&gt;@NaturalId&lt;/code&gt; or map them inside the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;natural-id&amp;gt;&lt;/code&gt; element. Hibernate will generate
      the necessary unique key and nullability constraints and, as a result,
      your mapping will be more self-documenting.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Citizen&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NaturalId&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;state&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NaturalId&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;ssn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;and&amp;nbsp;later&amp;nbsp;on&amp;nbsp;query&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;results&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;s&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;createCriteria&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Citizen&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Restrictions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;naturalId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;ssn&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;state&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;ste&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;Or in XML,&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;natural-id mutable=&quot;true|false&quot;/&amp;gt;
        &amp;lt;property ... /&amp;gt;
        &amp;lt;many-to-one ... /&amp;gt;
        ......
&amp;lt;/natural-id&amp;gt;&lt;/pre&gt;

      &lt;p&gt;It is recommended that you implement &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt;
      and &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; to compare the natural key properties
      of the entity.&lt;/p&gt;

      &lt;p&gt;This mapping is not intended for use with entities that have
      natural primary keys.&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;mutable&lt;/code&gt; (optional - defaults to
          &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): by default, natural identifier properties
          are assumed to be immutable (constant).&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.9. Any&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-types-anymapping&quot;/&gt;5.1.9. Any&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;There is one more type of property mapping. The
      &lt;code class=&quot;classname&quot;&gt;@Any&lt;/code&gt; mapping defines a polymorphic association to
      classes from multiple tables. This type of mapping requires more than
      one column. The first column contains the type of the associated entity.
      The remaining columns contain the identifier. It is impossible to
      specify a foreign key constraint for this kind of association. This is
      not the usual way of mapping polymorphic associations and you should use
      this only in special cases. For example, for audit logs, user session
      data, etc.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;classname&quot;&gt;@Any&lt;/code&gt; annotation describes the column
      holding the metadata information. To link the value of the metadata
      information and an actual entity type, The
      &lt;code class=&quot;classname&quot;&gt;@AnyDef&lt;/code&gt; and &lt;code class=&quot;classname&quot;&gt;@AnyDefs&lt;/code&gt;
      annotations are used. The &lt;code class=&quot;literal&quot;&gt;metaType&lt;/code&gt; attribute allows
      the application to specify a custom type that maps database column
      values to persistent classes that have identifier properties of the type
      specified by &lt;code class=&quot;literal&quot;&gt;idType&lt;/code&gt;. You must specify the mapping
      from values of the &lt;code class=&quot;literal&quot;&gt;metaType&lt;/code&gt; to class names.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Any&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;metaColumn&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property_type&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fetch&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;EAGER&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AnyMetaDef&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;idType&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;metaType&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;metaValues&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MetaValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;targetEntity&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;StringProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MetaValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;targetEntity&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;IntegerProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getMainProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;mainProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;Note that &lt;code class=&quot;classname&quot;&gt;@AnyDef&lt;/code&gt; can be mutualized and
      reused. It is recommended to place it as a package metadata in this
      case.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;on&amp;nbsp;a&amp;nbsp;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;package&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AnyMetaDef&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;idType&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;metaType&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;metaValues&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MetaValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;targetEntity&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;StringProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MetaValue&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;value&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;targetEntity&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;IntegerProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;in&amp;nbsp;a&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;metaDef&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;metaColumn&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property_type&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fetch&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;EAGER&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;property_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Property&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getMainProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;mainProperty&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;

      &lt;p&gt;The hbm.xml equivalent is:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;any name=&quot;being&quot; id-type=&quot;long&quot; meta-type=&quot;string&quot;&amp;gt;
    &amp;lt;meta-value value=&quot;TBL_ANIMAL&quot; class=&quot;Animal&quot;/&amp;gt;
    &amp;lt;meta-value value=&quot;TBL_HUMAN&quot; class=&quot;Human&quot;/&amp;gt;
    &amp;lt;meta-value value=&quot;TBL_ALIEN&quot; class=&quot;Alien&quot;/&amp;gt;
    &amp;lt;column name=&quot;table_name&quot;/&amp;gt;
    &amp;lt;column name=&quot;id&quot;/&amp;gt;
&amp;lt;/any&amp;gt;&lt;/pre&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;You cannot mutualize the metadata in hbm.xml as you can in
        annotations.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;any
        name=&quot;propertyName&quot;                                &lt;span class=&quot;co&quot; id=&quot;any1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        id-type=&quot;idtypename&quot;                               &lt;span class=&quot;co&quot; id=&quot;any2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        meta-type=&quot;metatypename&quot;                           &lt;span class=&quot;co&quot; id=&quot;any3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        cascade=&quot;cascade_style&quot;                            &lt;span class=&quot;co&quot; id=&quot;any4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        access=&quot;field|property|ClassName&quot;                  &lt;span class=&quot;co&quot; id=&quot;any5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;true|false&quot;                       &lt;span class=&quot;co&quot; id=&quot;any6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
&amp;gt;
        &amp;lt;meta-value ... /&amp;gt;
        &amp;lt;meta-value ... /&amp;gt;
        .....
        &amp;lt;column .... /&amp;gt;
        &amp;lt;column .... /&amp;gt;
        .....
&amp;lt;/any&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the property name.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;id-type&lt;/code&gt;: the identifier type.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;meta-type&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt;): any type that is allowed for a
            discriminator mapping.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; (optional- defaults to
            &lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;): the cascade style.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
            accessing the property value.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that updates to this property
            either do or do not require acquisition of the optimistic lock. It
            defines whether a version increment should occur if this property
            is dirty.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.10. Properties&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-properties&quot;/&gt;5.1.10. Properties&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; element allows the
      definition of a named, logical grouping of the properties of a class.
      The most important use of the construct is that it allows a combination
      of properties to be the target of a &lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt;. It
      is also a convenient way to define a multi-column unique constraint. For
      example:&lt;/p&gt;

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;properties
        name=&quot;logicalName&quot;                                 &lt;span class=&quot;co&quot; id=&quot;properties1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        insert=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;properties2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        update=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;properties3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        optimistic-lock=&quot;true|false&quot;                       &lt;span class=&quot;co&quot; id=&quot;properties4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        unique=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;properties5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
&amp;gt;

        &amp;lt;property ...../&amp;gt;
        &amp;lt;many-to-one .... /&amp;gt;
        ........
&amp;lt;/properties&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the logical name of the grouping.
            It is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; an actual property name.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt;: do the mapped columns appear in
            SQL &lt;code class=&quot;literal&quot;&gt;INSERTs&lt;/code&gt;?&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt;: do the mapped columns appear in
            SQL &lt;code class=&quot;literal&quot;&gt;UPDATEs&lt;/code&gt;?&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that updates to these
            properties either do or do not require acquisition of the
            optimistic lock. It determines if a version increment should occur
            when these properties are dirty.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): specifies that a unique constraint
            exists upon all mapped columns of the component.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

      &lt;p&gt;For example, if we have the following
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;properties&amp;gt;&lt;/code&gt; mapping:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;personNumber&quot;/&amp;gt;

    ...
    &amp;lt;properties name=&quot;name&quot;
            unique=&quot;true&quot; update=&quot;false&quot;&amp;gt;
        &amp;lt;property name=&quot;firstName&quot;/&amp;gt;
        &amp;lt;property name=&quot;initial&quot;/&amp;gt;
        &amp;lt;property name=&quot;lastName&quot;/&amp;gt;
    &amp;lt;/properties&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;You might have some legacy data association that refers to this
      unique key of the &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; table, instead of to the
      primary key:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;owner&quot;
         class=&quot;Person&quot; property-ref=&quot;name&quot;&amp;gt;
    &amp;lt;column name=&quot;firstName&quot;/&amp;gt;
    &amp;lt;column name=&quot;initial&quot;/&amp;gt;
    &amp;lt;column name=&quot;lastName&quot;/&amp;gt;
&amp;lt;/many-to-one&amp;gt;&lt;/pre&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;When using annotations as a mapping strategy, such construct is
        not necessary as the binding between a column and its related column
        on the associated table is done directly&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; class=&quot;&quot;&gt;@Entity
class Person {
   @Id Integer personNumber;
   String firstName;
   @Column(name=&quot;I&quot;)
   String initial;
   String lastName;
}

@Entity
class Home {
   @ManyToOne
   @JoinColumns({
      @JoinColumn(name=&quot;first_name&quot;, referencedColumnName=&quot;firstName&quot;),
      @JoinColumn(name=&quot;init&quot;, referencedColumnName=&quot;I&quot;),
      @JoinColumn(name=&quot;last_name&quot;, referencedColumnName=&quot;lastName&quot;),
   })
   Person owner
}&lt;/pre&gt;
      &lt;/div&gt;

      &lt;p&gt;The use of this outside the context of mapping legacy data is not
      recommended.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.1.11. Some hbm.xml specificities&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e4065&quot;/&gt;5.1.11. Some hbm.xml specificities&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The hbm.xml structure has some specificities naturally not present
      when using annotations, let&apos;s describe them briefly.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.11.1. Doctype&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-doctype&quot;/&gt;5.1.11.1. Doctype&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;All XML mappings should declare the doctype shown. The actual
        DTD can be found at the URL above, in the directory
        &lt;code class=&quot;literal&quot;&gt;hibernate-x.x.x/src/org/hibernate &lt;/code&gt;, or in
        &lt;code class=&quot;literal&quot;&gt;hibernate3.jar&lt;/code&gt;. Hibernate will always look for the
        DTD in its classpath first. If you experience lookups of the DTD using
        an Internet connection, check the DTD declaration against the contents
        of your classpath.&lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;5.1.11.1.1. EntityResolver&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-entity-resolution&quot;/&gt;5.1.11.1.1. EntityResolver&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          

          &lt;p&gt;Hibernate will first attempt to resolve DTDs in its classpath.
          It does this is by registering a custom
          &lt;code class=&quot;literal&quot;&gt;org.xml.sax.EntityResolver&lt;/code&gt; implementation with
          the SAXReader it uses to read in the xml files. This custom
          &lt;code class=&quot;literal&quot;&gt;EntityResolver&lt;/code&gt; recognizes two different systemId
          namespaces:&lt;/p&gt;

          &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;a &lt;code class=&quot;literal&quot;&gt;hibernate namespace&lt;/code&gt; is recognized
              whenever the resolver encounters a systemId starting with
              &lt;code class=&quot;literal&quot;&gt;http://www.hibernate.org/dtd/&lt;/code&gt;. The resolver
              attempts to resolve these entities via the classloader which
              loaded the Hibernate classes.&lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
              &lt;p&gt;a &lt;code class=&quot;literal&quot;&gt;user namespace&lt;/code&gt; is recognized whenever
              the resolver encounters a systemId using a
              &lt;code class=&quot;literal&quot;&gt;classpath://&lt;/code&gt; URL protocol. The resolver will
              attempt to resolve these entities via (1) the current thread
              context classloader and (2) the classloader which loaded the
              Hibernate classes.&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

          &lt;p&gt;The following is an example of utilizing user
          namespacing:&lt;/p&gt;

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;XML&quot;&gt;&lt;!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) --&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_processing_instruction&quot;&gt;&amp;lt;?xml&amp;nbsp;version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;DOCTYPE&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;-//Hibernate/Hibernate&amp;nbsp;Mapping&amp;nbsp;DTD&amp;nbsp;3.0//EN&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;[&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;ENTITY&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;SYSTEM&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;classpath://your/domain/types.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;your.domain&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;MyEntity&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;my-custom-id-type&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;amp;types;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;hibernate-mapping&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/pre&gt;

          &lt;p&gt;Where &lt;code class=&quot;literal&quot;&gt;types.xml&lt;/code&gt; is a resource in the
          &lt;code class=&quot;literal&quot;&gt;your.domain&lt;/code&gt; package and contains a custom &lt;a class=&quot;link&quot; href=&quot;#mapping-types-custom&quot; title=&quot;5.2.3. Custom value types&quot;&gt;typedef&lt;/a&gt;.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.11.2. Hibernate-mapping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-mapping&quot;/&gt;5.1.11.2. Hibernate-mapping&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;This element has several optional attributes. The
        &lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;catalog&lt;/code&gt; attributes
        specify that tables referred to in this mapping belong to the named
        schema and/or catalog. If they are specified, tablenames will be
        qualified by the given schema and catalog names. If they are missing,
        tablenames will be unqualified. The &lt;code class=&quot;literal&quot;&gt;default-cascade&lt;/code&gt;
        attribute specifies what cascade style should be assumed for
        properties and collections that do not specify a
        &lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; attribute. By default, the
        &lt;code class=&quot;literal&quot;&gt;auto-import&lt;/code&gt; attribute allows you to use unqualified
        class names in the query language.&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping
         schema=&quot;schemaName&quot;                               &lt;span class=&quot;co&quot; id=&quot;hm1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
         catalog=&quot;catalogName&quot;                             &lt;span class=&quot;co&quot; id=&quot;hm2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
         default-cascade=&quot;cascade_style&quot;                   &lt;span class=&quot;co&quot; id=&quot;hm3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
         default-access=&quot;field|property|ClassName&quot;         &lt;span class=&quot;co&quot; id=&quot;hm4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
         default-lazy=&quot;true|false&quot;                         &lt;span class=&quot;co&quot; id=&quot;hm5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
         auto-import=&quot;true|false&quot;                          &lt;span class=&quot;co&quot; id=&quot;hm6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
         package=&quot;package.name&quot;                            &lt;span class=&quot;co&quot; id=&quot;hm7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
 /&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt; (optional): the name of a
              database schema.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;catalog&lt;/code&gt; (optional): the name of a
              database catalog.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;default-cascade&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;): a default cascade style.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;default-access&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate should use
              for accessing all properties. It can be a custom implementation
              of &lt;code class=&quot;literal&quot;&gt;PropertyAccessor&lt;/code&gt;.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;default-lazy&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): the default value for unspecified
              &lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; attributes of class and collection
              mappings.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;auto-import&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies whether we can use
              unqualified class names of classes in this mapping in the query
              language.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;package&lt;/code&gt; (optional): specifies a package
              prefix to use for unqualified class names in the mapping
              document.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;If you have two persistent classes with the same unqualified
        name, you should set &lt;code class=&quot;literal&quot;&gt;auto-import=&quot;false&quot;&lt;/code&gt;. An
        exception will result if you attempt to assign two classes to the same
        &quot;imported&quot; name.&lt;/p&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;hibernate-mapping&lt;/code&gt; element allows you to
        nest several persistent &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; mappings, as
        shown above. It is, however, good practice (and expected by some
        tools) to map only a single persistent class, or a single class
        hierarchy, in one mapping file and name it after the persistent
        superclass. For example, &lt;code class=&quot;literal&quot;&gt;Cat.hbm.xml&lt;/code&gt;,
        &lt;code class=&quot;literal&quot;&gt;Dog.hbm.xml&lt;/code&gt;, or if using inheritance,
        &lt;code class=&quot;literal&quot;&gt;Animal.hbm.xml&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.11.3. Key&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-key&quot;/&gt;5.1.11.3. Key&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; element is featured a few
        times within this guide. It appears anywhere the parent mapping
        element defines a join to a new table that references the primary key
        of the original table. It also defines the foreign key in the joined
        table:&lt;/p&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;key
        column=&quot;columnname&quot;                                &lt;span class=&quot;co&quot; id=&quot;key1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        on-delete=&quot;noaction|cascade&quot;                       &lt;span class=&quot;co&quot; id=&quot;key2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        property-ref=&quot;propertyName&quot;                        &lt;span class=&quot;co&quot; id=&quot;key3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        not-null=&quot;true|false&quot;                              &lt;span class=&quot;co&quot; id=&quot;key4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
        update=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;key5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
        unique=&quot;true|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;key6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional): the name of the
              foreign key column. This can also be specified by nested
              &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element(s).&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;on-delete&lt;/code&gt; (optional - defaults to
              &lt;code class=&quot;literal&quot;&gt;noaction&lt;/code&gt;): specifies whether the foreign key
              constraint has database-level cascade delete enabled.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;property-ref&lt;/code&gt; (optional): specifies that
              the foreign key refers to columns that are not the primary key
              of the original table. It is provided for legacy data.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt; (optional): specifies that the
              foreign key columns are not nullable. This is implied whenever
              the foreign key is also part of the primary key.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt; (optional): specifies that the
              foreign key should never be updated. This is implied whenever
              the foreign key is also part of the primary key.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; (optional): specifies that the
              foreign key should have a unique constraint. This is implied
              whenever the foreign key is also the primary key.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;p&gt;For systems where delete performance is important, we recommend
        that all keys should be defined
        &lt;code class=&quot;literal&quot;&gt;on-delete=&quot;cascade&quot;&lt;/code&gt;. Hibernate uses a
        database-level &lt;code class=&quot;literal&quot;&gt;ON CASCADE DELETE&lt;/code&gt; constraint,
        instead of many individual &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; statements. Be
        aware that this feature bypasses Hibernate&apos;s usual optimistic locking
        strategy for versioned data.&lt;/p&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt;
        attributes are useful when mapping a unidirectional one-to-many
        association. If you map a unidirectional one-to-many association to a
        non-nullable foreign key, you &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;must&lt;/em&gt;&lt;/span&gt; declare the
        key column using &lt;code class=&quot;literal&quot;&gt;&amp;lt;key
        not-null=&quot;true&quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.11.4. Import&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-declaration-import&quot;/&gt;5.1.11.4. Import&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;If your application has two persistent classes with the same
        name, and you do not want to specify the fully qualified package name
        in Hibernate queries, classes can be &quot;imported&quot; explicitly, rather
        than relying upon &lt;code class=&quot;literal&quot;&gt;auto-import=&quot;true&quot;&lt;/code&gt;. You can also
        import classes and interfaces that are not explicitly mapped:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;import class=&quot;java.lang.Object&quot; rename=&quot;Universe&quot;/&amp;gt;&lt;/pre&gt;

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;import
        class=&quot;ClassName&quot;                                  &lt;span class=&quot;co&quot; id=&quot;import1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        rename=&quot;ShortName&quot;                                 &lt;span class=&quot;co&quot; id=&quot;import2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;: the fully qualified class name
              of any Java class.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;rename&lt;/code&gt; (optional - defaults to the
              unqualified class name): a name that can be used in the query
              language.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;This feature is unique to hbm.xml and is not supported in
          annotations.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;5.1.11.5. Column and formula elements&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-column&quot;/&gt;5.1.11.5. Column and formula elements&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Mapping elements which accept a &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt;
        attribute will alternatively accept a
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; subelement. Likewise,
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;formula&amp;gt;&lt;/code&gt; is an alternative to the
        &lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; attribute. For example:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;column
        name=&quot;column_name&quot;
        length=&quot;N&quot;
        precision=&quot;N&quot;
        scale=&quot;N&quot;
        not-null=&quot;true|false&quot;
        unique=&quot;true|false&quot;
        unique-key=&quot;multicolumn_unique_key_name&quot;
        index=&quot;index_name&quot;
        sql-type=&quot;sql_type_name&quot;
        check=&quot;SQL expression&quot;
        default=&quot;SQL expression&quot;
        read=&quot;SQL expression&quot;
        write=&quot;SQL expression&quot;/&amp;gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;formula&amp;gt;SQL expression&amp;lt;/formula&amp;gt;&lt;/pre&gt;

        &lt;p&gt;Most of the attributes on &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; provide a
        means of tailoring the DDL during automatic schema generation. The
        &lt;code class=&quot;literal&quot;&gt;read&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;write&lt;/code&gt; attributes allow
        you to specify custom SQL that Hibernate will use to access the
        column&apos;s value. For more on this, see the discussion of &lt;a class=&quot;link&quot; href=&quot;#mapping-column-read-and-write&quot; title=&quot;5.6. Column transformers: read and write expressions&quot;&gt;column read and write
        expressions&lt;/a&gt;.&lt;/p&gt;

        &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt;
        elements can even be combined within the same property or association
        mapping to express, for example, exotic join conditions.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;homeAddress&quot; class=&quot;Address&quot;
        insert=&quot;false&quot; update=&quot;false&quot;&amp;gt;
    &amp;lt;column name=&quot;person_id&quot; not-null=&quot;true&quot; length=&quot;10&quot;/&amp;gt;
    &amp;lt;formula&amp;gt;&apos;MAILING&apos;&amp;lt;/formula&amp;gt;
&amp;lt;/many-to-one&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.2. Hibernate types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-types&quot;/&gt;5.2. Hibernate types&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;5.2.1. Entities and values&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-types-entitiesvalues&quot;/&gt;5.2.1. Entities and values&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;In relation to the persistence service, Java language-level
      objects are classified into two groups:&lt;/p&gt;

      &lt;p&gt;An &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;entity&lt;/em&gt;&lt;/span&gt; exists independently of any other
      objects holding references to the entity. Contrast this with the usual
      Java model, where an unreferenced object is garbage collected. Entities
      must be explicitly saved and deleted. Saves and deletions, however, can
      be &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;cascaded&lt;/em&gt;&lt;/span&gt; from a parent entity to its children.
      This is different from the ODMG model of object persistence by
      reachability and corresponds more closely to how application objects are
      usually used in large systems. Entities support circular and shared
      references. They can also be versioned.&lt;/p&gt;

      &lt;p&gt;An entity&apos;s persistent state consists of references to other
      entities and instances of &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;value&lt;/em&gt;&lt;/span&gt; types. Values are
      primitives: collections (not what is inside a collection), components
      and certain immutable objects. Unlike entities, values in particular
      collections and components, &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;are&lt;/em&gt;&lt;/span&gt; persisted and
      deleted by reachability. Since value objects and primitives are
      persisted and deleted along with their containing entity, they cannot be
      independently versioned. Values have no independent identity, so they
      cannot be shared by two entities or collections.&lt;/p&gt;

      &lt;p&gt;Until now, we have been using the term &quot;persistent class&quot; to refer
      to entities. We will continue to do that. Not all user-defined classes
      with a persistent state, however, are entities. A
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;component&lt;/em&gt;&lt;/span&gt; is a user-defined class with value
      semantics. A Java property of type &lt;code class=&quot;literal&quot;&gt;java.lang.String&lt;/code&gt;
      also has value semantics. Given this definition, all types (classes)
      provided by the JDK have value type semantics in Java, while
      user-defined types can be mapped with entity or value type semantics.
      This decision is up to the application developer. An entity class in a
      domain model will normally have shared references to a single instance
      of that class, while composition or aggregation usually translates to a
      value type.&lt;/p&gt;

      &lt;p&gt;We will revisit both concepts throughout this reference
      guide.&lt;/p&gt;

      &lt;p&gt;The challenge is to map the Java type system, and the developers&apos;
      definition of entities and value types, to the SQL/database type system.
      The bridge between both systems is provided by Hibernate. For entities,
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt;
      and so on are used. For value types we use
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;property&amp;gt;&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt;etc., that usually have a
      &lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; attribute. The value of this attribute is the
      name of a Hibernate &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;mapping type&lt;/em&gt;&lt;/span&gt;. Hibernate
      provides a range of mappings for standard JDK value types out of the
      box. You can write your own mapping types and implement your own custom
      conversion strategies.&lt;/p&gt;

      &lt;p&gt;With the exception of collections, all built-in Hibernate types
      support null semantics.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.2.2. Basic value types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-types-basictypes&quot;/&gt;5.2.2. Basic value types&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The built-in &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;basic mapping types&lt;/em&gt;&lt;/span&gt; can be
      roughly categorized into the following: &lt;/p&gt;&lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;integer, long, short, float, double, character,
            byte, boolean, yes_no, true_false&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings from Java primitives or wrapper classes to
              appropriate (vendor-specific) SQL column types.
              &lt;code class=&quot;literal&quot;&gt;boolean, yes_no&lt;/code&gt; and
              &lt;code class=&quot;literal&quot;&gt;true_false&lt;/code&gt; are all alternative encodings for
              a Java &lt;code class=&quot;literal&quot;&gt;boolean&lt;/code&gt; or
              &lt;code class=&quot;literal&quot;&gt;java.lang.Boolean&lt;/code&gt;.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;A type mapping from &lt;code class=&quot;literal&quot;&gt;java.lang.String&lt;/code&gt; to
              &lt;code class=&quot;literal&quot;&gt;VARCHAR&lt;/code&gt; (or Oracle
              &lt;code class=&quot;literal&quot;&gt;VARCHAR2&lt;/code&gt;).&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;date, time, timestamp&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings from &lt;code class=&quot;literal&quot;&gt;java.util.Date&lt;/code&gt; and
              its subclasses to SQL types &lt;code class=&quot;literal&quot;&gt;DATE&lt;/code&gt;,
              &lt;code class=&quot;literal&quot;&gt;TIME&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;TIMESTAMP&lt;/code&gt; (or
              equivalent).&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;calendar, calendar_date&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings from &lt;code class=&quot;literal&quot;&gt;java.util.Calendar&lt;/code&gt;
              to SQL types &lt;code class=&quot;literal&quot;&gt;TIMESTAMP&lt;/code&gt; and
              &lt;code class=&quot;literal&quot;&gt;DATE&lt;/code&gt; (or equivalent).&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;big_decimal, big_integer&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings from &lt;code class=&quot;literal&quot;&gt;java.math.BigDecimal&lt;/code&gt;
              and &lt;code class=&quot;literal&quot;&gt;java.math.BigInteger&lt;/code&gt; to
              &lt;code class=&quot;literal&quot;&gt;NUMERIC&lt;/code&gt; (or Oracle
              &lt;code class=&quot;literal&quot;&gt;NUMBER&lt;/code&gt;).&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;locale, timezone, currency&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings from &lt;code class=&quot;literal&quot;&gt;java.util.Locale&lt;/code&gt;,
              &lt;code class=&quot;literal&quot;&gt;java.util.TimeZone&lt;/code&gt; and
              &lt;code class=&quot;literal&quot;&gt;java.util.Currency&lt;/code&gt; to
              &lt;code class=&quot;literal&quot;&gt;VARCHAR&lt;/code&gt; (or Oracle
              &lt;code class=&quot;literal&quot;&gt;VARCHAR2&lt;/code&gt;). Instances of
              &lt;code class=&quot;literal&quot;&gt;Locale&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Currency&lt;/code&gt; are
              mapped to their ISO codes. Instances of
              &lt;code class=&quot;literal&quot;&gt;TimeZone&lt;/code&gt; are mapped to their
              &lt;code class=&quot;literal&quot;&gt;ID&lt;/code&gt;.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;A type mapping from &lt;code class=&quot;literal&quot;&gt;java.lang.Class&lt;/code&gt; to
              &lt;code class=&quot;literal&quot;&gt;VARCHAR&lt;/code&gt; (or Oracle
              &lt;code class=&quot;literal&quot;&gt;VARCHAR2&lt;/code&gt;). A &lt;code class=&quot;literal&quot;&gt;Class&lt;/code&gt; is
              mapped to its fully qualified name.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;binary&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps byte arrays to an appropriate SQL binary type.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;text&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps long Java strings to a SQL &lt;code class=&quot;literal&quot;&gt;LONGVARCHAR&lt;/code&gt; or
              &lt;code class=&quot;literal&quot;&gt;TEXT&lt;/code&gt; type.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;image&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps long byte arrays to a SQL &lt;code class=&quot;literal&quot;&gt;LONGVARBINARY&lt;/code&gt;.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;serializable&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps serializable Java types to an appropriate SQL binary
              type. You can also indicate the Hibernate type
              &lt;code class=&quot;literal&quot;&gt;serializable&lt;/code&gt; with the name of a serializable
              Java class or interface that does not default to a basic
              type.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;clob, blob&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings for the JDBC classes
              &lt;code class=&quot;literal&quot;&gt;java.sql.Clob&lt;/code&gt; and
              &lt;code class=&quot;literal&quot;&gt;java.sql.Blob&lt;/code&gt;. These types can be
              inconvenient for some applications, since the blob or clob
              object cannot be reused outside of a transaction. Driver support
              is patchy and inconsistent.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;materialized_clob&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps long Java strings to a SQL &lt;code class=&quot;literal&quot;&gt;CLOB&lt;/code&gt; 
              type. When read, the &lt;code class=&quot;literal&quot;&gt;CLOB&lt;/code&gt; value is
              immediately materialized into a Java string. Some drivers 
              require the &lt;code class=&quot;literal&quot;&gt;CLOB&lt;/code&gt; value to be read within
              a transaction. Once materialized, the Java string is 
              available outside of the transaction.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;materialized_blob&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Maps long Java byte arrays to a SQL &lt;code class=&quot;literal&quot;&gt;BLOB&lt;/code&gt; 
              type. When read, the &lt;code class=&quot;literal&quot;&gt;BLOB&lt;/code&gt; value is
              immediately materialized into a byte array. Some drivers 
              require the &lt;code class=&quot;literal&quot;&gt;BLOB&lt;/code&gt; value to be read within
              a transaction. Once materialized, the byte array is 
              available outside of the transaction.&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;literal&quot;&gt;imm_date, imm_time, imm_timestamp, imm_calendar,
            imm_calendar_date, imm_serializable, imm_binary&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;Type mappings for what are considered mutable Java types.
              This is where Hibernate makes certain optimizations appropriate
              only for immutable Java types, and the application treats the
              object as immutable. For example, you should not call
              &lt;code class=&quot;literal&quot;&gt;Date.setTime()&lt;/code&gt; for an instance mapped as
              &lt;code class=&quot;literal&quot;&gt;imm_timestamp&lt;/code&gt;. To change the value of the
              property, and have that change made persistent, the application
              must assign a new, nonidentical, object to the property.&lt;/p&gt;
            &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

      &lt;p&gt;Unique identifiers of entities and collections can be of any basic
      type except &lt;code class=&quot;literal&quot;&gt;binary&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;blob&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;clob&lt;/code&gt;. Composite identifiers are also allowed. See
      below for more information.&lt;/p&gt;

      &lt;p&gt;The basic value types have corresponding &lt;code class=&quot;literal&quot;&gt;Type&lt;/code&gt;
      constants defined on &lt;code class=&quot;literal&quot;&gt;org.hibernate.Hibernate&lt;/code&gt;. For
      example, &lt;code class=&quot;literal&quot;&gt;Hibernate.STRING&lt;/code&gt; represents the
      &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt; type.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;5.2.3. Custom value types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-types-custom&quot;/&gt;5.2.3. Custom value types&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;It is relatively easy for developers to create their own value
      types. For example, you might want to persist properties of type
      &lt;code class=&quot;literal&quot;&gt;java.lang.BigInteger&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;VARCHAR&lt;/code&gt;
      columns. Hibernate does not provide a built-in type for this. Custom
      types are not limited to mapping a property, or collection element, to a
      single table column. So, for example, you might have a Java property
      &lt;code class=&quot;literal&quot;&gt;getName()&lt;/code&gt;/&lt;code class=&quot;literal&quot;&gt;setName()&lt;/code&gt; of type
      &lt;code class=&quot;literal&quot;&gt;java.lang.String&lt;/code&gt; that is persisted to the columns
      &lt;code class=&quot;literal&quot;&gt;FIRST_NAME&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;INITIAL&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;SURNAME&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;To implement a custom type, implement either
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.UserType&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.CompositeUserType&lt;/code&gt; and declare
      properties using the fully qualified classname of the type. View
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.test.DoubleStringType&lt;/code&gt; to see the kind
      of things that are possible.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;twoStrings&quot; type=&quot;org.hibernate.test.DoubleStringType&quot;&amp;gt;
    &amp;lt;column name=&quot;first_string&quot;/&amp;gt;
    &amp;lt;column name=&quot;second_string&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

      &lt;p&gt;Notice the use of &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; tags to map a
      property to multiple columns.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;CompositeUserType&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;EnhancedUserType&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;UserCollectionType&lt;/code&gt;, and
      &lt;code class=&quot;literal&quot;&gt;UserVersionType&lt;/code&gt; interfaces provide support for more
      specialized uses.&lt;/p&gt;

      &lt;p&gt;You can even supply parameters to a &lt;code class=&quot;literal&quot;&gt;UserType&lt;/code&gt; in
      the mapping file. To do this, your &lt;code class=&quot;literal&quot;&gt;UserType&lt;/code&gt; must
      implement the
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.usertype.ParameterizedType&lt;/code&gt; interface.
      To supply parameters to your custom type, you can use the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;type&amp;gt;&lt;/code&gt; element in your mapping files.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;priority&quot;&amp;gt;
    &amp;lt;type name=&quot;com.mycompany.usertypes.DefaultValueIntegerType&quot;&amp;gt;
        &amp;lt;param name=&quot;default&quot;&amp;gt;0&amp;lt;/param&amp;gt;
    &amp;lt;/type&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;UserType&lt;/code&gt; can now retrieve the value for the
      parameter named &lt;code class=&quot;literal&quot;&gt;default&lt;/code&gt; from the
      &lt;code class=&quot;literal&quot;&gt;Properties&lt;/code&gt; object passed to it.&lt;/p&gt;

      &lt;p&gt;If you regularly use a certain &lt;code class=&quot;literal&quot;&gt;UserType&lt;/code&gt;, it is
      useful to define a shorter name for it. You can do this using the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;typedef&amp;gt;&lt;/code&gt; element. Typedefs assign a name to a
      custom type, and can also contain a list of default parameter values if
      the type is parameterized.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;typedef class=&quot;com.mycompany.usertypes.DefaultValueIntegerType&quot; name=&quot;default_zero&quot;&amp;gt;
    &amp;lt;param name=&quot;default&quot;&amp;gt;0&amp;lt;/param&amp;gt;
&amp;lt;/typedef&amp;gt;&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;priority&quot; type=&quot;default_zero&quot;/&amp;gt;&lt;/pre&gt;

      &lt;p&gt;It is also possible to override the parameters supplied in a
      typedef on a case-by-case basis by using type parameters on the property
      mapping.&lt;/p&gt;

      &lt;p&gt;Even though Hibernate&apos;s rich range of built-in types and support
      for components means you will rarely need to use a custom type, it is
      considered good practice to use custom types for non-entity classes that
      occur frequently in your application. For example, a
      &lt;code class=&quot;literal&quot;&gt;MonetaryAmount&lt;/code&gt; class is a good candidate for a
      &lt;code class=&quot;literal&quot;&gt;CompositeUserType&lt;/code&gt;, even though it could be mapped as
      a component. One reason for this is abstraction. With a custom type,
      your mapping documents would be protected against changes to the way
      monetary values are represented.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.3. Mapping a class more than once&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-entityname&quot;/&gt;5.3. Mapping a class more than once&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;It is possible to provide more than one mapping for a particular
    persistent class. In this case, you must specify an &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;entity
    name&lt;/em&gt;&lt;/span&gt; to disambiguate between instances of the two mapped
    entities. By default, the entity name is the same as the class name.
    Hibernate lets you specify the entity name when working with persistent
    objects, when writing queries, or when mapping associations to the named
    entity.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Contract&quot; table=&quot;Contracts&quot;
        entity-name=&quot;CurrentContract&quot;&amp;gt;
    ...
    &amp;lt;set name=&quot;history&quot; inverse=&quot;true&quot;
            order-by=&quot;effectiveEndDate desc&quot;&amp;gt;
        &amp;lt;key column=&quot;currentContractId&quot;/&amp;gt;
        &amp;lt;one-to-many entity-name=&quot;HistoricalContract&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Contract&quot; table=&quot;ContractHistory&quot;
        entity-name=&quot;HistoricalContract&quot;&amp;gt;
    ...
    &amp;lt;many-to-one name=&quot;currentContract&quot;
            column=&quot;currentContractId&quot;
            entity-name=&quot;CurrentContract&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

    &lt;p&gt;Associations are now specified using &lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt;
    instead of &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;.&lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;This feature is not supported in Annotations&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.4. SQL quoted identifiers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-quotedidentifiers&quot;/&gt;5.4. SQL quoted identifiers&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;You can force Hibernate to quote an identifier in the generated SQL
    by enclosing the table or column name in backticks in the mapping
    document. Hibernate will use the correct quotation style for the SQL
    &lt;code class=&quot;literal&quot;&gt;Dialect&lt;/code&gt;. This is usually double quotes, but the SQL
    Server uses brackets and MySQL uses backticks.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity @Table(name=&quot;`Line Item`&quot;)
class LineItem {
   @id @Column(name=&quot;`Item Id`&quot;) Integer id;
   @Column(name=&quot;`Item #`&quot;) int itemNumber
}

&amp;lt;class name=&quot;LineItem&quot; table=&quot;`Line Item`&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;`Item Id`&quot;/&amp;gt;&amp;lt;generator class=&quot;assigned&quot;/&amp;gt;&amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;itemNumber&quot; column=&quot;`Item #`&quot;/&amp;gt;
    ...
&amp;lt;/class&amp;gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.5. Generated properties&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-generated&quot;/&gt;5.5. Generated properties&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Generated properties are properties that have their values generated
    by the database. Typically, Hibernate applications needed to
    &lt;code class=&quot;literal&quot;&gt;refresh&lt;/code&gt; objects that contain any properties for which
    the database was generating values. Marking properties as generated,
    however, lets the application delegate this responsibility to Hibernate.
    When Hibernate issues an SQL INSERT or UPDATE for an entity that has
    defined generated properties, it immediately issues a select afterwards to
    retrieve the generated values.&lt;/p&gt;

    &lt;p&gt;Properties marked as generated must additionally be non-insertable
    and non-updateable. Only &lt;a class=&quot;link&quot; href=&quot;#&quot;&gt;versions&lt;/a&gt;, &lt;a class=&quot;link&quot; href=&quot;#mapping-declaration-timestamp&quot; title=&quot;5.1.3.2. Timestamp&quot;&gt;timestamps&lt;/a&gt;, and &lt;a class=&quot;link&quot; href=&quot;#mapping-declaration-property&quot; title=&quot;5.1.4. Property&quot;&gt;simple properties&lt;/a&gt;, can be
    marked as generated.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;never&lt;/code&gt; (the default): the given property value is
    not generated within the database.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;insert&lt;/code&gt;: the given property value is generated on
    insert, but is not regenerated on subsequent updates. Properties like
    created-date fall into this category. Even though &lt;a class=&quot;link&quot; href=&quot;#&quot;&gt;version&lt;/a&gt; and &lt;a class=&quot;link&quot; href=&quot;#mapping-declaration-timestamp&quot; title=&quot;5.1.3.2. Timestamp&quot;&gt;timestamp&lt;/a&gt; properties can be
    marked as generated, this option is not available.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;always&lt;/code&gt;: the property value is generated both on
    insert and on update.&lt;/p&gt;

    &lt;p&gt;To mark a property as generated, use
    &lt;code class=&quot;classname&quot;&gt;@Generated&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.6. Column transformers: read and write expressions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-column-read-and-write&quot;/&gt;5.6. Column transformers: read and write expressions&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate allows you to customize the SQL it uses to read and write
    the values of columns mapped to &lt;a class=&quot;link&quot; href=&quot;#mapping-declaration-property&quot; title=&quot;5.1.4. Property&quot;&gt;simple properties&lt;/a&gt;. For
    example, if your database provides a set of data encryption functions, you
    can invoke them for individual columns like this:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
class CreditCard {
   @Column(name=&quot;credit_card_num&quot;)
   @ColumnTransformer(
      read=&quot;decrypt(credit_card_num)&quot;, 
      write=&quot;encrypt(?)&quot;)
   public String getCreditCardNumber() { return creditCardNumber; }
   public void setCreditCardNumber(String number) { this.creditCardNumber = number; }
   private String creditCardNumber;
}&lt;/pre&gt;

    &lt;p&gt;or in XML&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;creditCardNumber&quot;&amp;gt;
        &amp;lt;column 
          name=&quot;credit_card_num&quot;
          read=&quot;decrypt(credit_card_num)&quot;
          write=&quot;encrypt(?)&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;You can use the plural form
      &lt;code class=&quot;classname&quot;&gt;@ColumnTransformers&lt;/code&gt; if more than one columns need
      to define either of these rules.&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;If a property uses more that one column, you must use the
    &lt;code class=&quot;literal&quot;&gt;forColumn&lt;/code&gt; attribute to specify which column, the
    expressions are targeting.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
class User {
   @Type(type=&quot;com.acme.type.CreditCardType&quot;)
   @Columns( {
      @Column(name=&quot;credit_card_num&quot;),
      @Column(name=&quot;exp_date&quot;) } )
   @ColumnTransformer(
      forColumn=&quot;credit_card_num&quot;, 
      read=&quot;decrypt(credit_card_num)&quot;, 
      write=&quot;encrypt(?)&quot;)
   public CreditCard getCreditCard() { return creditCard; }
   public void setCreditCard(CreditCard card) { this.creditCard = card; }
   private CreditCard creditCard;
}&lt;/pre&gt;

    &lt;p&gt;Hibernate applies the custom expressions automatically whenever the
    property is referenced in a query. This functionality is similar to a
    derived-property &lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; with two differences:
    &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;The property is backed by one or more columns that are
          exported as part of automatic schema generation.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;The property is read-write, not read-only.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;write&lt;/code&gt; expression, if specified, must contain
    exactly one &apos;?&apos; placeholder for the value.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;5.7. Auxiliary database objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;mapping-database-object&quot;/&gt;5.7. Auxiliary database objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Auxiliary database objects allow for the CREATE and DROP of
    arbitrary database objects. In conjunction with Hibernate&apos;s schema
    evolution tools, they have the ability to fully define a user schema
    within the Hibernate mapping files. Although designed specifically for
    creating and dropping things like triggers or stored procedures, any SQL
    command that can be run via a
    &lt;code class=&quot;literal&quot;&gt;java.sql.Statement.execute()&lt;/code&gt; method is valid (for
    example, ALTERs, INSERTS, etc.). There are essentially two modes for
    defining auxiliary database objects:&lt;/p&gt;

    &lt;p&gt;The first mode is to explicitly list the CREATE and DROP commands in
    the mapping file:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    ...
    &amp;lt;database-object&amp;gt;
        &amp;lt;create&amp;gt;CREATE TRIGGER my_trigger ...&amp;lt;/create&amp;gt;
        &amp;lt;drop&amp;gt;DROP TRIGGER my_trigger&amp;lt;/drop&amp;gt;
    &amp;lt;/database-object&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;The second mode is to supply a custom class that constructs the
    CREATE and DROP commands. This custom class must implement the
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.mapping.AuxiliaryDatabaseObject&lt;/code&gt;
    interface.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    ...
    &amp;lt;database-object&amp;gt;
        &amp;lt;definition class=&quot;MyTriggerDefinition&quot;/&amp;gt;
    &amp;lt;/database-object&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;Additionally, these database objects can be optionally scoped so
    that they only apply when certain dialects are used.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    ...
    &amp;lt;database-object&amp;gt;
        &amp;lt;definition class=&quot;MyTriggerDefinition&quot;/&amp;gt;
        &amp;lt;dialect-scope name=&quot;org.hibernate.dialect.Oracle9iDialect&quot;/&amp;gt;
        &amp;lt;dialect-scope name=&quot;org.hibernate.dialect.Oracle10gDialect&quot;/&amp;gt;
    &amp;lt;/database-object&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;This feature is not supported in Annotations&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 6. Types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types&quot;/&gt;Chapter 6. Types&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value&quot;&gt;6.1. Value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-basic&quot;&gt;6.1.1. Basic value types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-composite&quot;&gt;6.1.2. Composite types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-value-collection&quot;&gt;6.1.3. Collection types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-entity&quot;&gt;6.2. Entity types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-category-significance&quot;&gt;6.3. Significance of type categories&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom&quot;&gt;6.4. Custom types&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-type&quot;&gt;6.4.1. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-ut&quot;&gt;6.4.2. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-custom-cut&quot;&gt;6.4.3. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#types-registry&quot;&gt;6.5. Type registry&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        As an Object/Relational Mapping solution, Hibernate deals with both the Java and JDBC representations of
        application data.  An online catalog application, for example, most likely has &lt;code class=&quot;classname&quot;&gt;Product&lt;/code&gt;
        object with a number of attributes such as a &lt;code class=&quot;literal&quot;&gt;sku&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;, etc.  For these
        individual attributes, Hibernate must be able to read the values out of the database and write them back.  This
        &apos;marshalling&apos; is the function of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate type&lt;/em&gt;&lt;/span&gt;, which is an implementation of the
        &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt; interface.  In addition, a
        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate type&lt;/em&gt;&lt;/span&gt; describes various aspects of behavior of the Java type such as &quot;how is
        equality checked?&quot; or &quot;how are values cloned?&quot;.
    &lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;
            A Hibernate type is neither a Java type nor a SQL datatype; it provides a information about both.
        &lt;/p&gt;
        &lt;p&gt;
            When you encounter the term &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;type&lt;/em&gt;&lt;/span&gt; in regards to Hibernate be aware that usage might
            refer to the Java type, the SQL/JDBC type or the Hibernate type.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;
        Hibernate categorizes types into two high-level groups: value types (see &lt;a class=&quot;xref&quot; href=&quot;#types-value&quot; title=&quot;6.1. Value types&quot;&gt;Section 6.1, âValue typesâ&lt;/a&gt;) and
        entity types (see &lt;a class=&quot;xref&quot; href=&quot;#types-entity&quot; title=&quot;6.2. Entity types&quot;&gt;Section 6.2, âEntity typesâ&lt;/a&gt;).
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;6.1. Value types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value&quot;/&gt;6.1. Value types&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The main distinguishing characteristic of a value type is the fact that they do not define their own
            lifecycle.  We say that they are &quot;owned&quot; by something else (specifically an entity, as we will see later)
            which defines their lifecycle.  Value types are further classified into 3 sub-categories: basic types (see
            &lt;a class=&quot;xref&quot; href=&quot;#types-value-basic&quot; title=&quot;6.1.1. Basic value types&quot;&gt;Section 6.1.1, âBasic value typesâ&lt;/a&gt;), composite types (see &lt;a class=&quot;xref&quot; href=&quot;#types-value-composite&quot; title=&quot;6.1.2. Composite types&quot;&gt;Section 6.1.2, âComposite typesâ&lt;/a&gt;)
            amd collection types (see &lt;a class=&quot;xref&quot; href=&quot;#types-value-collection&quot; title=&quot;6.1.3. Collection types&quot;&gt;Section 6.1.3, âCollection typesâ&lt;/a&gt;).
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.1.1. Basic value types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value-basic&quot;/&gt;6.1.1. Basic value types&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;p&gt;
                The norm for basic value types is that they map a single database value (column) to a single, 
                non-aggregated Java type.  Hibernate provides a number of built-in basic types, which we will present
                in the following sections by the Java type.  Mainly these follow the natural mappings recommended in the
                JDBC specification.  We will later cover how to override these mapping and how to provide and use
                alternative type mappings.
            &lt;/p&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.1. java.lang.String&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value-basic-string&quot;/&gt;6.1.1.1. java.lang.String&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.StringType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a string to the JDBC VARCHAR type.  This is the standard mapping for a string if 
                                no Hibernate type is specified.
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;string&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.String&lt;/code&gt;
                                in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.MaterializedClob&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a string to a JDBC CLOB type
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;materialized_clob&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.TextType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a string to a JDBC LONGVARCHAR type
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;text&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.2. java.lang.Character (or char primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-character&quot;/&gt;6.1.1.2. &lt;code class=&quot;classname&quot;&gt;java.lang.Character&lt;/code&gt; (or char primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CharacterType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a char or &lt;code class=&quot;classname&quot;&gt;java.lang.Character&lt;/code&gt; to a JDBC CHAR
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;char&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Character&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.3. java.lang.Boolean (or boolean primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value-basic-boolean&quot;/&gt;6.1.1.3. &lt;code class=&quot;classname&quot;&gt;java.lang.Boolean&lt;/code&gt; (or boolean primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BooleanType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a boolean to a JDBC BIT type
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;boolean&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Boolean&lt;/code&gt; in
                                the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.NumericBooleanType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a boolean to a JDBC INTEGER type as 0 = false, 1 = true
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;numeric_boolean&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.YesNoType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a boolean to a JDBC CHAR type as (&apos;N&apos; | &apos;n&apos;) = false, ( &apos;Y&apos; | &apos;y&apos; ) = true
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;yes_no&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.TrueFalseType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a boolean to a JDBC CHAR type as (&apos;F&apos; | &apos;f&apos;) = false, ( &apos;T&apos; | &apos;t&apos; ) = true
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;true_false&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.4. java.lang.Byte (or byte primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-byte&quot;/&gt;6.1.1.4. &lt;code class=&quot;classname&quot;&gt;java.lang.Byte&lt;/code&gt; (or byte primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.ByteType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a byte or &lt;code class=&quot;classname&quot;&gt;java.lang.Byte&lt;/code&gt; to a JDBC TINYINT
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;byte&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Byte&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.5. java.lang.Short (or short primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-short&quot;/&gt;6.1.1.5. &lt;code class=&quot;classname&quot;&gt;java.lang.Short&lt;/code&gt; (or short primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.ShortType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a short or &lt;code class=&quot;classname&quot;&gt;java.lang.Short&lt;/code&gt; to a JDBC SMALLINT
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;short&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Short&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.6. java.lang.Integer (or int primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-int&quot;/&gt;6.1.1.6. &lt;code class=&quot;classname&quot;&gt;java.lang.Integer&lt;/code&gt; (or int primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.IntegerTypes&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps an int or &lt;code class=&quot;classname&quot;&gt;java.lang.Integer&lt;/code&gt; to a JDBC INTEGER
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Integer&lt;/code&gt;in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.7. java.lang.Long (or long primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-long&quot;/&gt;6.1.1.7. &lt;code class=&quot;classname&quot;&gt;java.lang.Long&lt;/code&gt; (or long primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.LongType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a long or &lt;code class=&quot;classname&quot;&gt;java.lang.Long&lt;/code&gt; to a JDBC BIGINT
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;long&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Long&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.8. java.lang.Float (or float primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-float&quot;/&gt;6.1.1.8. &lt;code class=&quot;classname&quot;&gt;java.lang.Float&lt;/code&gt; (or float primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.FloatType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a float or &lt;code class=&quot;classname&quot;&gt;java.lang.Float&lt;/code&gt; to a JDBC FLOAT
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;float&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Float&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.9. java.lang.Double (or double primitive)&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-double&quot;/&gt;6.1.1.9. &lt;code class=&quot;classname&quot;&gt;java.lang.Double&lt;/code&gt; (or double primitive)&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.DoubleType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a double or &lt;code class=&quot;classname&quot;&gt;java.lang.Double&lt;/code&gt; to a JDBC DOUBLE
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;double&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Double&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.10. java.math.BigInteger&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-biginteger&quot;/&gt;6.1.1.10. &lt;code class=&quot;classname&quot;&gt;java.math.BigInteger&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BigIntegerType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.math.BigInteger&lt;/code&gt; to a JDBC NUMERIC
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;big_integer&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.math.BigInteger&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.11. java.math.BigDecimal&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-bigdecimal&quot;/&gt;6.1.1.11. &lt;code class=&quot;classname&quot;&gt;java.math.BigDecimal&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BigDecimalType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.math.BigDecimal&lt;/code&gt; to a JDBC NUMERIC
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;big_decimal&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.math.BigDecimal&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.12. java.util.Date or java.sql.Timestamp&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-timestamp&quot;/&gt;6.1.1.12. &lt;code class=&quot;classname&quot;&gt;java.util.Date&lt;/code&gt; or &lt;code class=&quot;classname&quot;&gt;java.sql.Timestamp&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.TimestampType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.sql.Timestamp&lt;/code&gt; to a JDBC TIMESTAMP
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;timestamp&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;java.sql.Timestamp&lt;/code&gt; and
                                &lt;code class=&quot;literal&quot;&gt;java.util.Date&lt;/code&gt; in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.13. java.sql.Time&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-time&quot;/&gt;6.1.1.13. &lt;code class=&quot;classname&quot;&gt;java.sql.Time&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.TimeType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.sql.Time&lt;/code&gt; to a JDBC TIME
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;time&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.sql.Time&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.14. java.sql.Date&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-date&quot;/&gt;6.1.1.14. &lt;code class=&quot;classname&quot;&gt;java.sql.Date&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.DateType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.sql.Date&lt;/code&gt; to a JDBC DATE
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.sql.Date&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.15. java.util.Calendar&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-calendar&quot;/&gt;6.1.1.15. &lt;code class=&quot;classname&quot;&gt;java.util.Calendar&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CalendarType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.util.Calendar&lt;/code&gt; to a JDBC TIMESTAMP
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;calendar&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;java.util.Calendar&lt;/code&gt; and
                                &lt;code class=&quot;literal&quot;&gt;java.util.GregorianCalendar&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CalendarDateType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.util.Calendar&lt;/code&gt; to a JDBC DATE
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;calendar_date&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.16. java.util.Currency&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-currency&quot;/&gt;6.1.1.16. &lt;code class=&quot;classname&quot;&gt;java.util.Currency&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CurrencyType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.util.Currency&lt;/code&gt; to a JDBC VARCHAR (using the Currency code)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;currency&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.util.Currency&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.17. java.util.Locale&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-locale&quot;/&gt;6.1.1.17. &lt;code class=&quot;classname&quot;&gt;java.util.Locale&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.LocaleType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.util.Locale&lt;/code&gt; to a JDBC VARCHAR (using the Locale code)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;locale&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.util.Locale&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.18. java.util.TimeZone&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-timezone&quot;/&gt;6.1.1.18. &lt;code class=&quot;classname&quot;&gt;java.util.TimeZone&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.TimeZoneType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.util.TimeZone&lt;/code&gt; to a JDBC VARCHAR (using the TimeZone ID)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;timezone&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.util.TimeZone&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.19. java.net.URL&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-url&quot;/&gt;6.1.1.19. &lt;code class=&quot;classname&quot;&gt;java.net.URL&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.UrlType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.net.URL&lt;/code&gt; to a JDBC VARCHAR (using the external form)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.net.URL&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.20. java.lang.Class&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-class&quot;/&gt;6.1.1.20. &lt;code class=&quot;classname&quot;&gt;java.lang.Class&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.ClassType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.lang.Class&lt;/code&gt; to a JDBC VARCHAR (using the Class name)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.lang.Class&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.21. java.sql.Blob&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-blob&quot;/&gt;6.1.1.21. &lt;code class=&quot;classname&quot;&gt;java.sql.Blob&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BlobType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.sql.Blob&lt;/code&gt; to a JDBC BLOB
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;blob&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.sql.Blob&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.22. java.sql.Clob&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-clob&quot;/&gt;6.1.1.22. &lt;code class=&quot;classname&quot;&gt;java.sql.Clob&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.ClobType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a &lt;code class=&quot;classname&quot;&gt;java.sql.Clob&lt;/code&gt; to a JDBC CLOB
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;clob&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.sql.Clob&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.23. byte[]&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-binary&quot;/&gt;6.1.1.23. byte[]&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BinaryType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a primitive byte[] to a JDBC VARBINARY
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;binary&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;byte[]&lt;/code&gt; in the
                                type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.MaterializedBlobType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a primitive byte[] to a JDBC BLOB
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;materialized_blob&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.ImageType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a primitive byte[] to a JDBC LONGVARBINARY
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;image&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.24. Byte[]&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-wrapperbinary&quot;/&gt;6.1.1.24. Byte[]&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.BinaryType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a java.lang.Byte[] to a JDBC VARBINARY
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;wrapper-binary&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Byte[]&lt;/code&gt; and
                                &lt;code class=&quot;literal&quot;&gt;java.lang.Byte[]&lt;/code&gt; in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.25. char[]&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-chararray&quot;/&gt;6.1.1.25. char[]&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CharArrayType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a char[] to a JDBC VARCHAR
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;characters&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;char[]&lt;/code&gt;
                                in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.26. Character[]&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-characterarray&quot;/&gt;6.1.1.26. Character[]&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.CharacterArrayType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a java.lang.Character[] to a JDBC VARCHAR
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;wrapper-characters&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Character[]&lt;/code&gt;
                                and &lt;code class=&quot;literal&quot;&gt;java.lang.Character[]&lt;/code&gt; in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.27. java.util.UUID&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-uuid&quot;/&gt;6.1.1.27. &lt;code class=&quot;classname&quot;&gt;java.util.UUID&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.UUIDBinaryType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a java.util.UUID to a JDBC BINARY
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;uuid-binary&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;java.util.UUID&lt;/code&gt;
                                in the type registry (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.UUIDCharType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a java.util.UUID to a JDBC CHAR (though VARCHAR is fine too for existing schemas)
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;uuid-char&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.PostgresUUIDType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps a java.util.UUID to the PostgreSQL UUID data type (through
                                &lt;code class=&quot;literal&quot;&gt;Types#OTHER&lt;/code&gt; which is how the PostgreSQL JDBC driver defines it).
                            &lt;/p&gt;
                            &lt;p&gt;
                                Registered under &lt;code class=&quot;literal&quot;&gt;pg-uuid&lt;/code&gt; in the type registry (see
                                &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;section&quot; title=&quot;6.1.1.28. java.io.Serializable&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;types-basic-value-serializable&quot;/&gt;6.1.1.28. &lt;code class=&quot;interfacename&quot;&gt;java.io.Serializable&lt;/code&gt;&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.type.SerializableType&lt;/code&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                            &lt;p&gt;
                                Maps implementors of java.lang.Serializable to a JDBC VARBINARY
                            &lt;/p&gt;
                            &lt;p&gt;
                                Unlike the other value types, there are multiple instances of this type.  It
                                gets registered once under &lt;code class=&quot;interfacename&quot;&gt;java.io.Serializable&lt;/code&gt;.
                                Additionally it gets registered under the specific
                                &lt;code class=&quot;interfacename&quot;&gt;java.io.Serializable&lt;/code&gt; implementation class names.
                            &lt;/p&gt;
                        &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.1.2. Composite types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value-composite&quot;/&gt;6.1.2. Composite types&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    The Java Persistence API calls these embedded types, while Hibernate traditionally called them
                    components.  Just be aware that both terms are used and mean the same thing in the scope of
                    discussing Hibernate.
                &lt;/p&gt;
            &lt;/div&gt;
            &lt;p&gt;
                Components represent aggregations of values into a single Java type.  For example, you might have
                an Address class that aggregates street, city, state, etc information or a Name class that
                aggregates the parts of a person&apos;s Name.  In many ways a component looks exactly like an entity.  They
                are both (generally speaking) classes written specifically for the application.  They both might have
                references to other application-specific classes, as well as to collections and simple JDK types.  As
                discussed before, the only distinguishing factory is the fact that a component does not own its own
                lifecycle nor does it define an identifier.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.1.3. Collection types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-value-collection&quot;/&gt;6.1.3. Collection types&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    It is critical understand that we mean the collection itself, not its contents.
                    The contents of the collection can in turn be basic, component or entity types (though not
                    collections), but the collection itself is owned.
                &lt;/p&gt;
            &lt;/div&gt;
            &lt;p&gt;
                Collections are covered in &lt;a class=&quot;xref&quot; href=&quot;#collections&quot; title=&quot;Chapter 7. Collection mapping&quot;&gt;Chapter 7, &lt;em&gt;Collection mapping&lt;/em&gt;&lt;/a&gt;.
            &lt;/p&gt;
        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;6.2. Entity types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types-entity&quot;/&gt;6.2. Entity types&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            The definition of entities is covered in detail in &lt;a class=&quot;xref&quot; href=&quot;#persistent-classes&quot; title=&quot;Chapter 4. Persistent Classes&quot;&gt;Chapter 4, &lt;em&gt;Persistent Classes&lt;/em&gt;&lt;/a&gt;.  For the purpose of
            this discussion, it is enough to say that entities are (generally application-specific) classes which
            correlate to rows in a table.  Specifically they correlate to the row by means of a unique identifier.
            Because of this unique identifier, entities exist independently and define their own lifecycle.  As an example,
            when we delete a &lt;code class=&quot;classname&quot;&gt;Membership&lt;/code&gt;, both the &lt;code class=&quot;classname&quot;&gt;User&lt;/code&gt; and
            &lt;code class=&quot;classname&quot;&gt;Group&lt;/code&gt; entities remain.
            &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    This notion of entity independence can be modified by the application developer using the concept of
                    cascades.  Cascades allow certain operations to continue (or &quot;cascade&quot;) across an association from
                    one entity to another.  Cascades are covered in detail in &lt;a class=&quot;xref&quot; href=&quot;#associations&quot; title=&quot;Chapter 8. Association Mappings&quot;&gt;Chapter 8, &lt;em&gt;Association Mappings&lt;/em&gt;&lt;/a&gt;.
                &lt;/p&gt;
            &lt;/div&gt;&lt;p&gt;
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;6.3. Significance of type categories&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types-category-significance&quot;/&gt;6.3. Significance of type categories&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Why do we spend so much time categorizing the various types of types?  What is the significance of the
            distinction?
        &lt;/p&gt;
        &lt;p&gt;
            The main categorization was between entity types and value types.  To review we said that entities, by
            nature of their unique identifier, exist independently of other objects whereas values do not.  An
            application cannot &quot;delete&quot; a Product sku; instead, the sku is removed when the Product itself is
            deleted (obviously you can &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;update&lt;/em&gt;&lt;/span&gt; the sku of that Product to null to make it
            &quot;go away&quot;, but even there the access is done through the Product).
        &lt;/p&gt;
        &lt;p&gt;
            Nor can you define an association &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;to&lt;/em&gt;&lt;/span&gt; that Product sku.  You &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;can&lt;/em&gt;&lt;/span&gt;
            define an association to Product &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;based on&lt;/em&gt;&lt;/span&gt; its sku, assuming sku is unique, but that
            is totally different.
        &lt;/p&gt;
        &lt;p&gt;
            TBC...
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;6.4. Custom types&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types-custom&quot;/&gt;6.4. Custom types&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Hibernate makes it relatively easy for developers to create their own &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;value&lt;/em&gt;&lt;/span&gt; types.  For
            example, you might want to persist properties of type &lt;code class=&quot;classname&quot;&gt;java.lang.BigInteger&lt;/code&gt; to
            &lt;code class=&quot;literal&quot;&gt;VARCHAR&lt;/code&gt; columns.  Custom types are not limited to mapping values to a single table
            column.  So, for example, you might want to concatenate together &lt;code class=&quot;literal&quot;&gt;FIRST_NAME&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;INITIAL&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;SURNAME&lt;/code&gt; columns into a &lt;code class=&quot;classname&quot;&gt;java.lang.String&lt;/code&gt;.
        &lt;/p&gt;

        &lt;p&gt;
            There are 3 approaches to developing a custom Hibernate type.  As a means of illustrating the different
            approaches, lets consider a use case where we need to compose a &lt;code class=&quot;classname&quot;&gt;java.math.BigDecimal&lt;/code&gt;
            and &lt;code class=&quot;classname&quot;&gt;java.util.Currency&lt;/code&gt; together into a custom &lt;code class=&quot;classname&quot;&gt;Money&lt;/code&gt; class.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.4.1. Custom types using org.hibernate.type.Type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-custom-type&quot;/&gt;6.4.1. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;p&gt;
                The first approach is to directly implement the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;
                interface (or one of its derivatives).  Probably, you will be more interested in the more specific
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.BasicType&lt;/code&gt; contract which would allow registration of
                the type (see &lt;a class=&quot;xref&quot; href=&quot;#types-registry&quot; title=&quot;6.5. Type registry&quot;&gt;Section 6.5, âType registryâ&lt;/a&gt;).  The benefit of this registration is that whenever
                the metadata for a particular property does not specify the Hibernate type to use, Hibernate will
                consult the registry for the exposed property type.  In our example, the property type would be
                &lt;code class=&quot;classname&quot;&gt;Money&lt;/code&gt;, which is the key we would use to register our type in the registry:
            &lt;/p&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;types-custom-type-ex-definition&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 6.1. Defining and registering the custom Type&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class MoneyType implements BasicType {
    public String[] getRegistrationKeys() {
        return new String[] { Money.class.getName() };
    }

	public int[] sqlTypes(Mapping mapping) {
	    // We will simply use delegation to the standard basic types for BigDecimal and Currency for many of the
	    // Type methods...
	    return new int[] {
	             BigDecimalType.INSTANCE.sqlType(),
	             CurrencyType.INSTANCE.sqlType(),
	    };
	    // we could also have honored any registry overrides via...
	    //return new int[] {
	    //         mappings.getTypeResolver().basic( BigDecimal.class.getName() ).sqlTypes( mappings )[0],
	    //         mappings.getTypeResolver().basic( Currency.class.getName() ).sqlTypes( mappings )[0]
	    //};
	}

    public Class getReturnedClass() {
        return Money.class;
    }

    public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner) throws SQLException {
        assert names.length == 2;
        BigDecimal amount = BigDecimalType.INSTANCE.get( names[0] ); // already handles null check
        Currency currency = CurrencyType.INSTANCE.get( names[1] ); // already handles null check
        return amount == null &amp;amp;&amp;amp; currency == null
                ? null
                : new Money( amount, currency );
    }

    public void nullSafeSet(PreparedStatement st, Object value, int index, boolean[] settable, SessionImplementor session)
            throws SQLException {
        if ( value == null ) {
            BigDecimalType.INSTANCE.set( st, null, index );
            CurrencyType.INSTANCE.set( st, null, index+1 );
        }
        else {
            final Money money = (Money) value;
            BigDecimalType.INSTANCE.set( st, money.getAmount(), index );
            CurrencyType.INSTANCE.set( st, money.getCurrency(), index+1 );
        }
    }

    ...
}

Configuration cfg = new Configuration();
cfg.registerTypeOverride( new MoneyType() );
cfg...;
&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    It is important that we registered the type &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;before&lt;/em&gt;&lt;/span&gt; adding mappings.
                &lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.4.2. Custom types using org.hibernate.usertype.UserType&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-custom-ut&quot;/&gt;6.4.2. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Both &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt; and
                    &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt; were originally
                    added to isolate user code from internal changes to the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;
                    interfaces.
                &lt;/p&gt;
            &lt;/div&gt;
            &lt;p&gt;
                The second approach is the use the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;
                interface, which presents a somewhat simplified view of the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt;
                interface.  Using a &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;, our
                &lt;code class=&quot;classname&quot;&gt;Money&lt;/code&gt; custom type would look as follows:
            &lt;/p&gt;
            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;types-custom-ut-ex-definition&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 6.2. Defining the custom UserType&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class MoneyType implements UserType {
    public int[] sqlTypes() {
        return new int[] {
                BigDecimalType.INSTANCE.sqlType(),
                CurrencyType.INSTANCE.sqlType(),
        };
    }

    public Class getReturnedClass() {
        return Money.class;
    }

    public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws SQLException {
        assert names.length == 2;
        BigDecimal amount = BigDecimalType.INSTANCE.get( names[0] ); // already handles null check
        Currency currency = CurrencyType.INSTANCE.get( names[1] ); // already handles null check
        return amount == null &amp;amp;&amp;amp; currency == null
                ? null
                : new Money( amount, currency );
    }

    public void nullSafeSet(PreparedStatement st, Object value, int index) throws SQLException {
        if ( value == null ) {
            BigDecimalType.INSTANCE.set( st, null, index );
            CurrencyType.INSTANCE.set( st, null, index+1 );
        }
        else {
            final Money money = (Money) value;
            BigDecimalType.INSTANCE.set( st, money.getAmount(), index );
            CurrencyType.INSTANCE.set( st, money.getCurrency(), index+1 );
        }
    }

    ...
}&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
            &lt;p&gt;
                There is not much difference between the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt; example
                and the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt; example, but that is only because
                of the snippets shown.  If you choose the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt; approach
                there are quite a few more methods you would need to implement as compared to the
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt;.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;6.4.3. Custom types using org.hibernate.usertype.CompositeUserType&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;types-custom-cut&quot;/&gt;6.4.3. Custom types using &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;p&gt;
                The third and final approach is the use the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt;
                interface, which differs from &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.UserType&lt;/code&gt; in that it
                gives us the ability to provide Hibernate the information to handle the composition within the
                &lt;code class=&quot;classname&quot;&gt;Money&lt;/code&gt; class (specifically the 2 attributes).  This would give us the capability,
                for example, to reference the &lt;code class=&quot;literal&quot;&gt;amount&lt;/code&gt; attribute in an HQL query.  Using a
                &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.usertype.CompositeUserType&lt;/code&gt;, our
                &lt;code class=&quot;classname&quot;&gt;Money&lt;/code&gt; custom type would look as follows:
            &lt;/p&gt;

            &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;types-custom-cut-ex-definition&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 6.3. Defining the custom CompositeUserType&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
                
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class MoneyType implements CompositeUserType {
    public String[] getPropertyNames() {
        // ORDER IS IMPORTANT!  it must match the order the columns are defined in the property mapping
        return new String[] { &quot;amount&quot;, &quot;currency&quot; };
    }

    public Type[] getPropertyTypes() {
        return new Type[] { BigDecimalType.INSTANCE, CurrencyType.INSTANCE };
    }

    public Class getReturnedClass() {
        return Money.class;
    }

    public Object getPropertyValue(Object component, int propertyIndex) {
        if ( component == null ) {
            return null;
        }

        final Money money = (Money) component;
        switch ( propertyIndex ) {
            case 0: {
                return money.getAmount();
            }
            case 1: {
                return money.getCurrency();
            }
            default: {
                throw new HibernateException( &quot;Invalid property index [&quot; + propertyIndex + &quot;]&quot; );
            }
        }
    }

	public void setPropertyValue(Object component, int propertyIndex, Object value) throws HibernateException {
        if ( component == null ) {
            return;
        }

        final Money money = (Money) component;
        switch ( propertyIndex ) {
            case 0: {
                money.setAmount( (BigDecimal) value );
                break;
            }
            case 1: {
                money.setCurrency( (Currency) value );
                break;
            }
            default: {
                throw new HibernateException( &quot;Invalid property index [&quot; + propertyIndex + &quot;]&quot; );
            }
        }
	}

    public Object nullSafeGet(ResultSet rs, String[] names, SessionImplementor session, Object owner) throws SQLException {
        assert names.length == 2;
        BigDecimal amount = BigDecimalType.INSTANCE.get( names[0] ); // already handles null check
        Currency currency = CurrencyType.INSTANCE.get( names[1] ); // already handles null check
        return amount == null &amp;amp;&amp;amp; currency == null
                ? null
                : new Money( amount, currency );
    }

    public void nullSafeSet(PreparedStatement st, Object value, int index, SessionImplementor session) throws SQLException {
        if ( value == null ) {
            BigDecimalType.INSTANCE.set( st, null, index );
            CurrencyType.INSTANCE.set( st, null, index+1 );
        }
        else {
            final Money money = (Money) value;
            BigDecimalType.INSTANCE.set( st, money.getAmount(), index );
            CurrencyType.INSTANCE.set( st, money.getCurrency(), index+1 );
        }
    }

    ...
}&lt;/pre&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;6.5. Type registry&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;types-registry&quot;/&gt;6.5. Type registry&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Internally Hibernate uses a registry of basic types (see &lt;a class=&quot;xref&quot; href=&quot;#types-value-basic&quot; title=&quot;6.1.1. Basic value types&quot;&gt;Section 6.1.1, âBasic value typesâ&lt;/a&gt;) when
            it needs to resolve the specific &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt; to use in certain
            situations.  It also provides a way for applications to add extra basic type registrations as well as
            override the standard basic type registrations.
        &lt;/p&gt;
        &lt;p&gt;
            To register a new type or to override an existing type registration, applications would make use of the
            &lt;code class=&quot;methodname&quot;&gt;registerTypeOverride&lt;/code&gt; method of the &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt;
            class when bootstrapping Hibernate.  For example, lets say you want Hibernate to use your custom
            &lt;code class=&quot;classname&quot;&gt;SuperDuperStringType&lt;/code&gt;; during bootstrap you would call:
        &lt;/p&gt;
        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;type-registry-override-ex&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 6.4. Overriding the standard &lt;code class=&quot;classname&quot;&gt;StringType&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = ...;
cfg.registerTypeOverride( new SuperDuperStringType() );&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
        &lt;p&gt;
            The argument to &lt;code class=&quot;methodname&quot;&gt;registerTypeOverride&lt;/code&gt; is a &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.BasicType&lt;/code&gt;
            which is a specialization of the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.type.Type&lt;/code&gt; we saw before.  It
            adds a single method:
        &lt;/p&gt;
        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5094&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 6.5. Snippet from BasicType.java&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
    /**
	 * Get the names under which this type should be registered in the type registry.
	 *
	 * @return The keys under which to register this type.
	 */
	public String[] getRegistrationKeys();
            &lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
        &lt;p&gt;
            One approach is to use inheritance (&lt;code class=&quot;classname&quot;&gt;SuperDuperStringType&lt;/code&gt; extends 
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.type.StringType&lt;/code&gt;); another is to use delegation.
        &lt;/p&gt;
    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 7. Collection mapping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;collections&quot;/&gt;Chapter 7. Collection mapping&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-persistent&quot;&gt;7.1. Persistent collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-mapping&quot;&gt;7.2. How to map collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-foreignkeys&quot;&gt;7.2.1. Collection foreign keys&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-indexed&quot;&gt;7.2.2. Indexed collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-ofvalues&quot;&gt;7.2.3. Collections of basic types and embeddable objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-advancedmappings&quot;&gt;7.3. Advanced collection mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-sorted&quot;&gt;7.3.1. Sorted collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-bidirectional&quot;&gt;7.3.2. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-indexedbidirectional&quot;&gt;7.3.3. Bidirectional associations with indexed collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-ternary&quot;&gt;7.3.4. Ternary associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-idbag&quot;&gt;7.3.5. &lt;code class=&quot;literal&quot;&gt;Using an &amp;lt;idbag&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#collections-example&quot;&gt;7.4. Collection examples&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;div class=&quot;section&quot; title=&quot;7.1. Persistent collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-persistent&quot;/&gt;7.1. Persistent collections&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Naturally Hibernate also allows to persist collections. These
    persistent collections can contain almost any other Hibernate type,
    including: basic types, custom types, components and references to other
    entities. The distinction between value and reference semantics is in this
    context very important. An object in a collection might be handled with
    &quot;value&quot; semantics (its life cycle fully depends on the collection owner),
    or it might be a reference to another entity with its own life cycle. In
    the latter case, only the &quot;link&quot; between the two objects is considered to
    be a state held by the collection.&lt;/p&gt;

    &lt;p&gt;As a requirement persistent collection-valued fields must be
    declared as an interface type (see &lt;a class=&quot;xref&quot; href=&quot;#example.collection.mapping.annotations&quot; title=&quot;Example 7.2. Collection mapping using @OneToMany and @JoinColumn&quot;&gt;Example 7.2, âCollection mapping using @OneToMany and @JoinColumnâ&lt;/a&gt;). The actual interface
    might be &lt;code class=&quot;literal&quot;&gt;java.util.Set&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;java.util.Collection&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;java.util.List&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;java.util.Map&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;java.util.SortedSet&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;java.util.SortedMap&lt;/code&gt; or anything you like (&quot;anything you
    like&quot; means you will have to write an implementation of
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.usertype.UserCollectionType&lt;/code&gt;).&lt;/p&gt;

    &lt;p&gt;Notice how in &lt;a class=&quot;xref&quot; href=&quot;#example.collection.mapping.annotations&quot; title=&quot;Example 7.2. Collection mapping using @OneToMany and @JoinColumn&quot;&gt;Example 7.2, âCollection mapping using @OneToMany and @JoinColumnâ&lt;/a&gt; the instance variable
    &lt;code class=&quot;literal&quot;&gt;parts&lt;/code&gt; was initialized with an instance of
    &lt;code class=&quot;literal&quot;&gt;HashSet&lt;/code&gt;. This is the best way to initialize collection
    valued properties of newly instantiated (non-persistent) instances. When
    you make the instance persistent, by calling &lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt;,
    Hibernate will actually replace the &lt;code class=&quot;literal&quot;&gt;HashSet&lt;/code&gt; with an
    instance of Hibernate&apos;s own implementation of &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;. Be
    aware of the following error:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5121&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.1. Hibernate uses its own collection implementations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = new DomesticCat();
Cat kitten = new DomesticCat();
....
Set kittens = new HashSet();
kittens.add(kitten);
cat.setKittens(kittens);
session.persist(cat);

kittens = cat.getKittens(); // Okay, kittens collection is a Set
(HashSet) cat.getKittens(); // Error!&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The persistent collections injected by Hibernate behave like
    &lt;code class=&quot;literal&quot;&gt;HashMap&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;HashSet&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;TreeMap&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;TreeSet&lt;/code&gt; or
    &lt;code class=&quot;literal&quot;&gt;ArrayList&lt;/code&gt;, depending on the interface type.&lt;/p&gt;

    &lt;p&gt;Collections instances have the usual behavior of value types. They
    are automatically persisted when referenced by a persistent object and are
    automatically deleted when unreferenced. If a collection is passed from
    one persistent object to another, its elements might be moved from one
    table to another. Two entities cannot share a reference to the same
    collection instance. Due to the underlying relational model,
    collection-valued properties do not support null value semantics.
    Hibernate does not distinguish between a null collection reference and an
    empty collection.&lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;Use persistent collections the same way you use ordinary Java
      collections. However, ensure you understand the semantics of
      bidirectional associations (see &lt;a class=&quot;xref&quot; href=&quot;#collections-bidirectional&quot; title=&quot;7.3.2. Bidirectional associations&quot;&gt;Section 7.3.2, âBidirectional associationsâ&lt;/a&gt;).&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;7.2. How to map collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-mapping&quot;/&gt;7.2. How to map collections&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Using annotations you can map &lt;code class=&quot;classname&quot;&gt;Collection&lt;/code&gt;s,
    &lt;code class=&quot;classname&quot;&gt;List&lt;/code&gt;s, &lt;code class=&quot;classname&quot;&gt;Map&lt;/code&gt;s and
    &lt;code class=&quot;classname&quot;&gt;Set&lt;/code&gt;s of associated entities using @OneToMany and
    @ManyToMany. For collections of a basic or embeddable type use
    @ElementCollection. In the simplest case a collection mapping looks like
    this:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example.collection.mapping.annotations&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.2. Collection mapping using @OneToMany and @JoinColumn&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
public class Product {

    private String serialNumber;
    private Set&amp;lt;Part&amp;gt; parts = new HashSet&amp;lt;Part&amp;gt;();

    @Id
    public String getSerialNumber() { return serialNumber; }
    void setSerialNumber(String sn) { serialNumber = sn; }
   
    @OneToMany
    @JoinColumn(name=&quot;PART_ID&quot;)
    public Set&amp;lt;Part&amp;gt; getParts() { return parts; }
    void setParts(Set parts) { this.parts = parts; }
}


@Entity
public class Part {
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Product describes a unidirectional relationship with Part using the
    join column PART_ID. In this unidirectional one to many scenario you can
    also use a join table as seen in &lt;a class=&quot;xref&quot; href=&quot;#example-one-to-many-with-join-table&quot; title=&quot;Example 7.3. Collection mapping using @OneToMany and @JoinTable&quot;&gt;Example 7.3, âCollection mapping using @OneToMany and @JoinTableâ&lt;/a&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-one-to-many-with-join-table&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.3. Collection mapping using @OneToMany and @JoinTable&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
public class Product {

    private String serialNumber;
    private Set&amp;lt;Part&amp;gt; parts = new HashSet&amp;lt;Part&amp;gt;();

    @Id
    public String getSerialNumber() { return serialNumber; }
    void setSerialNumber(String sn) { serialNumber = sn; }
   
    @OneToMany
    @JoinTable(
            name=&quot;PRODUCT_PARTS&quot;,
            joinColumns = @JoinColumn( name=&quot;PRODUCT_ID&quot;),
            inverseJoinColumns = @JoinColumn( name=&quot;PART_ID&quot;)
    )
    public Set&amp;lt;Part&amp;gt; getParts() { return parts; }
    void setParts(Set parts) { this.parts = parts; }
}


@Entity
public class Part {
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Without describing any physical mapping (no
    &lt;code class=&quot;classname&quot;&gt;@JoinColumn&lt;/code&gt; or &lt;code class=&quot;classname&quot;&gt;@JoinTable&lt;/code&gt;),
    a unidirectional one to many with join table is used. The table name is
    the concatenation of the owner table name, _, and the other side table
    name. The foreign key name(s) referencing the owner table is the
    concatenation of the owner table, _, and the owner primary key column(s)
    name. The foreign key name(s) referencing the other side is the
    concatenation of the owner property name, _, and the other side primary
    key column(s) name. A unique constraint is added to the foreign key
    referencing the other side table to reflect the one to many.&lt;/p&gt;

    &lt;p&gt;Lets have a look now how collections are mapped using Hibernate
    mapping files. In this case the first step is to chose the right mapping
    element. It depends on the type of interface. For example, a
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;set&amp;gt;&lt;/code&gt; element is used for mapping properties of
    type &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example.collections.set&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.4. Mapping a Set using &amp;lt;set&amp;gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Product&quot;&amp;gt;
    &amp;lt;id name=&quot;serialNumber&quot; column=&quot;productSerialNumber&quot;/&amp;gt;
    &amp;lt;set name=&quot;parts&quot;&amp;gt;
        &amp;lt;key column=&quot;productSerialNumber&quot; not-null=&quot;true&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Part&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;In &lt;a class=&quot;xref&quot; href=&quot;#example.collections.set&quot; title=&quot;Example 7.4. Mapping a Set using &amp;lt;set&amp;gt;&quot;&gt;Example 7.4, âMapping a Set using &amp;lt;set&amp;gt;â&lt;/a&gt; a
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;one-to-many association&lt;/em&gt;&lt;/span&gt; links the
    &lt;code class=&quot;literal&quot;&gt;Product&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Part&lt;/code&gt; entities. This
    association requires the existence of a foreign key column and possibly an
    index column to the &lt;code class=&quot;literal&quot;&gt;Part&lt;/code&gt; table. This mapping loses
    certain semantics of normal Java collections:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;An instance of the contained entity class cannot belong to more
        than one instance of the collection.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;An instance of the contained entity class cannot appear at more
        than one value of the collection index.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Looking closer at the used &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt;
    tag we see that it has the following options.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5171&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.5. options of &amp;lt;one-to-many&amp;gt; element&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-many
        class=&quot;ClassName&quot;                                  &lt;span class=&quot;co&quot; id=&quot;onetomany1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        not-found=&quot;ignore|exception&quot;                       &lt;span class=&quot;co&quot; id=&quot;onetomany2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        entity-name=&quot;EntityName&quot;                           &lt;span class=&quot;co&quot; id=&quot;onetomany3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        node=&quot;element-name&quot;
        embed-xml=&quot;true|false&quot;
    /&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; (required): the name of the
            associated class.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;not-found&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;exception&lt;/code&gt;): specifies how cached identifiers
            that reference missing rows will be handled.
            &lt;code class=&quot;literal&quot;&gt;ignore&lt;/code&gt; will treat a missing row as a null
            association.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;entity-name&lt;/code&gt; (optional): the entity name
            of the associated class, as an alternative to
            &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt;.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; element does not need to
    declare any columns. Nor is it necessary to specify the
    &lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; name anywhere.&lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
      &lt;p&gt;If the foreign key column of a
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; association is declared
      &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt;, you must declare the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; mapping
      &lt;code class=&quot;literal&quot;&gt;not-null=&quot;true&quot;&lt;/code&gt; or &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;use a bidirectional
      association&lt;/em&gt;&lt;/span&gt; with the collection mapping marked
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;. See &lt;a class=&quot;xref&quot; href=&quot;#collections-bidirectional&quot; title=&quot;7.3.2. Bidirectional associations&quot;&gt;Section 7.3.2, âBidirectional associationsâ&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;Apart from the &lt;code class=&quot;literal&quot;&gt;&amp;lt;set&amp;gt; &lt;/code&gt;tag as shown in &lt;a class=&quot;xref&quot; href=&quot;#example.collections.set&quot; title=&quot;Example 7.4. Mapping a Set using &amp;lt;set&amp;gt;&quot;&gt;Example 7.4, âMapping a Set using &amp;lt;set&amp;gt;â&lt;/a&gt;, there is also
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;list&amp;gt;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;&amp;lt;map&amp;gt;&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;bag&amp;gt;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;&amp;lt;array&amp;gt;&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;primitive-array&amp;gt;&lt;/code&gt; mapping elements. The
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;map&amp;gt;&lt;/code&gt; element is representative:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5213&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.6. Elements of the &amp;lt;map&amp;gt; mapping&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;map
    name=&quot;propertyName&quot;                                    &lt;span class=&quot;co&quot; id=&quot;mappingcollection1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
    table=&quot;table_name&quot;                                     &lt;span class=&quot;co&quot; id=&quot;mappingcollection2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
    schema=&quot;schema_name&quot;                                   &lt;span class=&quot;co&quot; id=&quot;mappingcollection3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
    lazy=&quot;true|extra|false&quot;                                &lt;span class=&quot;co&quot; id=&quot;mappingcollection4&quot;&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;(4)&quot;/&gt;&lt;/span&gt;
    inverse=&quot;true|false&quot;                                   &lt;span class=&quot;co&quot; id=&quot;mappingcollection5&quot;&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;(5)&quot;/&gt;&lt;/span&gt;
    cascade=&quot;all|none|save-update|delete|all-delete-orphan|&lt;span class=&quot;co&quot; id=&quot;mappingcollection6&quot;&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;(6)&quot;/&gt;&lt;/span&gt;delete-orphan&quot;
    sort=&quot;unsorted|natural|comparatorClass&quot;                &lt;span class=&quot;co&quot; id=&quot;mappingcollection7&quot;&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;(7)&quot;/&gt;&lt;/span&gt;
    order-by=&quot;column_name asc|desc&quot;                        &lt;span class=&quot;co&quot; id=&quot;mappingcollection8&quot;&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;(8)&quot;/&gt;&lt;/span&gt;
    where=&quot;arbitrary sql where condition&quot;                  &lt;span class=&quot;co&quot; id=&quot;mappingcollection9&quot;&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;(9)&quot;/&gt;&lt;/span&gt;
    fetch=&quot;join|select|subselect&quot;                          &lt;span class=&quot;co&quot; id=&quot;mappingcollection10&quot;&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;(10)&quot;/&gt;&lt;/span&gt;
    batch-size=&quot;N&quot;                                         &lt;span class=&quot;co&quot; id=&quot;mappingcollection11&quot;&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;(11)&quot;/&gt;&lt;/span&gt;
    access=&quot;field|property|ClassName&quot;                      &lt;span class=&quot;co&quot; id=&quot;mappingcollection12&quot;&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;(12)&quot;/&gt;&lt;/span&gt;
    optimistic-lock=&quot;true|false&quot;                           &lt;span class=&quot;co&quot; id=&quot;mappingcollection13&quot;&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;(13)&quot;/&gt;&lt;/span&gt;
    mutable=&quot;true|false&quot;                                   &lt;span class=&quot;co&quot; id=&quot;mappingcollection14&quot;&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;(14)&quot;/&gt;&lt;/span&gt;
    node=&quot;element-name|.&quot;
    embed-xml=&quot;true|false&quot;
&amp;gt;

    &amp;lt;key .... /&amp;gt;
    &amp;lt;map-key .... /&amp;gt;
    &amp;lt;element .... /&amp;gt;
&amp;lt;/map&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;: the collection property name&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;table&lt;/code&gt; (optional - defaults to property
            name): the name of the collection table. It is not used for
            one-to-many associations.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;schema&lt;/code&gt; (optional): the name of a table
            schema to override the schema declared on the root element&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/4.png&quot; alt=&quot;4&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): disables lazy fetching and specifies
            that the association is always eagerly fetched. It can also be
            used to enable &quot;extra-lazy&quot; fetching where most operations do not
            initialize the collection. This is suitable for large
            collections.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/5.png&quot; alt=&quot;5&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;): marks this collection as the &quot;inverse&quot;
            end of a bidirectional association.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/6.png&quot; alt=&quot;6&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;): enables operations to cascade to child
            entities.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/7.png&quot; alt=&quot;7&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;sort&lt;/code&gt; (optional): specifies a sorted
            collection with &lt;code class=&quot;literal&quot;&gt;natural&lt;/code&gt; sort order or a given
            comparator class.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/8.png&quot; alt=&quot;8&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;order-by&lt;/code&gt; (optional): specifies a table
            column or columns that define the iteration order of the
            &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt; or bag, together
            with an optional &lt;code class=&quot;literal&quot;&gt;asc&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;desc&lt;/code&gt;.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/9.png&quot; alt=&quot;9&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; (optional): specifies an arbitrary
            SQL &lt;code class=&quot;literal&quot;&gt;WHERE&lt;/code&gt; condition that is used when
            retrieving or removing the collection. This is useful if the
            collection needs to contain only a subset of the available
            data.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/10.png&quot; alt=&quot;10&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; (optional, defaults to
            &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt;): chooses between outer-join fetching,
            fetching by sequential select, and fetching by sequential
            subselect.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/11.png&quot; alt=&quot;11&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; (optional, defaults to
            &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt;): specifies a &quot;batch size&quot; for lazily
            fetching instances of this collection.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/12.png&quot; alt=&quot;12&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;access&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;property&lt;/code&gt;): the strategy Hibernate uses for
            accessing the collection property value.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/13.png&quot; alt=&quot;13&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): specifies that changes to the state of
            the collection results in increments of the owning entity&apos;s
            version. For one-to-many associations you may want to disable this
            setting.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/14.png&quot; alt=&quot;14&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;mutable&lt;/code&gt; (optional - defaults to
            &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt;): a value of &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;
            specifies that the elements of the collection never change. This
            allows for minor performance optimization in some cases.&lt;/p&gt;
          &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;After exploring the basic mapping of collections in the preceding
    paragraphs we will now focus details like physical mapping considerations,
    indexed collections and collections of value types.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.2.1. Collection foreign keys&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-foreignkeys&quot;/&gt;7.2.1. Collection foreign keys&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;On the database level collection instances are distinguished by
      the foreign key of the entity that owns the collection. This foreign key
      is referred to as the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;collection key column&lt;/em&gt;&lt;/span&gt;, or
      columns, of the collection table. The collection key column is mapped by
      the &lt;code class=&quot;literal&quot;&gt;@JoinColumn&lt;/code&gt; annotation respectively the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; XML element.&lt;/p&gt;

      &lt;p&gt;There can be a nullability constraint on the foreign key column.
      For most collections, this is implied. For unidirectional one-to-many
      associations, the foreign key column is nullable by default, so you may
      need to specify&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@JoinColumn(nullable=false)&lt;/pre&gt;

      &lt;p&gt;or&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;key column=&quot;productSerialNumber&quot; not-null=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

      &lt;p&gt;The foreign key constraint can use &lt;code class=&quot;literal&quot;&gt;ON DELETE
      CASCADE&lt;/code&gt;. In XML this can be expressed via:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;key column=&quot;productSerialNumber&quot; on-delete=&quot;cascade&quot;/&amp;gt;&lt;/pre&gt;

      &lt;p&gt;In annotations the Hibernate specific annotation @OnDelete has to
      be used.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@OnDelete(action=OnDeleteAction.CASCADE)&lt;/pre&gt;

      &lt;p&gt;See &lt;a class=&quot;xref&quot; href=&quot;#section.key&quot;&gt;Section 5.1.11.3, âKeyâ&lt;/a&gt; for more information
      about the &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.2.2. Indexed collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-indexed&quot;/&gt;7.2.2. Indexed collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;In the following paragraphs we have a closer look at the indexed
      collections &lt;code class=&quot;classname&quot;&gt;List&lt;/code&gt; and &lt;code class=&quot;classname&quot;&gt;Map&lt;/code&gt;
      how the their index can be mapped in Hibernate.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;7.2.2.1. Lists&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e5314&quot;/&gt;7.2.2.1. Lists&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Lists can be mapped in two different ways:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;as ordered lists, where the order is not materialized in the
            database&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;as indexed lists, where the order is materialized in the
            database&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;To order lists in memory, add
        &lt;code class=&quot;literal&quot;&gt;@javax.persistence.OrderBy&lt;/code&gt; to your property. This
        annotation takes as parameter a list of comma separated properties (of
        the target entity) and orders the collection accordingly (eg
        &lt;code class=&quot;code&quot;&gt;firstname asc, age desc, weight asc nulls last&lt;/code&gt;), if the string
        is empty, the collection will be ordered by the primary key of the target
        entity.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5325&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.7. Ordered lists using &lt;code class=&quot;classname&quot;&gt;@OrderBy&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;customer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OrderBy&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orders&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;number&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;customer&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;schema&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer_id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;To store the index value in a dedicated column, use the
        &lt;code class=&quot;classname&quot;&gt;@javax.persistence.OrderColumn&lt;/code&gt; annotation on
        your property. This annotations describes the column name and
        attributes of the column keeping the index value. This column is
        hosted on the table containing the association foreign key. If the
        column name is not specified, the default is the name of the
        referencing property, followed by underscore, followed by
        &lt;code class=&quot;literal&quot;&gt;ORDER&lt;/code&gt; (in the following example, it would be
        &lt;code class=&quot;literal&quot;&gt;orders_ORDER&lt;/code&gt;).&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5333&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.8. Explicit index column using
          &lt;code class=&quot;classname&quot;&gt;@OrderColumn&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;customer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OrderColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;orders_index&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orders&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;number&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;customer&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;schema&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|--------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|--------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer_id&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders_order&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|--------------|&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
            &lt;p&gt;
                We recommend you to convert the legacy &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.IndexColumn&lt;/code&gt;
                usages to the JPA standard &lt;code class=&quot;classname&quot;&gt;@javax.persistence.OrderColumn&lt;/code&gt;.
            &lt;/p&gt;
            &lt;p&gt;
                If you are leveraging a custom list index base (maybe currently using the
                &lt;code class=&quot;methodname&quot;&gt;org.hibernate.annotations.IndexColumn.literal&lt;/code&gt; attribute), you can
                specify this using the &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.ListIndexBase&lt;/code&gt; in conjunction
                with &lt;code class=&quot;classname&quot;&gt;@javax.persistence.OrderColumn&lt;/code&gt;.  The default base is 0 like in Java.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;Looking again at the Hibernate mapping file equivalent, the
        index of an array or list is always of type &lt;code class=&quot;literal&quot;&gt;integer&lt;/code&gt;
        and is mapped using the &lt;code class=&quot;literal&quot;&gt;&amp;lt;list-index&amp;gt;&lt;/code&gt; element.
        The mapped column contains sequential integers that are numbered from
        zero by default.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5348&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.9. index-list element for indexed collections in xml
          mapping&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;list-index
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;index1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        base=&quot;0|1|...&quot;/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column_name&lt;/code&gt; (required): the name of
                the column holding the collection index values.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;base&lt;/code&gt; (optional - defaults to
                &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt;): the value of the index column that
                corresponds to the first element of the list or array.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;If your table does not have an index column, and you still wish
        to use &lt;code class=&quot;literal&quot;&gt;List&lt;/code&gt; as the property type, you can map the
        property as a Hibernate &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;bag&amp;gt;&lt;/em&gt;&lt;/span&gt;. A bag does
        not retain its order when it is retrieved from the database, but it
        can be optionally sorted or ordered.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;7.2.2.2. Maps&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e5366&quot;/&gt;7.2.2.2. Maps&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;The question with &lt;code class=&quot;classname&quot;&gt;Map&lt;/code&gt;s is where the key
        value is stored. There are several options. Maps can borrow their keys
        from one of the associated entity properties or have dedicated columns
        to store an explicit key.&lt;/p&gt;

        &lt;p&gt;To use one of the target entity property as a key of the map,
        use &lt;code class=&quot;literal&quot;&gt;@MapKey(name=&quot;myProperty&quot;)&lt;/code&gt;, where
        &lt;code class=&quot;literal&quot;&gt;myProperty&lt;/code&gt; is a property name in the target entity.
        When using &lt;code class=&quot;literal&quot;&gt;@MapKey&lt;/code&gt; without the name attribute, the
        target entity primary key is used. The map key uses the same column as
        the property pointed out. There is no additional column defined to
        hold the map key, because the map key represent a target property. Be
        aware that once loaded, the key is no longer kept in sync with the
        property. In other words, if you change the property value, the key
        will not change automatically in your Java model.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5374&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.10. Use of target entity property as map key via
          &lt;code class=&quot;classname&quot;&gt;@MapKey&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;customer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MapKey&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;number&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;order&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orders&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;number&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;customer&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;schema&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer_id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Alternatively the map key is mapped to a dedicated column or
        columns. In order to customize the mapping use one of the following
        annotations:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;@&lt;code class=&quot;classname&quot;&gt;MapKeyColumn&lt;/code&gt; if the map key is a
            basic type. If you don&apos;t specify the column name, the name of the
            property followed by underscore followed by &lt;code class=&quot;literal&quot;&gt;KEY&lt;/code&gt;
            is used (for example &lt;code class=&quot;literal&quot;&gt;orders_KEY&lt;/code&gt;).&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@MapKeyEnumerated&lt;/code&gt; /
            &lt;code class=&quot;classname&quot;&gt;@MapKeyTemporal&lt;/code&gt; if the map key type is
            respectively an enum or a &lt;code class=&quot;classname&quot;&gt;Date&lt;/code&gt;.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@MapKeyJoinColumn&lt;/code&gt;/&lt;code class=&quot;classname&quot;&gt;@MapKeyJoinColumns&lt;/code&gt;
            if the map key type is another entity.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@AttributeOverride&lt;/code&gt;/&lt;code class=&quot;classname&quot;&gt;@AttributeOverrides&lt;/code&gt;
            when the map key is a embeddable object. Use
            &lt;code class=&quot;literal&quot;&gt;key.&lt;/code&gt; as a prefix for your embeddable object
            property names.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;You can also use &lt;code class=&quot;classname&quot;&gt;@MapKeyClass&lt;/code&gt; to define
        the type of the key if you don&apos;t use generics.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5401&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.11. Map key as basic type using
          &lt;code class=&quot;classname&quot;&gt;@MapKeyColumn&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cust_Order&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MapKeyColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;orders_number&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orders&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;GeneratedValue&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setId&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setNumber&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;number&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setCustomer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;customer&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;schema&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|---------------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cust_Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|---------------|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer_id&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;number&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|----------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;order_id&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer_id&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders_number&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;|-------------|&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;|---------------|&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;We recommend you to migrate from
          &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.MapKey&lt;/code&gt; /
          &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotation.MapKeyManyToMany&lt;/code&gt; to
          the new standard approach described above&lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;Using Hibernate mapping files there exists equivalent concepts
        to the descibed annotations. You have to use
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;map-key&amp;gt;&lt;/code&gt;,
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;map-key-many-to-many&amp;gt;&lt;/code&gt; and
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-map-key&amp;gt;&lt;/code&gt;.
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;map-key&amp;gt;&lt;/code&gt; is used for any basic type,
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;map-key-many-to-many&amp;gt;&lt;/code&gt; for an entity
        reference and &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-map-key&amp;gt;&lt;/code&gt; for a
        composite type.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5416&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.12. map-key xml mapping element&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;map-key
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;mapkey1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        formula=&quot;any SQL expression&quot;                       &lt;span class=&quot;co&quot; id=&quot;mapkey2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        type=&quot;type_name&quot;                                   &lt;span class=&quot;co&quot; id=&quot;mapkey3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        node=&quot;@attribute-name&quot;
        length=&quot;N&quot;/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional): the name of the
                column holding the collection index values.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): a SQL formula
                used to evaluate the key of the map.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (required): the type of the map
                keys.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5434&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.13. map-key-many-to-many&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;map-key-many-to-many
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;indexmanytomany1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        formula=&quot;any SQL expression&quot;                       &lt;span class=&quot;co&quot; id=&quot;indexmanytomany2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;co&quot; id=&quot;indexmanytomany3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        class=&quot;ClassName&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional): the name of the
                foreign key column for the collection index values.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): a SQ formula used
                to evaluate the foreign key of the map key.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; (required): the entity class
                used as the map key.&lt;/p&gt;
              &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.2.3. Collections of basic types and embeddable objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-ofvalues&quot;/&gt;7.2.3. Collections of basic types and embeddable objects&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;In some situations you don&apos;t need to associate two entities but
      simply create a collection of basic types or embeddable objects. Use the
      &lt;code class=&quot;classname&quot;&gt;@ElementCollection&lt;/code&gt; for this case.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5456&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.14. Collection of basic types mapped via
        &lt;code class=&quot;classname&quot;&gt;@ElementCollection&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ElementCollection&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CollectionTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Nicknames&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;joinColumns&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nickname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getNicknames&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;The collection table holding the collection data is set using the
      &lt;code class=&quot;classname&quot;&gt;@CollectionTable&lt;/code&gt; annotation. If omitted the
      collection table name defaults to the concatenation of the name of the
      containing entity and the name of the collection attribute, separated by
      an underscore. In our example, it would be
      &lt;code class=&quot;literal&quot;&gt;User_nicknames&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;The column holding the basic type is set using the
      &lt;code class=&quot;classname&quot;&gt;@Column&lt;/code&gt; annotation. If omitted, the column name
      defaults to the property name: in our example, it would be
      &lt;code class=&quot;literal&quot;&gt;nicknames&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;But you are not limited to basic types, the collection type can be
      any embeddable object. To override the columns of the embeddable object
      in the collection table, use the
      &lt;code class=&quot;classname&quot;&gt;@AttributeOverride&lt;/code&gt; annotation.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5468&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.15. @ElementCollection for embeddable objects&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ElementCollection&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CollectionTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Addresses&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;joinColumns&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverrides&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;street1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_street&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getAddresses&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Embeddable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStreet1&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{...}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Such an embeddable object cannot contains a collection
      itself.&lt;/p&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;in &lt;code class=&quot;classname&quot;&gt;@AttributeOverride&lt;/code&gt;, you must use the
        &lt;code class=&quot;literal&quot;&gt;value.&lt;/code&gt; prefix to override properties of the
        embeddable object used in the map value and the
        &lt;code class=&quot;literal&quot;&gt;key.&lt;/code&gt; prefix to override properties of the
        embeddable object used in the map key.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ElementCollection&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverrides&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;key.street1&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_street&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;AttributeOverride&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;value.stars&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fld_note&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Rating&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getFavHomes&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;We recommend you to migrate from
        &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.CollectionOfElements&lt;/code&gt;
        to the new &lt;code class=&quot;classname&quot;&gt;@ElementCollection&lt;/code&gt;
        annotation.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;Using the mapping file approach a collection of values is mapped
      using the &lt;code class=&quot;literal&quot;&gt;&amp;lt;element&amp;gt;&lt;/code&gt; tag. For example:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5484&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.16. &amp;lt;element&amp;gt; tag for collection values using mapping
        files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;element
        column=&quot;column_name&quot;                               &lt;span class=&quot;co&quot; id=&quot;element1b&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
        formula=&quot;any SQL expression&quot;                       &lt;span class=&quot;co&quot; id=&quot;element2b&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
        type=&quot;typename&quot;                                    &lt;span class=&quot;co&quot; id=&quot;element3b&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
        length=&quot;L&quot;
        precision=&quot;P&quot;
        scale=&quot;S&quot;
        not-null=&quot;true|false&quot;
        unique=&quot;true|false&quot;
        node=&quot;element-name&quot;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; (optional): the name of the
              column holding the collection element values.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;formula&lt;/code&gt; (optional): an SQL formula used
              to evaluate the element.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;type&lt;/code&gt; (required): the type of the
              collection element.&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;7.3. Advanced collection mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-advancedmappings&quot;/&gt;7.3. Advanced collection mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;7.3.1. Sorted collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-sorted&quot;/&gt;7.3.1. Sorted collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate supports collections implementing
      &lt;code class=&quot;literal&quot;&gt;java.util.SortedMap&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;java.util.SortedSet&lt;/code&gt;. With annotations you declare a
      sort comparator using &lt;code class=&quot;literal&quot;&gt;@Sort&lt;/code&gt;. You chose between the
      comparator types unsorted, natural or custom. If you want to use your
      own comparator implementation, you&apos;ll also have to specify the
      implementation class using the &lt;code class=&quot;literal&quot;&gt;comparator&lt;/code&gt; attribute.
      Note that you need to use either a &lt;code class=&quot;classname&quot;&gt;SortedSet&lt;/code&gt; or a
      &lt;code class=&quot;classname&quot;&gt;SortedMap&lt;/code&gt; interface.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5513&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.17. Sorted collection with @Sort&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;ALL&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fetch&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;EAGER&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;CUST_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;type&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SortType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;COMPARATOR&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;comparator&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;TicketComparator&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SortedSet&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getTickets&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tickets&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Using Hibernate mapping files you specify a comparator in the
      mapping file with &lt;code class=&quot;literal&quot;&gt;&amp;lt;sort&amp;gt;&lt;/code&gt;:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5518&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.18. Sorted collection using xml mapping&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;aliases&quot;
            table=&quot;person_aliases&quot; 
            sort=&quot;natural&quot;&amp;gt;
    &amp;lt;key column=&quot;person&quot;/&amp;gt;
    &amp;lt;element column=&quot;name&quot; type=&quot;string&quot;/&amp;gt;
&amp;lt;/set&amp;gt;

&amp;lt;map name=&quot;holidays&quot; sort=&quot;my.custom.HolidayComparator&quot;&amp;gt;
    &amp;lt;key column=&quot;year_id&quot;/&amp;gt;
    &amp;lt;map-key column=&quot;hol_name&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;element column=&quot;hol_date&quot; type=&quot;date&quot;/&amp;gt;
&amp;lt;/map&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Allowed values of the &lt;code class=&quot;literal&quot;&gt;sort&lt;/code&gt; attribute are
      &lt;code class=&quot;literal&quot;&gt;unsorted&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;natural&lt;/code&gt; and the name of
      a class implementing &lt;code class=&quot;literal&quot;&gt;java.util.Comparator&lt;/code&gt;.&lt;/p&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
        &lt;p&gt;Sorted collections actually behave like
        &lt;code class=&quot;literal&quot;&gt;java.util.TreeSet&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;java.util.TreeMap&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;If you want the database itself to order the collection elements,
      use the &lt;code class=&quot;literal&quot;&gt;order-by&lt;/code&gt; attribute of &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;bag&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;map&lt;/code&gt; mappings. This solution
      is implemented using &lt;code class=&quot;literal&quot;&gt;LinkedHashSet&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;LinkedHashMap&lt;/code&gt; and performs the ordering in the SQL
      query and not in the memory.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5537&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.19. Sorting in database using order-by&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;aliases&quot; table=&quot;person_aliases&quot; order-by=&quot;lower(name) asc&quot;&amp;gt;
    &amp;lt;key column=&quot;person&quot;/&amp;gt;
    &amp;lt;element column=&quot;name&quot; type=&quot;string&quot;/&amp;gt;
&amp;lt;/set&amp;gt;

&amp;lt;map name=&quot;holidays&quot; order-by=&quot;hol_date, hol_name&quot;&amp;gt;
    &amp;lt;key column=&quot;year_id&quot;/&amp;gt;
    &amp;lt;map-key column=&quot;hol_name&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;element column=&quot;hol_date type=&quot;date&quot;/&amp;gt;
&amp;lt;/map&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        

        &lt;p&gt;The value of the &lt;code class=&quot;literal&quot;&gt;order-by&lt;/code&gt; attribute is an SQL
        ordering, not an HQL ordering.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;Associations can even be sorted by arbitrary criteria at runtime
      using a collection &lt;code class=&quot;literal&quot;&gt;filter()&lt;/code&gt;:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5546&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.20. Sorting via a query filter&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sortedUsers = s.createFilter( group.getUsers(), &quot;order by this.name&quot; ).list();&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.3.2. Bidirectional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-bidirectional&quot;/&gt;7.3.2. Bidirectional associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional association&lt;/em&gt;&lt;/span&gt; allows navigation
      from both &quot;ends&quot; of the association. Two kinds of bidirectional
      association are supported: &lt;/p&gt;&lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;one-to-many&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;set or bag valued at one end and single-valued at the
              other&lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;many-to-many&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
              &lt;p&gt;set or bag valued at both ends&lt;/p&gt;
            &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

      &lt;p&gt;Often there exists a many to one association which is the owner
      side of a bidirectional relationship. The corresponding one to many
      association is in this case annotated by
      &lt;code class=&quot;literal&quot;&gt;@OneToMany(mappedBy=...)&lt;/code&gt;&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5564&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.21. Bidirectional one to many with many to one side as association
        owner&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Troop&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;troop&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Soldier&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getSoldiers&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Soldier&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;troop_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Troop&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getTroop&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;Troop&lt;/code&gt; has a bidirectional one to many
      relationship with &lt;code class=&quot;literal&quot;&gt;Soldier&lt;/code&gt; through the
      &lt;code class=&quot;literal&quot;&gt;troop&lt;/code&gt; property. You don&apos;t have to (must not) define
      any physical mapping in the &lt;code class=&quot;literal&quot;&gt;mappedBy&lt;/code&gt; side.&lt;/p&gt;

      &lt;p&gt;To map a bidirectional one to many, with the one-to-many side as
      the owning side, you have to remove the &lt;code class=&quot;literal&quot;&gt;mappedBy&lt;/code&gt;
      element and set the many to one &lt;code class=&quot;literal&quot;&gt;@JoinColumn&lt;/code&gt; as
      insertable and updatable to false. This solution is not optimized and
      will produce additional UPDATE statements.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5575&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.22. Bidirectional association with one to many side as
        owner&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Troop&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;troop_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;we&amp;nbsp;need&amp;nbsp;to&amp;nbsp;duplicate&amp;nbsp;the&amp;nbsp;physical&amp;nbsp;information&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Soldier&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getSoldiers&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Soldier&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;troop_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;insertable&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;updatable&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Troop&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getTroop&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;How does the mappping of a bidirectional mapping look like in
      Hibernate mapping xml? There you define a bidirectional one-to-many
      association by mapping a one-to-many association to the same table
      column(s) as a many-to-one association and declaring the many-valued end
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5580&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.23. Bidirectional one to many via Hibernate mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Parent&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;parent_id&quot;/&amp;gt;
    ....
    &amp;lt;set name=&quot;children&quot; inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Child&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;child_id&quot;/&amp;gt;
    ....
    &amp;lt;many-to-one name=&quot;parent&quot; 
        class=&quot;Parent&quot; 
        column=&quot;parent_id&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Mapping one end of an association with
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; does not affect the operation of
      cascades as these are orthogonal concepts.&lt;/p&gt;

      &lt;p&gt;A many-to-many association is defined logically using the
      &lt;code class=&quot;literal&quot;&gt;@ManyToMany&lt;/code&gt; annotation. You also have to describe the
      association table and the join conditions using the
      &lt;code class=&quot;literal&quot;&gt;@JoinTable&lt;/code&gt; annotation. If the association is
      bidirectional, one side has to be the owner and one side has to be the
      inverse end (ie. it will be ignored when updating the relationship
      values in the association table):&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5588&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.24. Many to many association via @ManyToMany&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Employer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;targetEntity&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;manytomany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cascade&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMPLOYER_EMPLOYEE&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;joinColumns&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMPER_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;inverseJoinColumns&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;EMPEE_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getEmployees&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;employees&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Employee&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;},&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mappedBy&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;employees&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;targetEntity&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Employer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Collection&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getEmployers&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;employers&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;In this example &lt;code class=&quot;classname&quot;&gt;@JoinTable&lt;/code&gt; defines a
      &lt;code class=&quot;literal&quot;&gt;name&lt;/code&gt;, an array of join columns, and an array of
      inverse join columns. The latter ones are the columns of the association
      table which refer to the &lt;code class=&quot;classname&quot;&gt;Employee&lt;/code&gt; primary key
      (the &quot;other side&quot;). As seen previously, the other side don&apos;t have to
      (must not) describe the physical mapping: a simple
      &lt;code class=&quot;literal&quot;&gt;mappedBy&lt;/code&gt; argument containing the owner side property
      name bind the two.&lt;/p&gt;

      &lt;p&gt;As any other annotations, most values are guessed in a many to
      many relationship. Without describing any physical mapping in a
      unidirectional many to many the following rules applied. The table name
      is the concatenation of the owner table name, &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt; and the
      other side table name. The foreign key name(s) referencing the owner
      table is the concatenation of the owner table name, &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt;
      and the owner primary key column(s). The foreign key name(s) referencing
      the other side is the concatenation of the owner property name,
      &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt;, and the other side primary key column(s). These are
      the same rules used for a unidirectional one to many
      relationship.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5601&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.25. Default values for code class=&quot;classname&quot;&gt;@ManyToMany&lt;/code&gt;
        (uni-directional)&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getImplantedIn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;City&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;no&amp;nbsp;bidirectional&amp;nbsp;relationship&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;A &lt;code class=&quot;literal&quot;&gt;Store_City&lt;/code&gt; is used as the join table. The
      &lt;code class=&quot;literal&quot;&gt;Store_id&lt;/code&gt; column is a foreign key to the
      &lt;code class=&quot;literal&quot;&gt;Store&lt;/code&gt; table. The &lt;code class=&quot;literal&quot;&gt;implantedIn_id&lt;/code&gt;
      column is a foreign key to the &lt;code class=&quot;literal&quot;&gt;City&lt;/code&gt; table.&lt;/p&gt;

      &lt;p&gt;Without describing any physical mapping in a bidirectional many to
      many the following rules applied. The table name is the concatenation of
      the owner table name, &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt; and the other side table name.
      The foreign key name(s) referencing the owner table is the concatenation
      of the other side property name, &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt;, and the owner
      primary key column(s). The foreign key name(s) referencing the other
      side is the concatenation of the owner property name,
      &lt;span class=&quot;keycap&quot;&gt;&lt;strong&gt;_&lt;/strong&gt;&lt;/span&gt;, and the other side primary key column(s). These are
      the same rules used for a unidirectional one to many
      relationship.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5615&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.26. Default values for &lt;code class=&quot;classname&quot;&gt;@ManyToMany&lt;/code&gt;
        (bi-directional)&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;PERSIST&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCustomers&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;mappedBy&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;customers&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getStores&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;A &lt;code class=&quot;literal&quot;&gt;Store_Customer&lt;/code&gt; is used as the join table. The
      &lt;code class=&quot;literal&quot;&gt;stores_id&lt;/code&gt; column is a foreign key to the
      &lt;code class=&quot;literal&quot;&gt;Store&lt;/code&gt; table. The &lt;code class=&quot;literal&quot;&gt;customers_id&lt;/code&gt;
      column is a foreign key to the &lt;code class=&quot;literal&quot;&gt;Customer&lt;/code&gt; table.&lt;/p&gt;

      &lt;p&gt;Using Hibernate mapping files you can map a bidirectional
      many-to-many association by mapping two many-to-many associations to the
      same database table and declaring one end as
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;inverse&lt;/em&gt;&lt;/span&gt;. &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
          &lt;p&gt;You cannot select an indexed collection.&lt;/p&gt;
        &lt;/div&gt;

      &lt;p&gt;&lt;a class=&quot;xref&quot; href=&quot;#example-many-to-many-mapping-file&quot; title=&quot;Example 7.27. Many to many association using Hibernate mapping files&quot;&gt;Example 7.27, âMany to many association using Hibernate mapping filesâ&lt;/a&gt; shows a
      bidirectional many-to-many association that illustrates how each
      category can have many items and each item can be in many
      categories:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-many-to-many-mapping-file&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.27. Many to many association using Hibernate mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Category&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;CATEGORY_ID&quot;/&amp;gt;
    ...
    &amp;lt;bag name=&quot;items&quot; table=&quot;CATEGORY_ITEM&quot;&amp;gt;
        &amp;lt;key column=&quot;CATEGORY_ID&quot;/&amp;gt;
        &amp;lt;many-to-many class=&quot;Item&quot; column=&quot;ITEM_ID&quot;/&amp;gt;
    &amp;lt;/bag&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Item&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;ITEM_ID&quot;/&amp;gt;
    ...

    &amp;lt;!-- inverse end --&amp;gt;
    &amp;lt;bag name=&quot;categories&quot; table=&quot;CATEGORY_ITEM&quot; inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;ITEM_ID&quot;/&amp;gt;
        &amp;lt;many-to-many class=&quot;Category&quot; column=&quot;CATEGORY_ID&quot;/&amp;gt;
    &amp;lt;/bag&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Changes made only to the inverse end of the association are
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; persisted. This means that Hibernate has two
      representations in memory for every bidirectional association: one link
      from A to B and another link from B to A. This is easier to understand
      if you think about the Java object model and how a many-to-many
      relationship in Javais created:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5636&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.28. Effect of inverse vs. non-inverse side of many to many
        associations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;category.getItems().add(item);           // The category now &quot;knows&quot; about the relationship
item.getCategories().add(category);      // The item now &quot;knows&quot; about the relationship

session.persist(item);                   // The relationship won&apos;t be saved!
session.persist(category);               // The relationship will be saved&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;The non-inverse side is used to save the in-memory representation
      to the database.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.3.3. Bidirectional associations with indexed collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-indexedbidirectional&quot;/&gt;7.3.3. Bidirectional associations with indexed collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;There are some additional considerations for bidirectional
      mappings with indexed collections (where one end is represented as a
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;list&amp;gt;&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;&amp;lt;map&amp;gt;&lt;/code&gt;) when
      using Hibernate mapping files. If there is a property of the child class
      that maps to the index column you can use
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; on the collection mapping:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5646&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.29. Bidirectional association with indexed collection&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Parent&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;parent_id&quot;/&amp;gt;
    ....
    &amp;lt;map name=&quot;children&quot; inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
        &amp;lt;map-key column=&quot;name&quot; 
            type=&quot;string&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
    &amp;lt;/map&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Child&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;child_id&quot;/&amp;gt;
    ....
    &amp;lt;property name=&quot;name&quot; 
        not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;many-to-one name=&quot;parent&quot; 
        class=&quot;Parent&quot; 
        column=&quot;parent_id&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;If there is no such property on the child class, the association
      cannot be considered truly bidirectional. That is, there is information
      available at one end of the association that is not available at the
      other end. In this case, you cannot map the collection
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;. Instead, you could use the following
      mapping:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5651&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.30. Bidirectional association with indexed collection, but no index
        column&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Parent&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;parent_id&quot;/&amp;gt;
    ....
    &amp;lt;map name=&quot;children&quot;&amp;gt;
        &amp;lt;key column=&quot;parent_id&quot;
            not-null=&quot;true&quot;/&amp;gt;
        &amp;lt;map-key column=&quot;name&quot; 
            type=&quot;string&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
    &amp;lt;/map&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Child&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;child_id&quot;/&amp;gt;
    ....
    &amp;lt;many-to-one name=&quot;parent&quot; 
        class=&quot;Parent&quot; 
        column=&quot;parent_id&quot;
        insert=&quot;false&quot;
        update=&quot;false&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Note that in this mapping, the collection-valued end of the
      association is responsible for updates to the foreign key.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.3.4. Ternary associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-ternary&quot;/&gt;7.3.4. Ternary associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;There are three possible approaches to mapping a ternary
      association. One approach is to use a &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt; with an
      association as its index:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5659&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.31. Ternary association mapping&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
public class Company {
   @Id 
   int id;
   ...
   @OneToMany // unidirectional
   @MapKeyJoinColumn(name=&quot;employee_id&quot;)
   Map&amp;lt;Employee, Contract&amp;gt; contracts;
}

// or

&amp;lt;map name=&quot;contracts&quot;&amp;gt;
    &amp;lt;key column=&quot;employer_id&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;map-key-many-to-many column=&quot;employee_id&quot; class=&quot;Employee&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Contract&quot;/&amp;gt;
&amp;lt;/map&amp;gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;A second approach is to remodel the association as an entity
      class. This is the most common approach. A final alternative is to use
      composite elements, which will be discussed later.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;7.3.5. Using an &amp;lt;idbag&amp;gt;&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-idbag&quot;/&gt;7.3.5. &lt;code class=&quot;literal&quot;&gt;Using an &amp;lt;idbag&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The majority of the many-to-many associations and collections of
      values shown previously all map to tables with composite keys, even
      though it has been suggested that entities should have synthetic
      identifiers (surrogate keys). A pure association table does not seem to
      benefit much from a surrogate key, although a collection of composite
      values &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;might&lt;/em&gt;&lt;/span&gt;. For this reason Hibernate provides a
      feature that allows you to map many-to-many associations and collections
      of values to a table with a surrogate key.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt; element lets you map a
      &lt;code class=&quot;literal&quot;&gt;List&lt;/code&gt; (or &lt;code class=&quot;literal&quot;&gt;Collection&lt;/code&gt;) with bag
      semantics. For example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;idbag name=&quot;lovers&quot; table=&quot;LOVERS&quot;&amp;gt;
    &amp;lt;collection-id column=&quot;ID&quot; type=&quot;long&quot;&amp;gt;
        &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
    &amp;lt;/collection-id&amp;gt;
    &amp;lt;key column=&quot;PERSON1&quot;/&amp;gt;
    &amp;lt;many-to-many column=&quot;PERSON2&quot; class=&quot;Person&quot; fetch=&quot;join&quot;/&amp;gt;
&amp;lt;/idbag&amp;gt;&lt;/pre&gt;

      &lt;p&gt;An &lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt; has a synthetic id generator,
      just like an entity class. A different surrogate key is assigned to each
      collection row. Hibernate does not, however, provide any mechanism for
      discovering the surrogate key value of a particular row.&lt;/p&gt;

      &lt;p&gt;The update performance of an &lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt;
      supersedes a regular &lt;code class=&quot;literal&quot;&gt;&amp;lt;bag&amp;gt;&lt;/code&gt;. Hibernate can
      locate individual rows efficiently and update or delete them
      individually, similar to a list, map or set.&lt;/p&gt;

      &lt;p&gt;In the current implementation, the &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt;
      identifier generation strategy is not supported for
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt; collection identifiers.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  

  

  &lt;div class=&quot;section&quot; title=&quot;7.4. Collection examples&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;collections-example&quot;/&gt;7.4. Collection examples&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;This section covers collection examples.&lt;/p&gt;

    &lt;p&gt;The following class has a collection of &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt;
    instances:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5686&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.32. Example classes &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt; and
      &lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Parent {
    private long id;
    private Set&amp;lt;Child&amp;gt; children;

    // getter/setter
    ...
}


public class Child {
   private long id;
   private String name

   
   // getter/setter
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;If each child has, at most, one parent, the most natural mapping is
    a one-to-many association:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5692&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.33. One to many unidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Parent {
    @Id
    @GeneratedValue
    private long id;

    @OneToMany
    private Set&amp;lt;Child&amp;gt; children;

    // getter/setter
    ...
}


public class Child {
   @Id
   @GeneratedValue
   private long id;
   private String name;

   
   // getter/setter
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5696&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.34. One to many unidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Parent&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;set name=&quot;children&quot;&amp;gt;
            &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Child&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;This maps to the following table definitions:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5701&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.35. Table definitions for unidirectional
      &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt;-&lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;
      relationship&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table parent ( id bigint not null primary key )
create table child ( id bigint not null primary key, name varchar(255), parent_id bigint )
alter table child add constraint childfk0 (parent_id) references parent&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;If the parent is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;required&lt;/em&gt;&lt;/span&gt;, use a bidirectional
    one-to-many association:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5708&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.36. One to many bidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Parent {
    @Id
    @GeneratedValue
    private long id;

    @OneToMany(mappedBy=&quot;parent&quot;)
    private Set&amp;lt;Child&amp;gt; children;

    // getter/setter
    ...
}


public class Child {
   @Id
   @GeneratedValue
   private long id;

   private String name;
 
   @ManyToOne
   private Parent parent;

   
   // getter/setter
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5712&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.37. One to many bidirectional &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt;
      relationship using mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Parent&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;set name=&quot;children&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Child&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;parent&quot; class=&quot;Parent&quot; column=&quot;parent_id&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Notice the &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5718&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.38. Table definitions for bidirectional
      &lt;code class=&quot;classname&quot;&gt;Parent&lt;/code&gt;-&lt;code class=&quot;classname&quot;&gt;Child&lt;/code&gt;
      relationship&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table parent ( id bigint not null primary key )
create table child ( id bigint not null
                     primary key,
                     name varchar(255),
                     parent_id bigint not null )
alter table child add constraint childfk0 (parent_id) references parent&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Alternatively, if this association must be unidirectional you can
    enforce the &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5725&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.39. Enforcing NOT NULL constraint in unidirectional relation using
      annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Parent {
    @Id
    @GeneratedValue
    private long id;

    @OneToMany(optional=false)
    private Set&amp;lt;Child&amp;gt; children;

    // getter/setter
    ...
}


public class Child {
   @Id
   @GeneratedValue
   private long id;
   private String name;

   
   // getter/setter
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5728&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.40. Enforcing NOT NULL constraint in unidirectional relation using
      mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Parent&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;set name=&quot;children&quot;&amp;gt;
            &amp;lt;key column=&quot;parent_id&quot; not-null=&quot;true&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Child&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;On the other hand, if a child has multiple parents, a many-to-many
    association is appropriate.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5732&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.41. Many to many &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt; relationship
      using annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Parent {
    @Id
    @GeneratedValue
    private long id;

    @ManyToMany
    private Set&amp;lt;Child&amp;gt; children;

    // getter/setter
    ...
}


public class Child {
   @Id
   @GeneratedValue
   private long id;

   private String name;

   
   // getter/setter
   ...
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5736&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.42. Many to many &lt;code class=&quot;classname&quot;&gt;Parent-Child&lt;/code&gt; relationship
      using mapping files&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Parent&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;set name=&quot;children&quot; table=&quot;childset&quot;&amp;gt;
            &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
            &amp;lt;many-to-many class=&quot;Child&quot; column=&quot;child_id&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Child&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Table definitions:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e5741&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 7.43. Table definitions for many to many releationship&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table parent ( id bigint not null primary key )
create table child ( id bigint not null primary key, name varchar(255) )
create table childset ( parent_id bigint not null,
                        child_id bigint not null,
                        primary key ( parent_id, child_id ) )
alter table childset add constraint childsetfk0 (parent_id) references parent
alter table childset add constraint childsetfk1 (child_id) references child&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;For more examples and a complete explanation of a parent/child
    relationship mapping, see &lt;a class=&quot;xref&quot; href=&quot;#example-parentchild&quot; title=&quot;Chapter 23. Example: Parent/Child&quot;&gt;Chapter 23, &lt;em&gt;Example: Parent/Child&lt;/em&gt;&lt;/a&gt; for more
    information. Even more complex association mappings are covered in the
    next chapter.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 8. Association Mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;associations&quot;/&gt;Chapter 8. Association Mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-intro&quot;&gt;8.1. Introduction&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional&quot;&gt;8.2. Unidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-m21&quot;&gt;8.2.1. Many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-121&quot;&gt;8.2.2. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-12m&quot;&gt;8.2.3. One-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join&quot;&gt;8.3. Unidirectional associations with join tables&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-12m&quot;&gt;8.3.1. One-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-m21&quot;&gt;8.3.2. Many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-121&quot;&gt;8.3.3. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-unidirectional-join-m2m&quot;&gt;8.3.4. Many-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional&quot;&gt;8.4. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-m21&quot;&gt;8.4.1. one-to-many / many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-121&quot;&gt;8.4.2. One-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join&quot;&gt;8.5. Bidirectional associations with join tables&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-12m&quot;&gt;8.5.1. one-to-many / many-to-one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-121&quot;&gt;8.5.2. one to one&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-bidirectional-join-m2m&quot;&gt;8.5.3. Many-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#assoc-complex&quot;&gt;8.6. More complex association mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;

    

    &lt;div class=&quot;section&quot; title=&quot;8.1. Introduction&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-intro&quot;/&gt;8.1. Introduction&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            Association mappings are often the most difficult thing to implement correctly. In
            this section we examine some canonical cases one by one, starting
            with unidirectional mappings and then bidirectional cases.
            We will use &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Address&lt;/code&gt; in all
            the examples.
        &lt;/p&gt;
        
        &lt;p&gt;
        	Associations will be classified by multiplicity and whether or not they map to an intervening
        	join table.
        &lt;/p&gt;
        
        &lt;p&gt;
        	Nullable foreign keys are not considered to be good practice in traditional data
        	modelling, so our examples do not use nullable foreign keys. This is not a
        	requirement of Hibernate, and the mappings will work if you drop the
        	nullability constraints.
        &lt;/p&gt;
        
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;8.2. Unidirectional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional&quot;/&gt;8.2. Unidirectional associations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;div class=&quot;section&quot; title=&quot;8.2.1. Many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-m21&quot;/&gt;8.2.1. Many-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional many-to-one association&lt;/em&gt;&lt;/span&gt; is the most 
            common kind of unidirectional association.
        /p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;many-to-one name=&quot;address&quot; 
        column=&quot;addressId&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;8.2.2. One-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-121&quot;/&gt;8.2.2. One-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional one-to-one association on a foreign key&lt;/em&gt;&lt;/span&gt;
            is almost identical. The only difference is the column unique constraint.
        &lt;/p&gt;
        
       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;many-to-one name=&quot;address&quot; 
        column=&quot;addressId&quot; 
        unique=&quot;true&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional one-to-one association on a primary key&lt;/em&gt;&lt;/span&gt;
            usually uses a special id generator In this example, however, we have reversed the direction
            of the association:
        &lt;/p&gt;
        
       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;foreign&quot;&amp;gt;
            &amp;lt;param name=&quot;property&quot;&amp;gt;person&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;one-to-one name=&quot;person&quot; constrained=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;
        
        &lt;div class=&quot;section&quot; title=&quot;8.2.3. One-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-12m&quot;/&gt;8.2.3. One-to-many&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional one-to-many association on a foreign key&lt;/em&gt;&lt;/span&gt; 
            is an unusual case, and is not recommended.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;addresses&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot; 
            not-null=&quot;true&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Address&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table Address ( addressId bigint not null primary key, personId bigint not null )
        &lt;/pre&gt;
        
        &lt;p&gt;
          You should instead use a join table for this kind of association.
        &lt;/p&gt;
        
        &lt;/div&gt;
    
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;8.3. Unidirectional associations with join tables&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-join&quot;/&gt;8.3. Unidirectional associations with join tables&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;div class=&quot;section&quot; title=&quot;8.3.1. One-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-join-12m&quot;/&gt;8.3.1. One-to-many&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional one-to-many association on a join table&lt;/em&gt;&lt;/span&gt; 
            is the preferred option. Specifying &lt;code class=&quot;literal&quot;&gt;unique=&quot;true&quot;&lt;/code&gt;,
            changes the multiplicity from many-to-many to one-to-many.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;addresses&quot; table=&quot;PersonAddress&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;addressId&quot;
            unique=&quot;true&quot;
            class=&quot;Address&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;8.3.2. Many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-join-m21&quot;/&gt;8.3.2. Many-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional many-to-one association on a join table&lt;/em&gt;&lt;/span&gt; 
            is common when the association is optional. For example:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;join table=&quot;PersonAddress&quot; 
        optional=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot; unique=&quot;true&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;address&quot;
            column=&quot;addressId&quot; 
            not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;8.3.3. One-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-join-121&quot;/&gt;8.3.3. One-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional one-to-one association on a join table&lt;/em&gt;&lt;/span&gt; is possible, 
   	but extremely unusual.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;join table=&quot;PersonAddress&quot; 
        optional=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot; 
            unique=&quot;true&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;address&quot;
            column=&quot;addressId&quot; 
            not-null=&quot;true&quot;
            unique=&quot;true&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;8.3.4. Many-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-unidirectional-join-m2m&quot;/&gt;8.3.4. Many-to-many&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            Finally, here is an example of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional many-to-many association&lt;/em&gt;&lt;/span&gt;.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;addresses&quot; table=&quot;PersonAddress&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;addressId&quot;
            class=&quot;Address&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;8.4. Bidirectional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional&quot;/&gt;8.4. Bidirectional associations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;div class=&quot;section&quot; title=&quot;8.4.1. one-to-many / many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-m21&quot;/&gt;8.4.1. one-to-many / many-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional many-to-one association&lt;/em&gt;&lt;/span&gt; is the
            most common kind of association. The following example illustrates the standard parent/child
            relationship.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;many-to-one name=&quot;address&quot; 
        column=&quot;addressId&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;people&quot; inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;addressId&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Person&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key, addressId bigint not null )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;

        &lt;p&gt;
            If you use a &lt;code class=&quot;literal&quot;&gt;List&lt;/code&gt;, or other indexed collection,
            set the &lt;code class=&quot;literal&quot;&gt;key&lt;/code&gt; column of the foreign key to &lt;code class=&quot;literal&quot;&gt;not null&lt;/code&gt;.
            Hibernate will manage the association from the collections side to maintain the index
            of each element, making the other side virtually inverse by setting
            &lt;code class=&quot;literal&quot;&gt;update=&quot;false&quot;&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;insert=&quot;false&quot;&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
   &amp;lt;id name=&quot;id&quot;/&amp;gt;
   ...
   &amp;lt;many-to-one name=&quot;address&quot;
      column=&quot;addressId&quot;
      not-null=&quot;true&quot;
      insert=&quot;false&quot;
      update=&quot;false&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
   &amp;lt;id name=&quot;id&quot;/&amp;gt;
   ...
   &amp;lt;list name=&quot;people&quot;&amp;gt;
      &amp;lt;key column=&quot;addressId&quot; not-null=&quot;true&quot;/&amp;gt;
      &amp;lt;list-index column=&quot;peopleIdx&quot;/&amp;gt;
      &amp;lt;one-to-many class=&quot;Person&quot;/&amp;gt;
   &amp;lt;/list&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                If the underlying foreign key column is &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt;, it 
		is important that you define &lt;code class=&quot;literal&quot;&gt;not-null=&quot;true&quot;&lt;/code&gt; on the
                &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; element of the collection mapping.
                Do not only
                declare &lt;code class=&quot;literal&quot;&gt;not-null=&quot;true&quot;&lt;/code&gt; on a possible nested
                &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element, but on the &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt;
                element.
            &lt;/p&gt;

        &lt;/div&gt;
        
        &lt;div class=&quot;section&quot; title=&quot;8.4.2. One-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-121&quot;/&gt;8.4.2. One-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional one-to-one association on a foreign key&lt;/em&gt;&lt;/span&gt;
            is common:
        &lt;/p&gt;
        
       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;many-to-one name=&quot;address&quot; 
        column=&quot;addressId&quot; 
        unique=&quot;true&quot;
        not-null=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
   &amp;lt;one-to-one name=&quot;person&quot; 
        property-ref=&quot;address&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional one-to-one association on a primary key&lt;/em&gt;&lt;/span&gt;
            uses the special id generator:
        &lt;/p&gt;
        
       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;one-to-one name=&quot;address&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;foreign&quot;&amp;gt;
            &amp;lt;param name=&quot;property&quot;&amp;gt;person&amp;lt;/param&amp;gt;
        &amp;lt;/generator&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;one-to-one name=&quot;person&quot; 
        constrained=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table Address ( personId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;
        
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;8.5. Bidirectional associations with join tables&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-join&quot;/&gt;8.5. Bidirectional associations with join tables&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;div class=&quot;section&quot; title=&quot;8.5.1. one-to-many / many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-join-12m&quot;/&gt;8.5.1. one-to-many / many-to-one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            The following is an example of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional one-to-many association on a join table&lt;/em&gt;&lt;/span&gt;.
            The &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; can go on either end of the
            association, on the collection, or on the join.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;addresses&quot; 
        table=&quot;PersonAddress&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;addressId&quot;
            unique=&quot;true&quot;
            class=&quot;Address&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;join table=&quot;PersonAddress&quot; 
        inverse=&quot;true&quot; 
        optional=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;addressId&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;person&quot;
            column=&quot;personId&quot;
            not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null primary key )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;

         &lt;div class=&quot;section&quot; title=&quot;8.5.2. one to one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-join-121&quot;/&gt;8.5.2. one to one&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional one-to-one association on a join table&lt;/em&gt;&lt;/span&gt; is possible,
            but extremely unusual.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;join table=&quot;PersonAddress&quot; 
        optional=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot; 
            unique=&quot;true&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;address&quot;
            column=&quot;addressId&quot; 
            not-null=&quot;true&quot;
            unique=&quot;true&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;join table=&quot;PersonAddress&quot; 
        optional=&quot;true&quot;
        inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;addressId&quot; 
            unique=&quot;true&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;person&quot;
            column=&quot;personId&quot; 
            not-null=&quot;true&quot;
            unique=&quot;true&quot;/&amp;gt;
    &amp;lt;/join&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null primary key, addressId bigint not null unique )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;

        &lt;/div&gt;
        
        &lt;div class=&quot;section&quot; title=&quot;8.5.3. Many-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-bidirectional-join-m2m&quot;/&gt;8.5.3. Many-to-many&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            Here is an example of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional many-to-many association&lt;/em&gt;&lt;/span&gt;.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;personId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;addresses&quot; table=&quot;PersonAddress&quot;&amp;gt;
        &amp;lt;key column=&quot;personId&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;addressId&quot;
            class=&quot;Address&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; column=&quot;addressId&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;set name=&quot;people&quot; inverse=&quot;true&quot; table=&quot;PersonAddress&quot;&amp;gt;
        &amp;lt;key column=&quot;addressId&quot;/&amp;gt;
        &amp;lt;many-to-many column=&quot;personId&quot;
            class=&quot;Person&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
create table Person ( personId bigint not null primary key )
create table PersonAddress ( personId bigint not null, addressId bigint not null, primary key (personId, addressId) )
create table Address ( addressId bigint not null primary key )
        &lt;/pre&gt;
        
        &lt;/div&gt;
        
    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;8.6. More complex association mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;assoc-complex&quot;/&gt;8.6. More complex association mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            More complex association joins are &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;extremely&lt;/em&gt;&lt;/span&gt; rare. 
            Hibernate handles more complex situations by using
            SQL fragments embedded in the mapping document. For example, if a table
            with historical account information data defines 
            &lt;code class=&quot;literal&quot;&gt;accountNumber&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;effectiveEndDate&lt;/code&gt; 
            and &lt;code class=&quot;literal&quot;&gt;effectiveStartDate&lt;/code&gt;columns, it would be mapped as follows:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;properties name=&quot;currentAccountKey&quot;&amp;gt;
    &amp;lt;property name=&quot;accountNumber&quot; type=&quot;string&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;property name=&quot;currentAccount&quot; type=&quot;boolean&quot;&amp;gt;
        &amp;lt;formula&amp;gt;case when effectiveEndDate is null then 1 else 0 end&amp;lt;/formula&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;property name=&quot;effectiveEndDate&quot; type=&quot;date&quot;/&amp;gt;
&amp;lt;property name=&quot;effectiveStateDate&quot; type=&quot;date&quot; not-null=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            You can then map an association to the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;current&lt;/em&gt;&lt;/span&gt; instance, 
            the one with null &lt;code class=&quot;literal&quot;&gt;effectiveEndDate&lt;/code&gt;, by using:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;currentAccountInfo&quot;
        property-ref=&quot;currentAccountKey&quot;
        class=&quot;AccountInfo&quot;&amp;gt;
    &amp;lt;column name=&quot;accountNumber&quot;/&amp;gt;
    &amp;lt;formula&amp;gt;&apos;1&apos;&amp;lt;/formula&amp;gt;
&amp;lt;/many-to-one&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            In a more complex example, imagine that the association between 
            &lt;code class=&quot;literal&quot;&gt;Employee&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Organization&lt;/code&gt; is maintained
            in an &lt;code class=&quot;literal&quot;&gt;Employment&lt;/code&gt; table full of historical employment data.
            An association to the employee&apos;s &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;most recent&lt;/em&gt;&lt;/span&gt; employer,
            the one with the most recent &lt;code class=&quot;literal&quot;&gt;startDate&lt;/code&gt;, could be mapped in the following way:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;join&amp;gt;
    &amp;lt;key column=&quot;employeeId&quot;/&amp;gt;
    &amp;lt;subselect&amp;gt;
        select employeeId, orgId 
        from Employments 
        group by orgId 
        having startDate = max(startDate)
    &amp;lt;/subselect&amp;gt;
    &amp;lt;many-to-one name=&quot;mostRecentEmployer&quot; 
            class=&quot;Organization&quot; 
            column=&quot;orgId&quot;/&amp;gt;
&amp;lt;/join&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            This functionality allows a degree of creativity and flexibility, but it is more practical 
            to handle these kinds of cases using HQL or a criteria query.
        &lt;/p&gt;

    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 9. Component Mapping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components&quot;/&gt;Chapter 9. Component Mapping&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-dependentobjects&quot;&gt;9.1. Dependent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-incollections&quot;&gt;9.2. Collections of dependent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-asmapindex&quot;&gt;9.3. Components as Map indices&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-compositeid&quot;&gt;9.4. Components as composite identifiers&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#components-dynamic&quot;&gt;9.5. Dynamic components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        The notion of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;component&lt;/em&gt;&lt;/span&gt; is re-used in several different contexts and purposes
        throughout Hibernate.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;9.1. Dependent objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components-dependentobjects&quot;/&gt;9.1. Dependent objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A component is a contained object that is persisted as a value type and not an entity
            reference. The term &quot;component&quot; refers to the object-oriented notion of composition
             and not to architecture-level components. For example, you can model a person like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Person {
    private java.util.Date birthday;
    private Name name;
    private String key;
    public String getKey() {
        return key;
    }
    private void setKey(String key) {
        this.key=key;
    }
    public java.util.Date getBirthday() {
        return birthday;
    }
    public void setBirthday(java.util.Date birthday) {
        this.birthday = birthday;
    }
    public Name getName() {
        return name;
    }
    public void setName(Name name) {
        this.name = name;
    }
    ......
    ......
}&lt;/pre&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class Name {
    char initial;
    String first;
    String last;
    public String getFirst() {
        return first;
    }
    void setFirst(String first) {
        this.first = first;
    }
    public String getLast() {
        return last;
    }
    void setLast(String last) {
        this.last = last;
    }
    public char getInitial() {
        return initial;
    }
    void setInitial(char initial) {
        this.initial = initial;
    }
}&lt;/pre&gt;

        &lt;p&gt;
            Now &lt;code class=&quot;literal&quot;&gt;Name&lt;/code&gt; can be persisted as a component of
            &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;. &lt;code class=&quot;literal&quot;&gt;Name&lt;/code&gt; defines getter
            and setter methods for its persistent properties, but it does not need to declare
            any interfaces or identifier properties.
        &lt;/p&gt;

        &lt;p&gt;
            Our Hibernate mapping would look like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;eg.Person&quot; table=&quot;person&quot;&amp;gt;
    &amp;lt;id name=&quot;Key&quot; column=&quot;pid&quot; type=&quot;string&quot;&amp;gt;
        &amp;lt;generator class=&quot;uuid&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;birthday&quot; type=&quot;date&quot;/&amp;gt;
    &amp;lt;component name=&quot;Name&quot; class=&quot;eg.Name&quot;&amp;gt; &amp;lt;!-- class attribute optional --&amp;gt;
        &amp;lt;property name=&quot;initial&quot;/&amp;gt;
        &amp;lt;property name=&quot;first&quot;/&amp;gt;
        &amp;lt;property name=&quot;last&quot;/&amp;gt;
    &amp;lt;/component&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The person table would have the columns &lt;code class=&quot;literal&quot;&gt;pid&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;birthday&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;initial&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;first&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;last&lt;/code&gt;.
        &lt;/p&gt;

        &lt;p&gt;
            Like value types, components do not support shared references. In other words, two
            persons could have the same name, but the two person objects would contain two independent
            name objects that were only &quot;the same&quot; by value. The null value semantics of a component are
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;ad hoc&lt;/em&gt;&lt;/span&gt;. When reloading the containing object, Hibernate will assume
            that if all component columns are null, then the entire component is null. This is suitable for most purposes.
        &lt;/p&gt;

        &lt;p&gt;
            The properties of a component can be of any Hibernate type (collections, many-to-one
            associations, other components, etc). Nested components should &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt;
            be considered an exotic usage. Hibernate is intended to support a fine-grained
            object model.
        &lt;/p&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element allows a &lt;code class=&quot;literal&quot;&gt;&amp;lt;parent&amp;gt;&lt;/code&gt;
            subelement that maps a property of the component class as a reference back to the
            containing entity.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;eg.Person&quot; table=&quot;person&quot;&amp;gt;
    &amp;lt;id name=&quot;Key&quot; column=&quot;pid&quot; type=&quot;string&quot;&amp;gt;
        &amp;lt;generator class=&quot;uuid&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;birthday&quot; type=&quot;date&quot;/&amp;gt;
    &amp;lt;component name=&quot;Name&quot; class=&quot;eg.Name&quot; unique=&quot;true&quot;&amp;gt;
        &amp;lt;parent name=&quot;namedPerson&quot;/&amp;gt; &amp;lt;!-- reference back to the Person --&amp;gt;
        &amp;lt;property name=&quot;initial&quot;/&amp;gt;
        &amp;lt;property name=&quot;first&quot;/&amp;gt;
        &amp;lt;property name=&quot;last&quot;/&amp;gt;
    &amp;lt;/component&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;9.2. Collections of dependent objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components-incollections&quot;/&gt;9.2. Collections of dependent objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Collections of components are supported (e.g. an array of type
            &lt;code class=&quot;literal&quot;&gt;Name&lt;/code&gt;). Declare your component collection by
            replacing the &lt;code class=&quot;literal&quot;&gt;&amp;lt;element&amp;gt;&lt;/code&gt; tag with a
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-element&amp;gt;&lt;/code&gt; tag:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;someNames&quot; table=&quot;some_names&quot; lazy=&quot;true&quot;&amp;gt;
    &amp;lt;key column=&quot;id&quot;/&amp;gt;
    &amp;lt;composite-element class=&quot;eg.Name&quot;&amp;gt; &amp;lt;!-- class attribute required --&amp;gt;
        &amp;lt;property name=&quot;initial&quot;/&amp;gt;
        &amp;lt;property name=&quot;first&quot;/&amp;gt;
        &amp;lt;property name=&quot;last&quot;/&amp;gt;
    &amp;lt;/composite-element&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

	&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
    	&lt;p&gt;
            If you define a &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt; of composite elements, it is
            important to implement &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; correctly.
        &lt;/p&gt;
	&lt;/div&gt;

        &lt;p&gt;
            Composite elements can contain components but not collections. If your
            composite element contains
            components, use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;nested-composite-element&amp;gt;&lt;/code&gt;
            tag. This case is a collection of components which
            themselves have components. You may want to consider if
            a one-to-many association is more appropriate. Remodel the
            composite element as an entity, but be aware that even though the Java model
            is the same, the relational model and persistence semantics are still
            slightly different.
        &lt;/p&gt;

        &lt;p&gt;
            A composite element mapping does not support null-able properties
            if you are using a &lt;code class=&quot;literal&quot;&gt;&amp;lt;set&amp;gt;&lt;/code&gt;. There is no separate primary key column
	    in the composite element table. Hibernate
            uses each column&apos;s value to identify a record when deleting objects,
            which is not possible with null values. You have to either use only
            not-null properties in a composite-element or choose a
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;list&amp;gt;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;&amp;lt;map&amp;gt;&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;bag&amp;gt;&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt;.
        &lt;/p&gt;

        &lt;p&gt;
            A special case of a composite element is a composite element with a nested
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt; element. This mapping allows
            you to map extra columns of a many-to-many association table to the
            composite element class. The following is a many-to-many association
            from &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;Item&lt;/code&gt;, where
            &lt;code class=&quot;literal&quot;&gt;purchaseDate&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;price&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;quantity&lt;/code&gt; are properties of the association:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;eg.Order&quot; .... &amp;gt;
    ....
    &amp;lt;set name=&quot;purchasedItems&quot; table=&quot;purchase_items&quot; lazy=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;order_id&quot;&amp;gt;
        &amp;lt;composite-element class=&quot;eg.Purchase&quot;&amp;gt;
            &amp;lt;property name=&quot;purchaseDate&quot;/&amp;gt;
            &amp;lt;property name=&quot;price&quot;/&amp;gt;
            &amp;lt;property name=&quot;quantity&quot;/&amp;gt;
            &amp;lt;many-to-one name=&quot;item&quot; class=&quot;eg.Item&quot;/&amp;gt; &amp;lt;!-- class attribute is optional --&amp;gt;
        &amp;lt;/composite-element&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            There cannot be a reference to the purchase on the other side for
            bidirectional association navigation. Components are value types and
            do not allow shared references. A single &lt;code class=&quot;literal&quot;&gt;Purchase&lt;/code&gt; can be in the
            set of an &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt;, but it cannot be referenced by the &lt;code class=&quot;literal&quot;&gt;Item&lt;/code&gt;
            at the same time.
        &lt;/p&gt;

        &lt;p&gt;Even ternary (or quaternary, etc) associations are possible:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;eg.Order&quot; .... &amp;gt;
    ....
    &amp;lt;set name=&quot;purchasedItems&quot; table=&quot;purchase_items&quot; lazy=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;order_id&quot;&amp;gt;
        &amp;lt;composite-element class=&quot;eg.OrderLine&quot;&amp;gt;
            &amp;lt;many-to-one name=&quot;purchaseDetails class=&quot;eg.Purchase&quot;/&amp;gt;
            &amp;lt;many-to-one name=&quot;item&quot; class=&quot;eg.Item&quot;/&amp;gt;
        &amp;lt;/composite-element&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Composite elements can appear in queries using the same syntax as
            associations to other entities.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;9.3. Components as Map indices&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components-asmapindex&quot;/&gt;9.3. Components as Map indices&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-map-key&amp;gt;&lt;/code&gt; element allows you to map a
            component class as the key of a &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;. Ensure that you override
            &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; correctly on
            the component class.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;9.4. Components as composite identifiers&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components-compositeid&quot;/&gt;9.4. Components as composite identifiers&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can use a component as an identifier of an entity class. Your component
            class must satisfy certain requirements:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    It must implement &lt;code class=&quot;literal&quot;&gt;java.io.Serializable&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    It must re-implement &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and
                    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; consistently with the database&apos;s
                    notion of composite key equality.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

	&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
	
        &lt;p&gt;
            In Hibernate, although the second requirement is not an absolutely hard
            requirement of Hibernate, it is recommended.
        &lt;/p&gt;
	&lt;/div&gt;

	&lt;p&gt;
            You cannot use an &lt;code class=&quot;literal&quot;&gt;IdentifierGenerator&lt;/code&gt; to generate composite keys.
            Instead the application must assign its own identifiers.
        &lt;/p&gt;

        &lt;p&gt;
            Use the &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-id&amp;gt;&lt;/code&gt; tag, with nested
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;key-property&amp;gt;&lt;/code&gt; elements, in place of the usual
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;id&amp;gt;&lt;/code&gt; declaration. For example, the
            &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt; class has a primary key that depends upon
            the (composite) primary key of &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;OrderLine&quot;&amp;gt;

    &amp;lt;composite-id name=&quot;id&quot; class=&quot;OrderLineId&quot;&amp;gt;
        &amp;lt;key-property name=&quot;lineId&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;orderId&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;customerId&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;

    &amp;lt;property name=&quot;name&quot;/&amp;gt;

    &amp;lt;many-to-one name=&quot;order&quot; class=&quot;Order&quot;
            insert=&quot;false&quot; update=&quot;false&quot;&amp;gt;
        &amp;lt;column name=&quot;orderId&quot;/&amp;gt;
        &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
    &amp;lt;/many-to-one&amp;gt;
    ....

&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Any foreign keys referencing the &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt; table are now
            composite. Declare this in your mappings for other classes. An association
            to &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt; is mapped like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;orderLine&quot; class=&quot;OrderLine&quot;&amp;gt;
&amp;lt;!-- the &quot;class&quot; attribute is optional, as usual --&amp;gt;
    &amp;lt;column name=&quot;lineId&quot;/&amp;gt;
    &amp;lt;column name=&quot;orderId&quot;/&amp;gt;
    &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
&amp;lt;/many-to-one&amp;gt;&lt;/pre&gt;

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; element is an alternative to the
                &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; attribute everywhere.  Using the
                &lt;code class=&quot;literal&quot;&gt;column&lt;/code&gt; element just gives more declaration
                options, which are mostly useful when utilizing
                &lt;code class=&quot;literal&quot;&gt;hbm2ddl&lt;/code&gt;
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;many-to-many&lt;/code&gt; association to &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt; also
            uses the composite foreign key:
        &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;undeliveredOrderLines&quot;&amp;gt;
    &amp;lt;key column name=&quot;warehouseId&quot;/&amp;gt;
    &amp;lt;many-to-many class=&quot;OrderLine&quot;&amp;gt;
        &amp;lt;column name=&quot;lineId&quot;/&amp;gt;
        &amp;lt;column name=&quot;orderId&quot;/&amp;gt;
        &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
    &amp;lt;/many-to-many&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The collection of &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt;s in &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt; would
            use:
        &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;orderLines&quot; inverse=&quot;true&quot;&amp;gt;
    &amp;lt;key&amp;gt;
        &amp;lt;column name=&quot;orderId&quot;/&amp;gt;
        &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
    &amp;lt;/key&amp;gt;
    &amp;lt;one-to-many class=&quot;OrderLine&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; element declares no columns.
        &lt;/p&gt;

        &lt;p&gt;
            If &lt;code class=&quot;literal&quot;&gt;OrderLine&lt;/code&gt; itself owns a collection, it also has a composite
            foreign key.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;OrderLine&quot;&amp;gt;
    ....
    ....
    &amp;lt;list name=&quot;deliveryAttempts&quot;&amp;gt;
        &amp;lt;key&amp;gt;   &amp;lt;!-- a collection inherits the composite key type --&amp;gt;
            &amp;lt;column name=&quot;lineId&quot;/&amp;gt;
            &amp;lt;column name=&quot;orderId&quot;/&amp;gt;
            &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
        &amp;lt;/key&amp;gt;
        &amp;lt;list-index column=&quot;attemptId&quot; base=&quot;1&quot;/&amp;gt;
        &amp;lt;composite-element class=&quot;DeliveryAttempt&quot;&amp;gt;
            ...
        &amp;lt;/composite-element&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;9.5. Dynamic components&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;components-dynamic&quot;/&gt;9.5. Dynamic components&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can also map a property of type &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt;:
        &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;dynamic-component name=&quot;userAttributes&quot;&amp;gt;
    &amp;lt;property name=&quot;foo&quot; column=&quot;FOO&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;property name=&quot;bar&quot; column=&quot;BAR&quot; type=&quot;integer&quot;/&amp;gt;
    &amp;lt;many-to-one name=&quot;baz&quot; class=&quot;Baz&quot; column=&quot;BAZ_ID&quot;/&amp;gt;
&amp;lt;/dynamic-component&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The semantics of a &lt;code class=&quot;literal&quot;&gt;&amp;lt;dynamic-component&amp;gt;&lt;/code&gt; mapping are identical
            to &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt;. The advantage of this kind of mapping is
            the ability to determine the actual properties of the bean at deployment time just
            by editing the mapping document. Runtime manipulation of the mapping document is
            also possible, using a DOM parser. You can also access, and change, Hibernate&apos;s
            configuration-time metamodel via the &lt;code class=&quot;literal&quot;&gt;Configuration&lt;/code&gt; object.
        &lt;/p&gt;

    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 10. Inheritance mapping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance&quot;/&gt;Chapter 10. Inheritance mapping&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-strategies&quot;&gt;10.1. The three strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperclass&quot;&gt;10.1.1. Table per class hierarchy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tablepersubclass&quot;&gt;10.1.2. Table per subclass&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tablepersubclass-discriminator&quot;&gt;10.1.3. Table per subclass: using a discriminator&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-mixing-tableperclass-tablepersubclass&quot;&gt;10.1.4. Mixing table per class hierarchy with table per subclass&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperconcrete&quot;&gt;10.1.5. Table per concrete class&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-tableperconcreate-polymorphism&quot;&gt;10.1.6. Table per concrete class using implicit polymorphism&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-mixingpolymorphism&quot;&gt;10.1.7. Mixing implicit polymorphism with other inheritance mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#inheritance-limitations&quot;&gt;10.2. Limitations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;10.1. The three strategies&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-strategies&quot;/&gt;10.1. The three strategies&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Hibernate supports the three basic inheritance mapping strategies:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;
            table per class hierarchy
        &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;
            table per subclass
        &lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;
            table per concrete class
        &lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
        
        &lt;p&gt;
            In addition, Hibernate supports a fourth, slightly different kind of 
            polymorphism:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;
            implicit polymorphism
        &lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
        
        &lt;p&gt;
            It is possible to use different mapping strategies for different
            branches of the same inheritance hierarchy. You can then make use of implicit
            polymorphism to achieve polymorphism across the whole hierarchy. However, 
            Hibernate does not support mixing &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;joined-subclass&amp;gt;&lt;/code&gt; and 
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;union-subclass&amp;gt;&lt;/code&gt; mappings under the same root
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; element. It is possible to mix together
            the table per hierarchy and table per subclass strategies under the
            the same &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; element, by combining the 
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt;
            elements (see below for an example).
        &lt;/p&gt;

        &lt;p&gt;
             It is possible to define &lt;code class=&quot;literal&quot;&gt;subclass&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;union-subclass&lt;/code&gt;,
             and &lt;code class=&quot;literal&quot;&gt;joined-subclass&lt;/code&gt; mappings in separate mapping documents directly beneath
             &lt;code class=&quot;literal&quot;&gt;hibernate-mapping&lt;/code&gt;. This allows you to extend a class hierarchy by adding
             a new mapping file. You must specify an &lt;code class=&quot;literal&quot;&gt;extends&lt;/code&gt; attribute in the subclass mapping,
             naming a previously mapped superclass. Previously this feature made the ordering of the mapping
             documents important. Since Hibernate, the ordering of mapping files is irrelevant when using the
             extends keyword. The ordering inside a single mapping file still needs to be defined as superclasses
             before subclasses.
         &lt;/p&gt;

         &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
 &amp;lt;hibernate-mapping&amp;gt;
     &amp;lt;subclass name=&quot;DomesticCat&quot; extends=&quot;Cat&quot; discriminator-value=&quot;D&quot;&amp;gt;
          &amp;lt;property name=&quot;name&quot; type=&quot;string&quot;/&amp;gt;
     &amp;lt;/subclass&amp;gt;
 &amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;


        &lt;div class=&quot;section&quot; title=&quot;10.1.1. Table per class hierarchy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-tableperclass&quot;/&gt;10.1.1. Table per class hierarchy&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Suppose we have an interface &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; with the implementors
            &lt;code class=&quot;literal&quot;&gt;CreditCardPayment&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;CashPayment&lt;/code&gt;,
            and &lt;code class=&quot;literal&quot;&gt;ChequePayment&lt;/code&gt;. The table per hierarchy mapping would
            display in the following way:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Payment&quot; table=&quot;PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator column=&quot;PAYMENT_TYPE&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;subclass name=&quot;CreditCardPayment&quot; discriminator-value=&quot;CREDIT&quot;&amp;gt;
        &amp;lt;property name=&quot;creditCardType&quot; column=&quot;CCTYPE&quot;/&amp;gt;
        ...
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;CashPayment&quot; discriminator-value=&quot;CASH&quot;&amp;gt;
        ...
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;ChequePayment&quot; discriminator-value=&quot;CHEQUE&quot;&amp;gt;
        ...
    &amp;lt;/subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Exactly one table is required. There is a limitation of this mapping 
            strategy: columns declared by the subclasses, such as &lt;code class=&quot;literal&quot;&gt;CCTYPE&lt;/code&gt;, 
            cannot have &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraints.
        &lt;/p&gt;
        
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.2. Table per subclass&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-tablepersubclass&quot;/&gt;10.1.2. Table per subclass&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A table per subclass mapping looks like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Payment&quot; table=&quot;PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;joined-subclass name=&quot;CreditCardPayment&quot; table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
        &amp;lt;property name=&quot;creditCardType&quot; column=&quot;CCTYPE&quot;/&amp;gt;
        ...
    &amp;lt;/joined-subclass&amp;gt;
    &amp;lt;joined-subclass name=&quot;CashPayment&quot; table=&quot;CASH_PAYMENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
        ...
    &amp;lt;/joined-subclass&amp;gt;
    &amp;lt;joined-subclass name=&quot;ChequePayment&quot; table=&quot;CHEQUE_PAYMENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
        ...
    &amp;lt;/joined-subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Four tables are required. The three subclass tables have primary
            key associations to the superclass table so the relational model
            is actually a one-to-one association.
        &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.3. Table per subclass: using a discriminator&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-tablepersubclass-discriminator&quot;/&gt;10.1.3. Table per subclass: using a discriminator&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Hibernate&apos;s implementation of table per subclass
            does not require a discriminator column. Other object/relational mappers use a
            different implementation of table per subclass that requires a type
            discriminator column in the superclass table. The approach taken by
            Hibernate is much more difficult to implement, but arguably more
            correct from a relational point of view. If you want to use
            a discriminator column with the table per subclass strategy, you
            can combine the use of &lt;code class=&quot;literal&quot;&gt;&amp;lt;subclass&amp;gt;&lt;/code&gt; and 
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;join&amp;gt;&lt;/code&gt;, as follows:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Payment&quot; table=&quot;PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator column=&quot;PAYMENT_TYPE&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;subclass name=&quot;CreditCardPayment&quot; discriminator-value=&quot;CREDIT&quot;&amp;gt;
        &amp;lt;join table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
            &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
            &amp;lt;property name=&quot;creditCardType&quot; column=&quot;CCTYPE&quot;/&amp;gt;
            ...
        &amp;lt;/join&amp;gt;
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;CashPayment&quot; discriminator-value=&quot;CASH&quot;&amp;gt;
        &amp;lt;join table=&quot;CASH_PAYMENT&quot;&amp;gt;
            &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
            ...
        &amp;lt;/join&amp;gt;
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;ChequePayment&quot; discriminator-value=&quot;CHEQUE&quot;&amp;gt;
        &amp;lt;join table=&quot;CHEQUE_PAYMENT&quot; fetch=&quot;select&quot;&amp;gt;
            &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
            ...
        &amp;lt;/join&amp;gt;
    &amp;lt;/subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The optional &lt;code class=&quot;literal&quot;&gt;fetch=&quot;select&quot;&lt;/code&gt; declaration tells Hibernate 
            not to fetch the &lt;code class=&quot;literal&quot;&gt;ChequePayment&lt;/code&gt; subclass data using an
            outer join when querying the superclass.
        &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.4. Mixing table per class hierarchy with table per subclass&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-mixing-tableperclass-tablepersubclass&quot;/&gt;10.1.4. Mixing table per class hierarchy with table per subclass&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can even mix the table per hierarchy and table per subclass strategies
            using the following approach:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Payment&quot; table=&quot;PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator column=&quot;PAYMENT_TYPE&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;subclass name=&quot;CreditCardPayment&quot; discriminator-value=&quot;CREDIT&quot;&amp;gt;
        &amp;lt;join table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
            &amp;lt;property name=&quot;creditCardType&quot; column=&quot;CCTYPE&quot;/&amp;gt;
            ...
        &amp;lt;/join&amp;gt;
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;CashPayment&quot; discriminator-value=&quot;CASH&quot;&amp;gt;
        ...
    &amp;lt;/subclass&amp;gt;
    &amp;lt;subclass name=&quot;ChequePayment&quot; discriminator-value=&quot;CHEQUE&quot;&amp;gt;
        ...
    &amp;lt;/subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            For any of these mapping strategies, a polymorphic association to the root
            &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; class is mapped using 
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;payment&quot; column=&quot;PAYMENT_ID&quot; class=&quot;Payment&quot;/&amp;gt;&lt;/pre&gt;
    
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.5. Table per concrete class&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-tableperconcrete&quot;/&gt;10.1.5. Table per concrete class&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            There are two ways we can map the table per concrete class
            strategy. First, you can use &lt;code class=&quot;literal&quot;&gt;&amp;lt;union-subclass&amp;gt;&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Payment&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;sequence&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;union-subclass name=&quot;CreditCardPayment&quot; table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
        &amp;lt;property name=&quot;creditCardType&quot; column=&quot;CCTYPE&quot;/&amp;gt;
        ...
    &amp;lt;/union-subclass&amp;gt;
    &amp;lt;union-subclass name=&quot;CashPayment&quot; table=&quot;CASH_PAYMENT&quot;&amp;gt;
        ...
    &amp;lt;/union-subclass&amp;gt;
    &amp;lt;union-subclass name=&quot;ChequePayment&quot; table=&quot;CHEQUE_PAYMENT&quot;&amp;gt;
        ...
    &amp;lt;/union-subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Three tables are involved for the subclasses. Each table defines columns for
            all properties of the class, including inherited properties.
        &lt;/p&gt;
        
        &lt;p&gt;
            The limitation of this approach is that if a property is mapped on the 
            superclass, the column name must be the same on all subclass tables.
            The identity generator strategy is not allowed in union subclass inheritance.
	The primary key seed has to be shared across all unioned subclasses
	of a hierarchy.
	
        &lt;/p&gt;

        &lt;p&gt;
            If your superclass is abstract, map it with &lt;code class=&quot;literal&quot;&gt;abstract=&quot;true&quot;&lt;/code&gt;.
            If it is not abstract, an additional table (it defaults to
            &lt;code class=&quot;literal&quot;&gt;PAYMENT&lt;/code&gt; in the example above), is needed to hold instances
            of the superclass.
        &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.6. Table per concrete class using implicit polymorphism&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-tableperconcreate-polymorphism&quot;/&gt;10.1.6. Table per concrete class using implicit polymorphism&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            An alternative approach is to make use of implicit polymorphism:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;CreditCardPayment&quot; table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;CREDIT_PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;CREDIT_AMOUNT&quot;/&amp;gt;
    ...
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;CashPayment&quot; table=&quot;CASH_PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;CASH_PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;CASH_AMOUNT&quot;/&amp;gt;
    ...
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;ChequePayment&quot; table=&quot;CHEQUE_PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;CHEQUE_PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;CHEQUE_AMOUNT&quot;/&amp;gt;
    ...
&amp;lt;/class&amp;gt;&lt;/pre&gt;
           
        &lt;p&gt;
            Notice that the &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; interface 
            is not mentioned explicitly. Also notice that properties of &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; are 
            mapped in each of the subclasses. If you want to avoid duplication, consider
            using XML entities
            (for example, &lt;code class=&quot;literal&quot;&gt;[ &amp;lt;!ENTITY allproperties SYSTEM &quot;allproperties.xml&quot;&amp;gt; ]&lt;/code&gt;
            in the &lt;code class=&quot;literal&quot;&gt;DOCTYPE&lt;/code&gt; declaration and 
            &lt;code class=&quot;literal&quot;&gt;%allproperties;&lt;/code&gt; in the mapping).
        &lt;/p&gt;
        
        &lt;p&gt;
            The disadvantage of this approach is that Hibernate does not generate SQL
            &lt;code class=&quot;literal&quot;&gt;UNION&lt;/code&gt;s when performing polymorphic queries.
        &lt;/p&gt;

        &lt;p&gt;
            For this mapping strategy, a polymorphic association to &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; 
            is usually mapped using &lt;code class=&quot;literal&quot;&gt;&amp;lt;any&amp;gt;&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;any name=&quot;payment&quot; meta-type=&quot;string&quot; id-type=&quot;long&quot;&amp;gt;
    &amp;lt;meta-value value=&quot;CREDIT&quot; class=&quot;CreditCardPayment&quot;/&amp;gt;
    &amp;lt;meta-value value=&quot;CASH&quot; class=&quot;CashPayment&quot;/&amp;gt;
    &amp;lt;meta-value value=&quot;CHEQUE&quot; class=&quot;ChequePayment&quot;/&amp;gt;
    &amp;lt;column name=&quot;PAYMENT_CLASS&quot;/&amp;gt;
    &amp;lt;column name=&quot;PAYMENT_ID&quot;/&amp;gt;
&amp;lt;/any&amp;gt;&lt;/pre&gt;
           
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;10.1.7. Mixing implicit polymorphism with other inheritance mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-mixingpolymorphism&quot;/&gt;10.1.7. Mixing implicit polymorphism with other inheritance mappings&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Since the subclasses 
            are each mapped in their own &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; element, and since
            &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; is just an interface), each of the subclasses could 
            easily be part of another inheritance hierarchy. You can still use polymorphic
            queries against the &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; interface.
       &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;CreditCardPayment&quot; table=&quot;CREDIT_PAYMENT&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;CREDIT_PAYMENT_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;discriminator column=&quot;CREDIT_CARD&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;property name=&quot;amount&quot; column=&quot;CREDIT_AMOUNT&quot;/&amp;gt;
    ...
    &amp;lt;subclass name=&quot;MasterCardPayment&quot; discriminator-value=&quot;MDC&quot;/&amp;gt;
    &amp;lt;subclass name=&quot;VisaPayment&quot; discriminator-value=&quot;VISA&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;NonelectronicTransaction&quot; table=&quot;NONELECTRONIC_TXN&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot; type=&quot;long&quot; column=&quot;TXN_ID&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    ...
    &amp;lt;joined-subclass name=&quot;CashPayment&quot; table=&quot;CASH_PAYMENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
        &amp;lt;property name=&quot;amount&quot; column=&quot;CASH_AMOUNT&quot;/&amp;gt;
        ...
    &amp;lt;/joined-subclass&amp;gt;
    &amp;lt;joined-subclass name=&quot;ChequePayment&quot; table=&quot;CHEQUE_PAYMENT&quot;&amp;gt;
        &amp;lt;key column=&quot;PAYMENT_ID&quot;/&amp;gt;
        &amp;lt;property name=&quot;amount&quot; column=&quot;CHEQUE_AMOUNT&quot;/&amp;gt;
        ...
    &amp;lt;/joined-subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            Once again, &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; is not mentioned explicitly. If we
            execute a query against the &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt; interface, for
            example &lt;code class=&quot;literal&quot;&gt;from Payment&lt;/code&gt;, Hibernate
            automatically returns instances of &lt;code class=&quot;literal&quot;&gt;CreditCardPayment&lt;/code&gt;
            (and its subclasses, since they also implement &lt;code class=&quot;literal&quot;&gt;Payment&lt;/code&gt;),
            &lt;code class=&quot;literal&quot;&gt;CashPayment&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;ChequePayment&lt;/code&gt;, but
            not instances of &lt;code class=&quot;literal&quot;&gt;NonelectronicTransaction&lt;/code&gt;.
        &lt;/p&gt;
        
        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;10.2. Limitations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;inheritance-limitations&quot;/&gt;10.2. Limitations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            There are limitations to the &quot;implicit polymorphism&quot; approach to
            the table per concrete-class mapping strategy. There are somewhat less
            restrictive limitations to &lt;code class=&quot;literal&quot;&gt;&amp;lt;union-subclass&amp;gt;&lt;/code&gt;
            mappings.
        &lt;/p&gt;

        &lt;p&gt;
            The following table shows the limitations of table per concrete-class
            mappings, and of implicit polymorphism, in Hibernate.
        &lt;/p&gt;
            
        &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e6117&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 10.1. Features of inheritance mappings&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
            
            &lt;table summary=&quot;Features of inheritance mappings&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c2&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c3&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c4&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c5&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c6&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c7&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c8&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c9&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Inheritance strategy&lt;/th&gt;th align=&quot;left&quot;&gt;Polymorphic many-to-one&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic one-to-one&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic one-to-many&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic many-to-many&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic &lt;code class=&quot;literal&quot;&gt;load()/get()&lt;/code&gt;&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic queries&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Polymorphic joins&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Outer join fetching&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;table per class-hierarchy&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-many&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;s.get(Payment.class, id)&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Order o join o.payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;table per subclass&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-many&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;s.get(Payment.class, id)&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Order o join o.payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;table per concrete-class (union-subclass)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; (for &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; only)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-many&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;s.get(Payment.class, id)&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Order o join o.payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;table per concrete class (implicit polymorphism)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;any&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-any&amp;gt;&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;s.createCriteria(Payment.class).add( Restrictions.idEq(id) ).uniqueResult()&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;from Payment p&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not supported&lt;/em&gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 11. Working with objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate&quot;/&gt;Chapter 11. Working with objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-overview&quot;&gt;11.1. Hibernate object states&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-makingpersistent&quot;&gt;11.2. Making objects persistent&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-loading&quot;&gt;11.3. Loading an object&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying&quot;&gt;11.4. Querying&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying-executing&quot;&gt;11.4.1. Executing queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-filtering&quot;&gt;11.4.2. Filtering collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objecstate-querying-criteria&quot;&gt;11.4.3. Criteria queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-querying-nativesql&quot;&gt;11.4.4. Queries in native SQL&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-modifying&quot;&gt;11.5. Modifying persistent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-detached&quot;&gt;11.6. Modifying detached objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-saveorupdate&quot;&gt;11.7. Automatic state detection&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-deleting&quot;&gt;11.8. Deleting persistent objects&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-replicating&quot;&gt;11.9. Replicating object between two different datastores&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-flushing&quot;&gt;11.10. Flushing the Session&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-transitive&quot;&gt;11.11. Transitive persistence&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-metadata&quot;&gt;11.12. Using metadata&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;p&gt;Hibernate is a full object/relational mapping solution that not only
  shields the developer from the details of the underlying database management
  system, but also offers &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;state management&lt;/em&gt;&lt;/span&gt; of objects.
  This is, contrary to the management of SQL &lt;code class=&quot;literal&quot;&gt;statements&lt;/code&gt; in
  common JDBC/SQL persistence layers, a natural object-oriented view of
  persistence in Java applications.&lt;/p&gt;

  &lt;p&gt;In other words, Hibernate application developers should always think
  about the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;state&lt;/em&gt;&lt;/span&gt; of their objects, and not necessarily
  about the execution of SQL statements. This part is taken care of by
  Hibernate and is only relevant for the application developer when tuning the
  performance of the system.&lt;/p&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.1. Hibernate object states&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-overview&quot;/&gt;11.1. Hibernate object states&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate defines and supports the following object states:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Transient&lt;/em&gt;&lt;/span&gt; - an object is transient if it
        has just been instantiated using the &lt;code class=&quot;literal&quot;&gt;new&lt;/code&gt; operator,
        and it is not associated with a Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.
        It has no persistent representation in the database and no identifier
        value has been assigned. Transient instances will be destroyed by the
        garbage collector if the application does not hold a reference
        anymore. Use the Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; to make an
        object persistent (and let Hibernate take care of the SQL statements
        that need to be executed for this transition).&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Persistent&lt;/em&gt;&lt;/span&gt; - a persistent instance has a
        representation in the database and an identifier value. It might just
        have been saved or loaded, however, it is by definition in the scope
        of a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. Hibernate will detect any changes
        made to an object in persistent state and synchronize the state with
        the database when the unit of work completes. Developers do not
        execute manual &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; statements, or
        &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; statements when an object should be made
        transient.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Detached&lt;/em&gt;&lt;/span&gt; - a detached instance is an object
        that has been persistent, but its &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; has been
        closed. The reference to the object is still valid, of course, and the
        detached instance might even be modified in this state. A detached
        instance can be reattached to a new &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; at a
        later point in time, making it (and all the modifications) persistent
        again. This feature enables a programming model for long running units
        of work that require user think-time. We call them
        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;application transactions&lt;/em&gt;&lt;/span&gt;, i.e., a unit of work
        from the point of view of the user.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;We will now discuss the states and state transitions (and the
    Hibernate methods that trigger a transition) in more detail.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.2. Making objects persistent&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-makingpersistent&quot;/&gt;11.2. Making objects persistent&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Newly instantiated instances of a persistent class are considered
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;transient&lt;/em&gt;&lt;/span&gt; by Hibernate. We can make a transient
    instance &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;persistent&lt;/em&gt;&lt;/span&gt; by associating it with a
    session:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DomesticCat fritz = new DomesticCat();
fritz.setColor(Color.GINGER);
fritz.setSex(&apos;M&apos;);
fritz.setName(&quot;Fritz&quot;);
Long generatedId = (Long) sess.save(fritz);&lt;/pre&gt;

    &lt;p&gt;If &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; has a generated identifier, the identifier
    is generated and assigned to the &lt;code class=&quot;literal&quot;&gt;cat&lt;/code&gt; when
    &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; is called. If &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; has an
    &lt;code class=&quot;literal&quot;&gt;assigned&lt;/code&gt; identifier, or a composite key, the identifier
    should be assigned to the &lt;code class=&quot;literal&quot;&gt;cat&lt;/code&gt; instance before calling
    &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;. You can also use &lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt;
    instead of &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;, with the semantics defined in the
    EJB3 early draft.&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt; makes a transient instance
        persistent. However, it does not guarantee that the identifier value
        will be assigned to the persistent instance immediately, the
        assignment might happen at flush time. &lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt;
        also guarantees that it will not execute an &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt;
        statement if it is called outside of transaction boundaries. This is
        useful in long-running conversations with an extended
        Session/persistence context.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; does guarantee to return an
        identifier. If an INSERT has to be executed to get the identifier (
        e.g. &quot;identity&quot; generator, not &quot;sequence&quot;), this INSERT happens
        immediately, no matter if you are inside or outside of a transaction.
        This is problematic in a long-running conversation with an extended
        Session/persistence context.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Alternatively, you can assign the identifier using an overloaded
    version of &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DomesticCat pk = new DomesticCat();
pk.setColor(Color.TABBY);
pk.setSex(&apos;F&apos;);
pk.setName(&quot;PK&quot;);
pk.setKittens( new HashSet() );
pk.addKitten(fritz);
sess.save( pk, new Long(1234) );&lt;/pre&gt;

    &lt;p&gt;If the object you make persistent has associated objects (e.g. the
    &lt;code class=&quot;literal&quot;&gt;kittens&lt;/code&gt; collection in the previous example), these
    objects can be made persistent in any order you like unless you have a
    &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint upon a foreign key column. There is
    never a risk of violating foreign key constraints. However, you might
    violate a &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint if you
    &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; the objects in the wrong order.&lt;/p&gt;

    &lt;p&gt;Usually you do not bother with this detail, as you will normally use
    Hibernate&apos;s &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;transitive persistence&lt;/em&gt;&lt;/span&gt; feature to save
    the associated objects automatically. Then, even &lt;code class=&quot;literal&quot;&gt;NOT
    NULL&lt;/code&gt; constraint violations do not occur - Hibernate will take
    care of everything. Transitive persistence is discussed later in this
    chapter.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.3. Loading an object&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-loading&quot;/&gt;11.3. Loading an object&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; methods of &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
    provide a way of retrieving a persistent instance if you know its
    identifier. &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; takes a class object and loads the
    state into a newly instantiated instance of that class in a persistent
    state.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat fritz = (Cat) sess.load(Cat.class, generatedId);&lt;/pre&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// you need to wrap primitive identifiers
long id = 1234;
DomesticCat pk = (DomesticCat) sess.load( DomesticCat.class, new Long(id) );&lt;/pre&gt;

    &lt;p&gt;Alternatively, you can load state into a given instance:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = new DomesticCat();
// load pk&apos;s state into cat
sess.load( cat, new Long(pkId) );
Set kittens = cat.getKittens();&lt;/pre&gt;

    &lt;p&gt;Be aware that &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; will throw an unrecoverable
    exception if there is no matching database row. If the class is mapped
    with a proxy, &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; just returns an uninitialized
    proxy and does not actually hit the database until you invoke a method of
    the proxy. This is useful if you wish to create an association to an
    object without actually loading it from the database. It also allows
    multiple instances to be loaded as a batch if
    &lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; is defined for the class mapping.&lt;/p&gt;

    &lt;p&gt;If you are not certain that a matching row exists, you should use
    the &lt;code class=&quot;literal&quot;&gt;get()&lt;/code&gt; method which hits the database immediately
    and returns null if there is no matching row.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = (Cat) sess.get(Cat.class, id);
if (cat==null) {
    cat = new Cat();
    sess.save(cat, id);
}
return cat;&lt;/pre&gt;

    &lt;p&gt;You can even load an object using an SQL &lt;code class=&quot;literal&quot;&gt;SELECT ... FOR
    UPDATE&lt;/code&gt;, using a &lt;code class=&quot;literal&quot;&gt;LockMode&lt;/code&gt;. See the API
    documentation for more information.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = (Cat) sess.get(Cat.class, id, LockMode.UPGRADE);&lt;/pre&gt;

    &lt;p&gt;Any associated instances or contained collections will
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; be selected &lt;code class=&quot;literal&quot;&gt;FOR UPDATE&lt;/code&gt;, unless
    you decide to specify &lt;code class=&quot;literal&quot;&gt;lock&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt; as
    a cascade style for the association.&lt;/p&gt;

    &lt;p&gt;It is possible to re-load an object and all its collections at any
    time, using the &lt;code class=&quot;literal&quot;&gt;refresh()&lt;/code&gt; method. This is useful when
    database triggers are used to initialize some of the properties of the
    object.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.save(cat);
sess.flush(); //force the SQL INSERT
sess.refresh(cat); //re-read the state (after the trigger executes)&lt;/pre&gt;

    &lt;p&gt;How much does Hibernate load from the database and how many SQL
    &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;s will it use? This depends on the
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;fetching strategy&lt;/em&gt;&lt;/span&gt;. This is explained in &lt;a class=&quot;xref&quot; href=&quot;#performance-fetching&quot; title=&quot;20.1. Fetching strategies&quot;&gt;Section 20.1, âFetching strategiesâ&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.4. Querying&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying&quot;/&gt;11.4. Querying&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;If you do not know the identifiers of the objects you are looking
    for, you need a query. Hibernate supports an easy-to-use but powerful
    object oriented query language (HQL). For programmatic query creation,
    Hibernate supports a sophisticated Criteria and Example query feature (QBC
    and QBE). You can also express your query in the native SQL of your
    database, with optional support from Hibernate for result set conversion
    into objects.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;11.4.1. Executing queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing&quot;/&gt;11.4.1. Executing queries&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;HQL and native SQL queries are represented with an instance of
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.Query&lt;/code&gt;. This interface offers methods
      for parameter binding, result set handling, and for the execution of the
      actual query. You always obtain a &lt;code class=&quot;literal&quot;&gt;Query&lt;/code&gt; using the
      current &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = session.createQuery(
    &quot;from Cat as cat where cat.birthdate &amp;lt; ?&quot;)
    .setDate(0, date)
    .list();

List mothers = session.createQuery(
    &quot;select mother from Cat as cat join cat.mother as mother where cat.name = ?&quot;)
    .setString(0, name)
    .list();

List kittens = session.createQuery(
    &quot;from Cat as cat where cat.mother = ?&quot;)
    .setEntity(0, pk)
    .list();

Cat mother = (Cat) session.createQuery(
    &quot;select cat.mother from Cat as cat where cat = ?&quot;)
    .setEntity(0, izi)
    .uniqueResult();]]

Query mothersWithKittens = (Cat) session.createQuery(
    &quot;select mother from Cat as mother left join fetch mother.kittens&quot;);
Set uniqueMothers = new HashSet(mothersWithKittens.list());&lt;/pre&gt;

      &lt;p&gt;A query is usually executed by invoking &lt;code class=&quot;literal&quot;&gt;list()&lt;/code&gt;.
      The result of the query will be loaded completely into a collection in
      memory. Entity instances retrieved by a query are in a persistent state.
      The &lt;code class=&quot;literal&quot;&gt;uniqueResult()&lt;/code&gt; method offers a shortcut if you
      know your query will only return a single object. Queries that make use
      of eager fetching of collections usually return duplicates of the root
      objects, but with their collections initialized. You can filter these
      duplicates through a &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.1. Iterating results&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-iterate&quot;/&gt;11.4.1.1. Iterating results&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Occasionally, you might be able to achieve better performance by
        executing the query using the &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt; method.
        This will usually be the case if you expect that the actual entity
        instances returned by the query will already be in the session or
        second-level cache. If they are not already cached,
        &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt; will be slower than
        &lt;code class=&quot;literal&quot;&gt;list()&lt;/code&gt; and might require many database hits for a
        simple query, usually &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/span&gt; for the initial select
        which only returns identifiers, and &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;n&lt;/em&gt;&lt;/span&gt; additional
        selects to initialize the actual instances.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// fetch ids
Iterator iter = sess.createQuery(&quot;from eg.Qux q order by q.likeliness&quot;).iterate();
while ( iter.hasNext() ) {
    Qux qux = (Qux) iter.next();  // fetch the object
    // something we couldnt express in the query
    if ( qux.calculateComplicatedAlgorithm() ) {
        // delete the current instance
        iter.remove();
        // dont need to process the rest
        break;
    }
}&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.2. Queries that return tuples&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-tuples&quot;/&gt;11.4.1.2. Queries that return tuples&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Hibernate queries sometimes return tuples of objects. Each tuple
        is returned as an array:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Iterator kittensAndMothers = sess.createQuery(
            &quot;select kitten, mother from Cat kitten join kitten.mother mother&quot;)
            .list()
            .iterator();

while ( kittensAndMothers.hasNext() ) {
    Object[] tuple = (Object[]) kittensAndMothers.next();
    Cat kitten = (Cat) tuple[0];
    Cat mother = (Cat) tuple[1];
    ....
}&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.3. Scalar results&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-scalar&quot;/&gt;11.4.1.3. Scalar results&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Queries can specify a property of a class in the
        &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt; clause. They can even call SQL aggregate
        functions. Properties or aggregates are considered &quot;scalar&quot; results
        and not entities in persistent state.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Iterator results = sess.createQuery(
        &quot;select cat.color, min(cat.birthdate), count(cat) from Cat cat &quot; +
        &quot;group by cat.color&quot;)
        .list()
        .iterator();

while ( results.hasNext() ) {
    Object[] row = (Object[]) results.next();
    Color type = (Color) row[0];
    Date oldest = (Date) row[1];
    Integer count = (Integer) row[2];
    .....
}&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.4. Bind parameters&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-parameters&quot;/&gt;11.4.1.4. Bind parameters&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Methods on &lt;code class=&quot;literal&quot;&gt;Query&lt;/code&gt; are provided for binding
        values to named parameters or JDBC-style &lt;code class=&quot;literal&quot;&gt;?&lt;/code&gt;
        parameters. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Contrary to JDBC, Hibernate numbers parameters
        from zero.&lt;/em&gt;&lt;/span&gt; Named parameters are identifiers of the form
        &lt;code class=&quot;literal&quot;&gt;:name&lt;/code&gt; in the query string. The advantages of named
        parameters are as follows:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;named parameters are insensitive to the order they occur in
            the query string&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;they can occur multiple times in the same query&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;they are self-documenting&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//named parameter (preferred)
Query q = sess.createQuery(&quot;from DomesticCat cat where cat.name = :name&quot;);
q.setString(&quot;name&quot;, &quot;Fritz&quot;);
Iterator cats = q.iterate();&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//positional parameter
Query q = sess.createQuery(&quot;from DomesticCat cat where cat.name = ?&quot;);
q.setString(0, &quot;Izi&quot;);
Iterator cats = q.iterate();&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//named parameter list
List names = new ArrayList();
names.add(&quot;Izi&quot;);
names.add(&quot;Fritz&quot;);
Query q = sess.createQuery(&quot;from DomesticCat cat where cat.name in (:namesList)&quot;);
q.setParameterList(&quot;namesList&quot;, names);
List cats = q.list();&lt;/pre&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.5. Pagination&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-pagination&quot;/&gt;11.4.1.5. Pagination&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;If you need to specify bounds upon your result set, that is, the
        maximum number of rows you want to retrieve and/or the first row you
        want to retrieve, you can use methods of the &lt;code class=&quot;literal&quot;&gt;Query&lt;/code&gt;
        interface:&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query q = sess.createQuery(&quot;from DomesticCat cat&quot;);
q.setFirstResult(20);
q.setMaxResults(10);
List cats = q.list();&lt;/pre&gt;

        &lt;p&gt;Hibernate knows how to translate this limit query into the
        native SQL of your DBMS.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.6. Scrollable iteration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-scrolling&quot;/&gt;11.4.1.6. Scrollable iteration&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;If your JDBC driver supports scrollable
        &lt;code class=&quot;literal&quot;&gt;ResultSet&lt;/code&gt;s, the &lt;code class=&quot;literal&quot;&gt;Query&lt;/code&gt; interface
        can be used to obtain a &lt;code class=&quot;literal&quot;&gt;ScrollableResults&lt;/code&gt; object
        that allows flexible navigation of the query results.&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query q = sess.createQuery(&quot;select cat.name, cat from DomesticCat cat &quot; +
                            &quot;order by cat.name&quot;);
ScrollableResults cats = q.scroll();
if ( cats.first() ) {

    // find the first name on each page of an alphabetical list of cats by name
    firstNamesOfPages = new ArrayList();
    do {
        String name = cats.getString(0);
        firstNamesOfPages.add(name);
    }
    while ( cats.scroll(PAGE_SIZE) );

    // Now get the first page of cats
    pageOfCats = new ArrayList();
    cats.beforeFirst();
    int i=0;
    while( ( PAGE_SIZE &amp;gt; i++ ) &amp;amp;&amp;amp; cats.next() ) pageOfCats.add( cats.get(1) );

}
cats.close()&lt;/pre&gt;

        &lt;p&gt;Note that an open database connection and cursor is required for
        this functionality. Use
        &lt;code class=&quot;literal&quot;&gt;setMaxResult()&lt;/code&gt;/&lt;code class=&quot;literal&quot;&gt;setFirstResult()&lt;/code&gt;
        if you need offline pagination functionality.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;11.4.1.7. Externalizing named queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-executing-named&quot;/&gt;11.4.1.7. Externalizing named queries&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;Queries can also be configured as so called named queries using
        annotations or Hibernate mapping documents.
        &lt;code class=&quot;literal&quot;&gt;@NamedQuery&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;@NamedQueries&lt;/code&gt;
        can be defined at the class level as seen in &lt;a class=&quot;xref&quot; href=&quot;#example-named-query-annotation&quot; title=&quot;Example 11.1. Defining a named query using @NamedQuery&quot;&gt;Example 11.1, âDefining a named query using
          &lt;code class=&quot;classname&quot;&gt;@NamedQuery&lt;/code&gt;â&lt;/a&gt; . However their
        definitions are global to the session factory/entity manager factory
        scope. A named query is defined by its name and the actual query
        string.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-named-query-annotation&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 11.1. Defining a named query using
          &lt;code class=&quot;classname&quot;&gt;@NamedQuery&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NamedQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;night.moreRecentThan&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;query&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;n&amp;nbsp;from&amp;nbsp;Night&amp;nbsp;n&amp;nbsp;where&amp;nbsp;n.date&amp;nbsp;&amp;gt;=&amp;nbsp;:date&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Night&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;MyDao&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;doStuff&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;q&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;s&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;getNamedQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;night.moreRecentThan&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;);&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;q&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;aMonthAgo&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;);&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;results&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;q&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;();&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Using a mapping document can be configured using the
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;query&amp;gt;&lt;/code&gt; node. Remember to use a
        &lt;code class=&quot;literal&quot;&gt;CDATA&lt;/code&gt; section if your query contains characters
        that could be interpreted as markup.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e6392&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 11.2. Defining a named query using
          &lt;code class=&quot;literal&quot;&gt;&amp;lt;query&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;query name=&quot;ByNameAndMaximumWeight&quot;&amp;gt;&amp;lt;![CDATA[
    from eg.DomesticCat as cat
        where cat.name = ?
        and cat.weight &amp;gt; ?
] ]&amp;gt;&amp;lt;/query&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;Parameter binding and executing is done programatically as seen
        in &lt;a class=&quot;xref&quot; href=&quot;#example-parameter-binding-named-query&quot; title=&quot;Example 11.3. Parameter binding of a named query&quot;&gt;Example 11.3, âParameter binding of a named queryâ&lt;/a&gt;.&lt;/p&gt;

        &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-parameter-binding-named-query&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 11.3. Parameter binding of a named query&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
          

          &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query q = sess.getNamedQuery(&quot;ByNameAndMaximumWeight&quot;);
q.setString(0, name);
q.setInt(1, minWeight);
List cats = q.list();&lt;/pre&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

        &lt;p&gt;The actual program code is independent of the query language
        that is used. You can also define native SQL queries in metadata, or
        migrate existing queries to Hibernate by placing them in mapping
        files.&lt;/p&gt;

        &lt;p&gt;Also note that a query declaration inside a
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;&lt;/code&gt; element requires a global
        unique name for the query, while a query declaration inside a
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; element is made unique automatically
        by prepending the fully qualified name of the class. For example
        &lt;code class=&quot;literal&quot;&gt;eg.Cat.ByNameAndMaximumWeight&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;11.4.2. Filtering collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-filtering&quot;/&gt;11.4.2. Filtering collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;A collection &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;filter&lt;/em&gt;&lt;/span&gt; is a special type of
      query that can be applied to a persistent collection or array. The query
      string can refer to &lt;code class=&quot;literal&quot;&gt;this&lt;/code&gt;, meaning the current
      collection element.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Collection blackKittens = session.createFilter(
    pk.getKittens(), 
    &quot;where this.color = ?&quot;)
    .setParameter( Color.BLACK, Hibernate.custom(ColorUserType.class) )
    .list()
);&lt;/pre&gt;

      &lt;p&gt;The returned collection is considered a bag that is a copy of the
      given collection. The original collection is not modified. This is
      contrary to the implication of the name &quot;filter&quot;, but consistent with
      expected behavior.&lt;/p&gt;

      &lt;p&gt;Observe that filters do not require a &lt;code class=&quot;literal&quot;&gt;from&lt;/code&gt;
      clause, although they can have one if required. Filters are not limited
      to returning the collection elements themselves.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Collection blackKittenMates = session.createFilter(
    pk.getKittens(), 
    &quot;select this.mate where this.color = eg.Color.BLACK.intValue&quot;)
    .list();&lt;/pre&gt;

      &lt;p&gt;Even an empty filter query is useful, e.g. to load a subset of
      elements in a large collection:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Collection tenKittens = session.createFilter(
    mother.getKittens(), &quot;&quot;)
    .setFirstResult(0).setMaxResults(10)
    .list();&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;11.4.3. Criteria queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;objecstate-querying-criteria&quot;/&gt;11.4.3. Criteria queries&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;HQL is extremely powerful, but some developers prefer to build
      queries dynamically using an object-oriented API, rather than building
      query strings. Hibernate provides an intuitive
      &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; query API for these cases:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Criteria crit = session.createCriteria(Cat.class);
crit.add( Restrictions.eq( &quot;color&quot;, eg.Color.BLACK ) );
crit.setMaxResults(10);
List cats = crit.list();&lt;/pre&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; and the associated
      &lt;code class=&quot;literal&quot;&gt;Example&lt;/code&gt; API are discussed in more detail in &lt;a class=&quot;xref&quot; href=&quot;#querycriteria&quot; title=&quot;Chapter 17. Criteria Queries&quot;&gt;Chapter 17, &lt;em&gt;Criteria Queries&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;11.4.4. Queries in native SQL&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-querying-nativesql&quot;/&gt;11.4.4. Queries in native SQL&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;You can express a query in SQL, using
      &lt;code class=&quot;literal&quot;&gt;createSQLQuery()&lt;/code&gt; and let Hibernate manage the mapping
      from result sets to objects. You can at any time call
      &lt;code class=&quot;literal&quot;&gt;session.connection()&lt;/code&gt; and use the JDBC
      &lt;code class=&quot;literal&quot;&gt;Connection&lt;/code&gt; directly. If you choose to use the
      Hibernate API, you must enclose SQL aliases in braces:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = session.createSQLQuery(&quot;SELECT {cat.*} FROM CAT {cat} WHERE ROWNUM&amp;lt;10&quot;)
    .addEntity(&quot;cat&quot;, Cat.class)
.list();&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = session.createSQLQuery(
    &quot;SELECT {cat}.ID AS {cat.id}, {cat}.SEX AS {cat.sex}, &quot; +
           &quot;{cat}.MATE AS {cat.mate}, {cat}.SUBCLASS AS {cat.class}, ... &quot; +
    &quot;FROM CAT {cat} WHERE ROWNUM&amp;lt;10&quot;)
    .addEntity(&quot;cat&quot;, Cat.class)
.list()&lt;/pre&gt;

      &lt;p&gt;SQL queries can contain named and positional parameters, just like
      Hibernate queries. More information about native SQL queries in
      Hibernate can be found in &lt;a class=&quot;xref&quot; href=&quot;#querysql&quot; title=&quot;Chapter 18. Native SQL&quot;&gt;Chapter 18, &lt;em&gt;Native SQL&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.5. Modifying persistent objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-modifying&quot;/&gt;11.5. Modifying persistent objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Transactional persistent instances&lt;/em&gt;&lt;/span&gt; (i.e.
    objects loaded, saved, created or queried by the
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;) can be manipulated by the application, and any
    changes to persistent state will be persisted when the
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;flushed&lt;/em&gt;&lt;/span&gt;. This is
    discussed later in this chapter. There is no need to call a particular
    method (like &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;, which has a different purpose)
    to make your modifications persistent. The most straightforward way to
    update the state of an object is to &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; it and then
    manipulate it directly while the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is
    open:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DomesticCat cat = (DomesticCat) sess.load( Cat.class, new Long(69) );
cat.setName(&quot;PK&quot;);
sess.flush();  // changes to cat are automatically detected and persisted&lt;/pre&gt;

    &lt;p&gt;Sometimes this programming model is inefficient, as it requires in
    the same session both an SQL &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; to load an object
    and an SQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; to persist its updated state.
    Hibernate offers an alternate approach by using detached instances.&lt;/p&gt;

  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.6. Modifying detached objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-detached&quot;/&gt;11.6. Modifying detached objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Many applications need to retrieve an object in one transaction,
    send it to the UI layer for manipulation, then save the changes in a new
    transaction. Applications that use this kind of approach in a
    high-concurrency environment usually use versioned data to ensure
    isolation for the &quot;long&quot; unit of work.&lt;/p&gt;

    &lt;p&gt;Hibernate supports this model by providing for reattachment of
    detached instances using the &lt;code class=&quot;literal&quot;&gt;Session.update()&lt;/code&gt; or
    &lt;code class=&quot;literal&quot;&gt;Session.merge()&lt;/code&gt; methods:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// in the first session
Cat cat = (Cat) firstSession.load(Cat.class, catId);
Cat potentialMate = new Cat();
firstSession.save(potentialMate);

// in a higher layer of the application
cat.setMate(potentialMate);

// later, in a new session
secondSession.update(cat);  // update cat
secondSession.update(mate); // update mate&lt;/pre&gt;

    &lt;p&gt;If the &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; with identifier
    &lt;code class=&quot;literal&quot;&gt;catId&lt;/code&gt; had already been loaded by
    &lt;code class=&quot;literal&quot;&gt;secondSession&lt;/code&gt; when the application tried to reattach
    it, an exception would have been thrown.&lt;/p&gt;

    &lt;p&gt;Use &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; if you are certain that the session
    does not contain an already persistent instance with the same identifier.
    Use &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt; if you want to merge your modifications at
    any time without consideration of the state of the session. In other
    words, &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; is usually the first method you would
    call in a fresh session, ensuring that the reattachment of your detached
    instances is the first operation that is executed.&lt;/p&gt;

    &lt;p&gt;The application should individually &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;
    detached instances that are reachable from the given detached instance
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;only&lt;/em&gt;&lt;/span&gt; if it wants their state to be updated. This can
    be automated using &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;transitive persistence&lt;/em&gt;&lt;/span&gt;. See &lt;a class=&quot;xref&quot; href=&quot;#objectstate-transitive&quot; title=&quot;11.11. Transitive persistence&quot;&gt;Section 11.11, âTransitive persistenceâ&lt;/a&gt; for more information.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt; method also allows an application to
    reassociate an object with a new session. However, the detached instance
    has to be unmodified.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//just reassociate:
sess.lock(fritz, LockMode.NONE);
//do a version check, then reassociate:
sess.lock(izi, LockMode.READ);
//do a version check, using SELECT ... FOR UPDATE, then reassociate:
sess.lock(pk, LockMode.UPGRADE);&lt;/pre&gt;

    &lt;p&gt;Note that &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt; can be used with various
    &lt;code class=&quot;literal&quot;&gt;LockMode&lt;/code&gt;s. See the API documentation and the chapter on
    transaction handling for more information. Reattachment is not the only
    usecase for &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;Other models for long units of work are discussed in &lt;a class=&quot;xref&quot; href=&quot;#transactions-optimistic&quot; title=&quot;13.3. Optimistic concurrency control&quot;&gt;Section 13.3, âOptimistic concurrency controlâ&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.7. Automatic state detection&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-saveorupdate&quot;/&gt;11.7. Automatic state detection&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate users have requested a general purpose method that either
    saves a transient instance by generating a new identifier or
    updates/reattaches the detached instances associated with its current
    identifier. The &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt; method implements this
    functionality.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// in the first session
Cat cat = (Cat) firstSession.load(Cat.class, catID);

// in a higher tier of the application
Cat mate = new Cat();
cat.setMate(mate);

// later, in a new session
secondSession.saveOrUpdate(cat);   // update existing state (cat has a non-null id)
secondSession.saveOrUpdate(mate);  // save the new instance (mate has a null id)&lt;/pre&gt;

    &lt;p&gt;The usage and semantics of &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt; seems
    to be confusing for new users. Firstly, so long as you are not trying to
    use instances from one session in another new session, you should not need
    to use &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt;, or
    &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt;. Some whole applications will never use either
    of these methods.&lt;/p&gt;

    &lt;p&gt;Usually &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; or
    &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt; are used in the following
    scenario:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the application loads an object in the first session&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the object is passed up to the UI tier&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;some modifications are made to the object&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the object is passed back down to the business logic tier&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the application persists these modifications by calling
        &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; in a second session&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt; does the following:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if the object is already persistent in this session, do
        nothing&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if another object associated with the session has the same
        identifier, throw an exception&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if the object has no identifier property,
        &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; it&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if the object&apos;s identifier has the value assigned to a newly
        instantiated object, &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; it&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if the object is versioned by a
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; or
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;timestamp&amp;gt;&lt;/code&gt;, and the version property value
        is the same value assigned to a newly instantiated object,
        &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; it&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;otherwise &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; the object&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;and &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt; is very different:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if there is a persistent instance with the same identifier
        currently associated with the session, copy the state of the given
        object onto the persistent instance&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;if there is no persistent instance currently associated with the
        session, try to load it from the database, or create a new persistent
        instance&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the persistent instance is returned&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;the given instance does not become associated with the session,
        it remains detached&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.8. Deleting persistent objects&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-deleting&quot;/&gt;11.8. Deleting persistent objects&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;Session.delete()&lt;/code&gt; will remove an object&apos;s state
    from the database. Your application, however, can still hold a reference
    to a deleted object. It is best to think of &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; as
    making a persistent instance, transient.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.delete(cat);&lt;/pre&gt;

    &lt;p&gt;You can delete objects in any order, without risk of foreign key
    constraint violations. It is still possible to violate a &lt;code class=&quot;literal&quot;&gt;NOT
    NULL&lt;/code&gt; constraint on a foreign key column by deleting objects in
    the wrong order, e.g. if you delete the parent, but forget to delete the
    children.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.9. Replicating object between two different datastores&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-replicating&quot;/&gt;11.9. Replicating object between two different datastores&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;It is sometimes useful to be able to take a graph of persistent
    instances and make them persistent in a different datastore, without
    regenerating identifier values.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//retrieve a cat from one database
Session session1 = factory1.openSession();
Transaction tx1 = session1.beginTransaction();
Cat cat = session1.get(Cat.class, catId);
tx1.commit();
session1.close();

//reconcile with a second database
Session session2 = factory2.openSession();
Transaction tx2 = session2.beginTransaction();
session2.replicate(cat, ReplicationMode.LATEST_VERSION);
tx2.commit();
session2.close();&lt;/pre&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;ReplicationMode&lt;/code&gt; determines how
    &lt;code class=&quot;literal&quot;&gt;replicate()&lt;/code&gt; will deal with conflicts with existing rows
    in the database:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ReplicationMode.IGNORE&lt;/code&gt;: ignores the object
        when there is an existing database row with the same identifier&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ReplicationMode.OVERWRITE&lt;/code&gt;: overwrites any
        existing database row with the same identifier&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ReplicationMode.EXCEPTION&lt;/code&gt;: throws an
        exception if there is an existing database row with the same
        identifier&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ReplicationMode.LATEST_VERSION&lt;/code&gt;: overwrites
        the row if its version number is earlier than the version number of
        the object, or ignore the object otherwise&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Usecases for this feature include reconciling data entered into
    different database instances, upgrading system configuration information
    during product upgrades, rolling back changes made during non-ACID
    transactions and more.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.10. Flushing the Session&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-flushing&quot;/&gt;11.10. Flushing the Session&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Sometimes the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; will execute the SQL
    statements needed to synchronize the JDBC connection&apos;s state with the
    state of objects held in memory. This process, called
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;flush&lt;/em&gt;&lt;/span&gt;, occurs by default at the following
    points:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;before some query executions&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;from
        &lt;code class=&quot;literal&quot;&gt;org.hibernate.Transaction.commit()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;from &lt;code class=&quot;literal&quot;&gt;Session.flush()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;The SQL statements are issued in the following order:&lt;/p&gt;

    &lt;div class=&quot;orderedlist&quot;&gt;&lt;ol class=&quot;orderedlist&quot; type=&quot;1&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all entity insertions in the same order the corresponding
        objects were saved using &lt;code class=&quot;literal&quot;&gt;Session.save()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all entity updates&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all collection deletions&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all collection element deletions, updates and insertions&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all collection insertions&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;all entity deletions in the same order the corresponding objects
        were deleted using &lt;code class=&quot;literal&quot;&gt;Session.delete()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;

    &lt;p&gt;An exception is that objects using &lt;code class=&quot;literal&quot;&gt;native&lt;/code&gt; ID
    generation are inserted when they are saved.&lt;/p&gt;

    &lt;p&gt;Except when you explicitly &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt;, there are
    absolutely no guarantees about &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;when&lt;/em&gt;&lt;/span&gt; the
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; executes the JDBC calls, only the
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;order&lt;/em&gt;&lt;/span&gt; in which they are executed. However, Hibernate
    does guarantee that the &lt;code class=&quot;literal&quot;&gt;Query.list(..)&lt;/code&gt; will never
    return stale or incorrect data.&lt;/p&gt;

    &lt;p&gt;It is possible to change the default behavior so that flush occurs
    less frequently. The &lt;code class=&quot;literal&quot;&gt;FlushMode&lt;/code&gt; class defines three
    different modes: only flush at commit time when the Hibernate
    &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API is used, flush automatically using the
    explained routine, or never flush unless &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; is
    called explicitly. The last mode is useful for long running units of work,
    where a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is kept open and disconnected for a
    long time (see &lt;a class=&quot;xref&quot; href=&quot;#transactions-optimistic-longsession&quot; title=&quot;13.3.2. Extended session and automatic versioning&quot;&gt;Section 13.3.2, âExtended session and automatic versioningâ&lt;/a&gt;).&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess = sf.openSession();
Transaction tx = sess.beginTransaction();
sess.setFlushMode(FlushMode.COMMIT); // allow queries to return stale state

Cat izi = (Cat) sess.load(Cat.class, id);
izi.setName(iznizi);

// might return stale data
sess.find(&quot;from Cat as cat left outer join cat.kittens kitten&quot;);

// change to izi is not flushed!
...
tx.commit(); // flush occurs
sess.close();&lt;/pre&gt;

    &lt;p&gt;During flush, an exception might occur (e.g. if a DML operation
    violates a constraint). Since handling exceptions involves some
    understanding of Hibernate&apos;s transactional behavior, we discuss it in
    &lt;a class=&quot;xref&quot; href=&quot;#transactions&quot; title=&quot;Chapter 13. Transactions and Concurrency&quot;&gt;Chapter 13, &lt;em&gt;Transactions and Concurrency&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.11. Transitive persistence&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-transitive&quot;/&gt;11.11. Transitive persistence&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;It is quite cumbersome to save, delete, or reattach individual
    objects, especially if you deal with a graph of associated objects. A
    common case is a parent/child relationship. Consider the following
    example:&lt;/p&gt;

    &lt;p&gt;If the children in a parent/child relationship would be value typed
    (e.g. a collection of addresses or strings), their life cycle would depend
    on the parent and no further action would be required for convenient
    &quot;cascading&quot; of state changes. When the parent is saved, the value-typed
    child objects are saved and when the parent is deleted, the children will
    be deleted, etc. This works for operations such as the removal of a child
    from the collection. Since value-typed objects cannot have shared
    references, Hibernate will detect this and delete the child from the
    database.&lt;/p&gt;

    &lt;p&gt;Now consider the same scenario with parent and child objects being
    entities, not value-types (e.g. categories and items, or parent and child
    cats). Entities have their own life cycle and support shared references.
    Removing an entity from the collection does not mean it can be deleted),
    and there is by default no cascading of state from one entity to any other
    associated entities. Hibernate does not implement &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;persistence by
    reachability&lt;/em&gt;&lt;/span&gt; by default.&lt;/p&gt;

    &lt;p&gt;For each basic operation of the Hibernate session - including
    &lt;code class=&quot;literal&quot;&gt;persist(), merge(), saveOrUpdate(), delete(), lock(), refresh(),
    evict(), replicate()&lt;/code&gt; - there is a corresponding cascade style.
    Respectively, the cascade styles are named &lt;code class=&quot;literal&quot;&gt;create, merge,
    save-update, delete, lock, refresh, evict, replicate&lt;/code&gt;. If you
    want an operation to be cascaded along an association, you must indicate
    that in the mapping document. For example:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-one name=&quot;person&quot; cascade=&quot;persist&quot;/&amp;gt;&lt;/pre&gt;

    &lt;p&gt;Cascade styles my be combined:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;one-to-one name=&quot;person&quot; cascade=&quot;persist,delete,lock&quot;/&amp;gt;&lt;/pre&gt;

    &lt;p&gt;You can even use &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all&quot;&lt;/code&gt; to specify that
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;all&lt;/em&gt;&lt;/span&gt; operations should be cascaded along the
    association. The default &lt;code class=&quot;literal&quot;&gt;cascade=&quot;none&quot;&lt;/code&gt; specifies that
    no operations are to be cascaded.&lt;/p&gt;

    &lt;p&gt;In case you are using annotatons you probably have noticed the
    &lt;code class=&quot;literal&quot;&gt;cascade&lt;/code&gt; attribute taking an array of
    &lt;code class=&quot;classname&quot;&gt;CascadeType&lt;/code&gt; as a value. The cascade concept in JPA
    is very is similar to the transitive persistence and cascading of
    operations as described above, but with slightly different semantics and
    cascading types:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.PERSIST&lt;/code&gt;: cascades the persist
        (create) operation to associated entities persist() is called or if
        the entity is managed&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.MERGE&lt;/code&gt;: cascades the merge
        operation to associated entities if merge() is called or if the entity
        is managed&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.REMOVE&lt;/code&gt;: cascades the remove
        operation to associated entities if delete() is called&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.REFRESH:&lt;/code&gt; cascades the refresh
        operation to associated entities if refresh() is called&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.DETACH:&lt;/code&gt; cascades the detach
        operation to associated entities if detach() is called&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CascadeType.ALL&lt;/code&gt;: all of the above&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
      &lt;p&gt;CascadeType.ALL also covers Hibernate specific operations like
      save-update, lock etc...&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;A special cascade style, &lt;code class=&quot;literal&quot;&gt;delete-orphan&lt;/code&gt;, applies
    only to one-to-many associations, and indicates that the
    &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; operation should be applied to any child
    object that is removed from the association. Using annotations there is no
    &lt;code class=&quot;literal&quot;&gt;CascadeType.DELETE-ORPHAN&lt;/code&gt; equivalent. Instead you can
    use the attribute &lt;code class=&quot;literal&quot;&gt;orphanRemoval as seen in &lt;/code&gt;&lt;a class=&quot;xref&quot; href=&quot;#example-one-to-many-with-orphan-removal&quot; title=&quot;Example 11.4. @OneToMany with orphanRemoval&quot;&gt;Example 11.4, â&lt;code class=&quot;literal&quot;&gt;@OneToMany&lt;/code&gt; with
      &lt;code class=&quot;literal&quot;&gt;orphanRemoval&lt;/code&gt;â&lt;/a&gt;. If an entity is
    removed from a &lt;code class=&quot;classname&quot;&gt;@OneToMany&lt;/code&gt; collection or an
    associated entity is dereferenced from a &lt;code class=&quot;classname&quot;&gt;@OneToOne&lt;/code&gt;
    association, this associated entity can be marked for deletion if
    &lt;code class=&quot;literal&quot;&gt;orphanRemoval&lt;/code&gt; is set to true.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-one-to-many-with-orphan-removal&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 11.4. &lt;code class=&quot;literal&quot;&gt;@OneToMany&lt;/code&gt; with
      &lt;code class=&quot;literal&quot;&gt;orphanRemoval&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orphanRemoval&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;orders&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;orders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;[...]&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;customer&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;em&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;);&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;order&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;em&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;1l&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;);&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;getOrders&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;order&amp;nbsp;will&amp;nbsp;be&amp;nbsp;deleted&amp;nbsp;by&amp;nbsp;cascade&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Recommendations:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;It does not usually make sense to enable cascade on a
        many-to-one or many-to-many association. In fact the
        &lt;code class=&quot;literal&quot;&gt;@ManyToOne&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;@ManyToMany&lt;/code&gt; don&apos;t
        even offer a &lt;code class=&quot;literal&quot;&gt;orphanRemoval&lt;/code&gt; attribute. Cascading is
        often useful for one-to-one and one-to-many associations.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If the child object&apos;s lifespan is bounded by the lifespan of the
        parent object, make it a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;life cycle object&lt;/em&gt;&lt;/span&gt; by
        specifying
        &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all,delete-orphan&quot;&lt;/code&gt; (&lt;code class=&quot;literal&quot;&gt;@OneToMany(cascade=CascadeType.ALL,
        orphanRemoval=true)&lt;/code&gt;).
      &lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;Otherwise, you might not need cascade at all. But if you think
        that you will often be working with the parent and children together
        in the same transaction, and you want to save yourself some typing,
        consider using
        &lt;code class=&quot;literal&quot;&gt;cascade=&quot;persist,merge,save-update&quot;&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Mapping an association (either a single valued association, or a
    collection) with &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all&quot;&lt;/code&gt; marks the association as
    a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;parent/child&lt;/em&gt;&lt;/span&gt; style relationship where
    save/update/delete of the parent results in save/update/delete of the
    child or children.&lt;/p&gt;

    &lt;p&gt;Furthermore, a mere reference to a child from a persistent parent
    will result in save/update of the child. This metaphor is incomplete,
    however. A child which becomes unreferenced by its parent is
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; automatically deleted, except in the case of a
    one-to-many association mapped with
    &lt;code class=&quot;literal&quot;&gt;cascade=&quot;delete-orphan&quot;&lt;/code&gt;. The precise semantics of
    cascading operations for a parent/child relationship are as
    follows:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a parent is passed to &lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt;, all
        children are passed to &lt;code class=&quot;literal&quot;&gt;persist()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a parent is passed to &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt;, all
        children are passed to &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a parent is passed to &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;,
        &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt;, all
        children are passed to &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a transient or detached child becomes referenced by a
        persistent parent, it is passed to
        &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a parent is deleted, all children are passed to
        &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;If a child is dereferenced by a persistent parent,
        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;nothing special happens&lt;/em&gt;&lt;/span&gt; - the application should
        explicitly delete the child if necessary - unless
        &lt;code class=&quot;literal&quot;&gt;cascade=&quot;delete-orphan&quot;&lt;/code&gt;, in which case the
        &quot;orphaned&quot; child is deleted.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Finally, note that cascading of operations can be applied to an
    object graph at &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;call time&lt;/em&gt;&lt;/span&gt; or at &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;flush
    time&lt;/em&gt;&lt;/span&gt;. All operations, if enabled, are cascaded to associated
    entities reachable when the operation is executed. However,
    &lt;code class=&quot;literal&quot;&gt;save-update&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;delete-orphan&lt;/code&gt; are
    transitive for all associated entities reachable during flush of the
    &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.&lt;/p&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;11.12. Using metadata&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-metadata&quot;/&gt;11.12. Using metadata&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate requires a rich meta-level model of all entity and value
    types. This model can be useful to the application itself. For example,
    the application might use Hibernate&apos;s metadata to implement a &quot;smart&quot;
    deep-copy algorithm that understands which objects should be copied (eg.
    mutable value types) and which objects that should not (e.g. immutable
    value types and, possibly, associated entities).&lt;/p&gt;

    &lt;p&gt;Hibernate exposes metadata via the &lt;code class=&quot;literal&quot;&gt;ClassMetadata&lt;/code&gt;
    and &lt;code class=&quot;literal&quot;&gt;CollectionMetadata&lt;/code&gt; interfaces and the
    &lt;code class=&quot;literal&quot;&gt;Type&lt;/code&gt; hierarchy. Instances of the metadata interfaces
    can be obtained from the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;.&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat fritz = ......;
ClassMetadata catMeta = sessionfactory.getClassMetadata(Cat.class);

Object[] propertyValues = catMeta.getPropertyValues(fritz);
String[] propertyNames = catMeta.getPropertyNames();
Type[] propertyTypes = catMeta.getPropertyTypes();

// get a Map of all properties which are not collections or associations
Map namedValues = new HashMap();
for ( int i=0; i&amp;lt;propertyNames.length; i++ ) {
    if ( !propertyTypes[i].isEntityType() &amp;amp;&amp;amp; !propertyTypes[i].isCollectionType() ) {
        namedValues.put( propertyNames[i], propertyValues[i] );
    }
}&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 12. Read-only entities&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly&quot;/&gt;Chapter 12. Read-only entities&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api&quot;&gt;12.1. Making persistent entities read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-immutable&quot;&gt;12.1.1. Entities of immutable classes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-loaddefault&quot;&gt;12.1.2. Loading persistent entities as read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-querycriteria&quot;&gt;12.1.3. Loading read-only entities from an HQL query/criteria&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-api-entity&quot;&gt;12.1.4. Making a persistent entity read-only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes&quot;&gt;12.2. Read-only affect on property type&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes-simple&quot;&gt;12.2.1. Simple properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-prop-types-unidir&quot;&gt;12.2.2. Unidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#readonly-proptypes-bidir&quot;&gt;12.2.3. Bidirectional associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;
            Hibernate&apos;s treatment of &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;read-only&lt;/em&gt;&lt;/span&gt; entities may 
            differ from what you may have encountered elsewhere. Incorrect usage 
            may cause unexpected results.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;
        When an entity is read-only:

        &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    Hibernate does not dirty-check the entity&apos;s simple 
                    properties or single-ended associations;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    Hibernate will not update simple properties or updatable
                    single-ended associations; 
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    Hibernate will not update the version of the read-only 
                    entity if only simple properties or single-ended 
                    updatable associations are changed;
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
    &lt;/p&gt;

    &lt;p&gt;
        In some ways, Hibernate treats read-only entities the same as entities that are 
        not read-only:
 
        &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    Hibernate cascades operations to associations as
                    defined in the entity mapping.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    Hibernate updates the version if the entity has a 
                    collection with changes that dirties the entity;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt; 
                    A read-only entity can be deleted.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
    &lt;/p&gt;

    &lt;p&gt;
        Even if an entity is not read-only, its collection association can 
        be affected if it contains a read-only entity.
    &lt;/p&gt;

    &lt;p&gt;
        For details about the affect of read-only entities on different
        property and association types, see 
        &lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes&quot; title=&quot;12.2. Read-only affect on property type&quot;&gt;Section 12.2, âRead-only affect on property typeâ&lt;/a&gt;.
    &lt;/p&gt;

    &lt;p&gt;     
        For details about how to make entities read-only, see 
        &lt;a class=&quot;xref&quot; href=&quot;#readonly-api&quot; title=&quot;12.1. Making persistent entities read-only&quot;&gt;Section 12.1, âMaking persistent entities read-onlyâ&lt;/a&gt;
    &lt;/p&gt;

    &lt;p&gt;
        Hibernate does some optimizing for read-only entities:
    &lt;/p&gt;
        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    It saves execution time by not dirty-checking simple properties or 
                    single-ended associations.
                 &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    It saves memory by deleting database snapshots.
                &lt;/p&gt;   
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;12.1. Making persistent entities read-only&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-api&quot;/&gt;12.1. Making persistent entities read-only&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Only persistent entities can be made read-only. Transient and
            detached entities must be put in persistent state before they
            can be made read-only.
        &lt;/p&gt;

        &lt;p&gt;
            Hibernate provides the following ways to make persistent entities read-only:
        &lt;/p&gt;
    
        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    you can map an entity class as &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/span&gt;;
                    when an entity of an immutable class is made persistent,
                    Hibernate automatically makes it read-only.
                    see &lt;a class=&quot;xref&quot; href=&quot;#readonly-api-immutable&quot; title=&quot;12.1.1. Entities of immutable classes&quot;&gt;Section 12.1.1, âEntities of immutable classesâ&lt;/a&gt; for details 
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    you can change a default so that entities loaded
                    into the session by Hibernate are automatically 
                    made read-only; see &lt;a class=&quot;xref&quot; href=&quot;#readonly-api-loaddefault&quot; title=&quot;12.1.2. Loading persistent entities as read-only&quot;&gt;Section 12.1.2, âLoading persistent entities as read-onlyâ&lt;/a&gt; for details
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    you can make an HQL query or criteria read-only so
                    that entities loaded when the query or criteria executes,
                    scrolls, or iterates, are automatically 
                    made read-only; see &lt;a class=&quot;xref&quot; href=&quot;#readonly-api-querycriteria&quot; title=&quot;12.1.3. Loading read-only entities from an HQL query/criteria&quot;&gt;Section 12.1.3, âLoading read-only entities from an HQL query/criteriaâ&lt;/a&gt; for details
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    you can make a persistent entity that is already in the
                    in the session read-only; see 
                    &lt;a class=&quot;xref&quot; href=&quot;#readonly-api-entity&quot; title=&quot;12.1.4. Making a persistent entity read-only&quot;&gt;Section 12.1.4, âMaking a persistent entity read-onlyâ&lt;/a&gt; for details
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.1.1. Entities of immutable classes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-api-immutable&quot;/&gt;12.1.1. Entities of immutable classes&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                When an entity instance of an immutable class is made 
                persistent, Hibernate automatically makes it read-only. 
            &lt;/p&gt;
            &lt;p&gt;
                An entity of an immutable class can created
                and deleted the same as an entity of a mutable class.
            &lt;/p&gt;

            &lt;p&gt;
                Hibernate treats a persistent entity of an immutable 
                class the same way as a read-only persistent entity
                of a mutable class. The only exception is that 
                Hibernate will not allow an entity of an immutable
                class to be changed so it is not read-only.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.1.2. Loading persistent entities as read-only&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-api-loaddefault&quot;/&gt;12.1.2. Loading persistent entities as read-only&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
 
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Entities of immutable classes are automatically loaded
                    as read-only.
                &lt;/p&gt;
            &lt;/div&gt;
 
            &lt;p&gt;
                To change the default behavior so Hibernate loads entity 
                instances of mutable classes into the session and automatically 
                makes them read-only, call:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session.setDefaultReadOnly( true );&lt;/pre&gt;

            &lt;p&gt;
                To change the default back so entities loaded by Hibernate are not
                made read-only, call:
            &lt;/p&gt;
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session.setDefaultReadOnly( false );&lt;/pre&gt;

            &lt;p&gt;
                You can determine the current setting by calling:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session.isDefaultReadOnly();&lt;/pre&gt;

            &lt;p&gt; 
                If Session.isDefaultReadOnly() returns true, entities loaded by 
                the following are automatically made read-only:
            &lt;/p&gt;
            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        Session.load()
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        Session.get()
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        Session.merge()
                    &lt;/p&gt;   
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        executing, scrolling, or iterating HQL queries and 
                        criteria; to override this setting for a particular
                        HQL query or criteria see 
                        &lt;a class=&quot;xref&quot; href=&quot;#readonly-api-querycriteria&quot; title=&quot;12.1.3. Loading read-only entities from an HQL query/criteria&quot;&gt;Section 12.1.3, âLoading read-only entities from an HQL query/criteriaâ&lt;/a&gt; 
                    &lt;/p&gt;   
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

            &lt;p&gt;
                Changing this default has no effect on:
            &lt;/p&gt;
            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        persistent entities already in the session when the 
                        default was changed
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        persistent entities that are refreshed via
                        Session.refresh(); a refreshed persistent 
                        entity will only be read-only if it was 
                        read-only before refreshing
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        persistent entities added by the application via 
                        Session.persist(), Session.save(), and Session.update()
                        Session.saveOrUpdate()
                    &lt;/p&gt;   
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.1.3. Loading read-only entities from an HQL query/criteria&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-api-querycriteria&quot;/&gt;12.1.3. Loading read-only entities from an HQL query/criteria&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
             

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Entities of immutable classes are automatically loaded
                    as read-only.
                &lt;/p&gt;
            &lt;/div&gt;

           &lt;p&gt;
                If Session.isDefaultReadOnly() returns false (the default) 
                when an HQL query or criteria executes, then entities 
                and proxies of mutable classes loaded by the query will 
                not be read-only.
            &lt;/p&gt;

            &lt;p&gt;
                You can override this behavior so that entities and proxies loaded 
                by an HQL query or criteria are automatically made read-only. 
            &lt;/p&gt;

            &lt;p&gt;
                For an HQL query, call:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query.setReadOnly( true );&lt;/pre&gt;

            &lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;Query.setReadOnly( true )&lt;/code&gt; must be called before
                &lt;code class=&quot;literal&quot;&gt;Query.list()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Query.uniqueResult()&lt;/code&gt;,
                &lt;code class=&quot;literal&quot;&gt;Query.scroll()&lt;/code&gt;, or &lt;code class=&quot;literal&quot;&gt;Query.iterate()&lt;/code&gt;
            &lt;/p&gt;

            &lt;p&gt;
                For an HQL criteria, call:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Criteria.setReadOnly( true );&lt;/pre&gt;

            &lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;Criteria.setReadOnly( true )&lt;/code&gt; must be called before
                &lt;code class=&quot;literal&quot;&gt;Criteria.list()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Criteria.uniqueResult()&lt;/code&gt;,
                or &lt;code class=&quot;literal&quot;&gt;Criteria.scroll()&lt;/code&gt;
            &lt;/p&gt;

            &lt;p&gt;
                Entities and proxies that exist in the session before being returned
                by an HQL query or criteria are not affected.
            &lt;/p&gt;

            &lt;p&gt;
                Uninitialized persistent collections returned by the query are 
                not affected. Later, when the collection is initialized,
                entities loaded into the session will be read-only if 
                Session.isDefaultReadOnly() returns true.   
            &lt;/p&gt;

            &lt;p&gt;
                Using &lt;code class=&quot;literal&quot;&gt;Query.setReadOnly( true )&lt;/code&gt; or
                &lt;code class=&quot;literal&quot;&gt;Criteria.setReadOnly( true )&lt;/code&gt; works well
                when a single HQL query or criteria loads all the entities and 
                intializes all the proxies and collections that the application
                needs to be read-only.
            &lt;/p&gt;

            &lt;p&gt;
                When it is not possible to load and initialize all 
                necessary entities in a single query or criteria,
                you can temporarily change the session default to load
                entities as read-only before the query is executed.
                Then you can explicitly initialize proxies and collections 
                before restoring the session default.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
Session session = factory.openSession();
Transaction tx = session.beginTransaction();
 
setDefaultReadOnly( true );
Contract contract = 
   ( Contract ) session.createQuery(
           &quot;from Contract where customerName = &apos;Sherman&apos;&quot; )
           .uniqueResult();
Hibernate.initialize( contract.getPlan() );
Hibernate.initialize( contract.getVariations() );
Hibernate.initialize( contract.getNotes() );
setDefaultReadOnly( false );
...
tx.commit();
session.close();

&lt;/pre&gt; 

            &lt;p&gt;
                If Session.isDefaultReadOnly() returns true, then you can
                use Query.setReadOnly( false ) and Criteria.setReadOnly( false )
                to override this session setting and load entities that are 
                not read-only.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.1.4. Making a persistent entity read-only&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-api-entity&quot;/&gt;12.1.4. Making a persistent entity read-only&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Persistent entities of immutable classes are automatically
                    made read-only.
                &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                To make a persistent entity or proxy read-only, call:
            &lt;/p&gt; 
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session.setReadOnly(entityOrProxy, true)&lt;/pre&gt; 
 
            &lt;p&gt;
                To change a read-only entity or proxy of a mutable class so 
                it is no longer read-only, call:
            &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session.setReadOnly(entityOrProxy, false)&lt;/pre&gt; 

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    When a read-only entity or proxy is changed so it is no longer 
                    read-only, Hibernate assumes that the current state of the 
                    read-only entity is consistent with its database representation. 
                    If this is not true, then any non-flushed changes made before
                    or while the entity was read-only, will be ignored.
                &lt;/p&gt;
            &lt;/div&gt;
            
            &lt;p&gt;        
                To throw away non-flushed changes and make the persistent entity 
                consistent with its database representation, call:           &lt;/p&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;session.refresh( entity );&lt;/pre&gt;

            &lt;p&gt;
                To flush changes made before or while the entity
                was read-only and make the database representation 
                consistent with the current state of the persistent
                entity:
            &lt;/p&gt;
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
// evict the read-only entity so it is detached
session.evict( entity );

// make the detached entity (with the non-flushed changes) persistent
session.update( entity );

// now entity is no longer read-only and its changes can be flushed
s.flush();
&lt;/pre&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;12.2. Read-only affect on property type&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes&quot;/&gt;12.2. Read-only affect on property type&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The following table summarizes how different property types are 
            affected by making an entity read-only.
        &lt;/p&gt;

        &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;readonly-proptype-summary&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 12.1. Affect of read-only entity on property types&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
            
            &lt;table summary=&quot;Affect of read-only entity on property types&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property/Association Type&lt;/th&gt;&lt;th&gt;Changes flushed to DB?&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
                            Simple
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-simple&quot; title=&quot;12.2.1. Simple properties&quot;&gt;Section 12.2.1, âSimple propertiesâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;no*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
                            &lt;p&gt;Unidirectional one-to-one&lt;/p&gt; 
                            &lt;p&gt;Unidirectional many-to-one&lt;/p&gt; 
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-singleended-unidir&quot; title=&quot;12.2.2.1. Unidirectional one-to-one and many-to-one&quot;&gt;Section 12.2.2.1, âUnidirectional one-to-one and many-to-oneâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;
                            &lt;p&gt;no*&lt;/p&gt;
                            &lt;p&gt;no*&lt;/p&gt;
                        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
                            &lt;p&gt;Unidirectional one-to-many&lt;/p&gt;
                            &lt;p&gt;Unidirectional many-to-many&lt;/p&gt;
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-manyended-unidir&quot; title=&quot;12.2.2.2. Unidirectional one-to-many and many-to-many&quot;&gt;Section 12.2.2.2, âUnidirectional one-to-many and many-to-manyâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;
                            &lt;p&gt;yes&lt;/p&gt;
                            &lt;p&gt;yes&lt;/p&gt;
                        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
                            &lt;p&gt;Bidirectional one-to-one&lt;/p&gt;
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-onetoone-bidir&quot; title=&quot;12.2.3.1. Bidirectional one-to-one&quot;&gt;Section 12.2.3.1, âBidirectional one-to-oneâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;only if the owning entity is not read-only*&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
                            &lt;p&gt;Bidirectional one-to-many/many-to-one&lt;/p&gt;
                            &lt;p&gt;inverse collection&lt;/p&gt;
                            &lt;p&gt;non-inverse collection&lt;/p&gt;
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-onetomany-manytoone&quot; title=&quot;12.2.3.2. Bidirectional one-to-many/many-to-one&quot;&gt;Section 12.2.3.2, âBidirectional one-to-many/many-to-oneâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;
                            &lt;p&gt; &lt;/p&gt;
                            &lt;p&gt;only added/removed entities that are not read-only*&lt;/p&gt;
                            &lt;p&gt;yes&lt;/p&gt;
                        &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;
                            &lt;p&gt;Bidirectional many-to-many&lt;/p&gt;
                            &lt;p&gt;
                                (&lt;a class=&quot;xref&quot; href=&quot;#readonly-proptypes-manytomany-bidir&quot; title=&quot;12.2.3.3. Bidirectional many-to-many&quot;&gt;Section 12.2.3.3, âBidirectional many-to-manyâ&lt;/a&gt;)
                            &lt;/p&gt;
                        &lt;/td&gt;&lt;td&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
  
        &lt;p&gt;
            * Behavior is different when the entity having the property/association
              is read-only, compared to when it is not read-only.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.2.1. Simple properties&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-simple&quot;/&gt;12.2.1. Simple properties&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                When a persistent object is read-only, Hibernate does not 
                dirty-check simple properties.
            &lt;/p&gt;

            &lt;p&gt;
                Hibernate will not synchronize simple property state changes 
                to the database. If you have automatic versioning, Hibernate 
                will not increment the version if any simple properties change.
            &lt;/p&gt;

	    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
Session session = factory.openSession();
Transaction tx = session.beginTransaction();

// get a contract and make it read-only
Contract contract = ( Contract ) session.get( Contract.class, contractId );
session.setReadOnly( contract, true );

// contract.getCustomerName() is &quot;Sherman&quot;
contract.setCustomerName( &quot;Yogi&quot; );
tx.commit();

tx = session.beginTransaction();

contract = ( Contract ) session.get( Contract.class, contractId );
// contract.getCustomerName() is still &quot;Sherman&quot;
...
tx.commit();
session.close();
            &lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.2.2. Unidirectional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-prop-types-unidir&quot;/&gt;12.2.2. Unidirectional associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;div class=&quot;section&quot; title=&quot;12.2.2.1. Unidirectional one-to-one and many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-singleended-unidir&quot;/&gt;12.2.2.1. Unidirectional one-to-one and many-to-one&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                

                &lt;p&gt;
                    Hibernate treats unidirectional one-to-one and many-to-one
                    associations in the same way when the owning entity is 
                    read-only. 
                &lt;/p&gt;

                &lt;p&gt;
                    We use the term &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;unidirectional single-ended 
                    association&lt;/em&gt;&lt;/span&gt; when referring to functionality
                    that is common to unidirectional one-to-one and many-to-one
                    associations.
                &lt;/p&gt;

                &lt;p&gt;
                    Hibernate does not dirty-check unidirectional single-ended
                    associations when the owning entity is read-only. 
                &lt;/p&gt;

                &lt;p&gt;
                    If you change a read-only entity&apos;s reference to a 
                    unidirectional single-ended association to null,
                    or to refer to a different entity, that change
                    will not be flushed to the database. 
                &lt;/p&gt;

                &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                    &lt;p&gt;
                        If an entity is of an immutable class,
                        then its references to unidirectional single-ended
                        associations must be assigned when that 
                        entity is first created. Because the entity is
                        automatically made read-only, these references can
                        not be updated.
                    &lt;/p&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    If automatic versioning is used, Hibernate will not 
                    increment the version due to local changes to 
                    unidirectional single-ended associations.
                &lt;/p&gt;

                &lt;p&gt;
                    In the following examples, Contract has a unidirectional 
                    many-to-one association with Plan. Contract cascades save and
                    update operations to the association.
                &lt;/p&gt;

                &lt;p&gt;
                    The following shows that changing a read-only entity&apos;s 
                    many-to-one association reference to null has no effect
                    on the entity&apos;s database representation.
                &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// get a contract with an existing plan;
// make the contract read-only and set its plan to null 
tx = session.beginTransaction();
Contract contract = ( Contract ) session.get( Contract.class, contractId );
session.setReadOnly( contract, true );
contract.setPlan( null );
tx.commit();

// get the same contract
tx = session.beginTransaction();
contract = ( Contract ) session.get( Contract.class, contractId );

// contract.getPlan() still refers to the original plan;

tx.commit();
session.close();&lt;/pre&gt;

                &lt;p&gt;
                    The following shows that, even though
                    an update to a read-only entity&apos;s many-to-one 
                    association has no affect on the entity&apos;s 
                    database representation, flush still cascades 
                    the save-update operation to the locally
                    changed association.
                &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// get a contract with an existing plan;
// make the contract read-only and change to a new plan
tx = session.beginTransaction();
Contract contract = ( Contract ) session.get( Contract.class, contractId );
session.setReadOnly( contract, true );
Plan newPlan = new Plan( &quot;new plan&quot;
contract.setPlan( newPlan);
tx.commit();

// get the same contract
tx = session.beginTransaction();
contract = ( Contract ) session.get( Contract.class, contractId );
newPlan = ( Contract ) session.get( Plan.class, newPlan.getId() ); 

// contract.getPlan() still refers to the original plan;
// newPlan is non-null because it was persisted when 
// the previous transaction was committed; 

tx.commit();
session.close();&lt;/pre&gt;

            &lt;/div&gt;

            &lt;div class=&quot;section&quot; title=&quot;12.2.2.2. Unidirectional one-to-many and many-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-manyended-unidir&quot;/&gt;12.2.2.2. Unidirectional one-to-many and many-to-many&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                

                &lt;p&gt;
                    Hibernate treats unidirectional one-to-many 
                    and many-to-many associations owned by a read-only
                    entity the same as when owned by an entity that is not 
                    read-only.
                &lt;/p&gt;

                &lt;p&gt;
                    Hibernate dirty-checks unidirectional one-to-many and 
                    many-to-many associations;
                &lt;/p&gt;

                &lt;p&gt;
                    The collection can contain entities that 
                    are read-only, as well as entities
                    that are not read-only.
                &lt;/p&gt;

                &lt;p&gt; 
                    Entities can be added and removed from the
                    collection; changes are flushed to the database.
                &lt;/p&gt;

                &lt;p&gt; 
                    If automatic versioning is used, Hibernate will 
                    update the version due to changes in the collection
                    if they dirty the owning entity.
                &lt;/p&gt;

            &lt;/div&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;12.2.3. Bidirectional associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-bidir&quot;/&gt;12.2.3. Bidirectional associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;div class=&quot;section&quot; title=&quot;12.2.3.1. Bidirectional one-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-onetoone-bidir&quot;/&gt;12.2.3.1. Bidirectional one-to-one&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                

                &lt;p&gt;
                    If a read-only entity owns a bidirectional 
                    one-to-one association:
                &lt;/p&gt;

                &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            Hibernate does not dirty-check the association. 
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            updates that change the association reference 
                            to null or to refer to a different entity
                            will not be flushed to the database. 
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            If automatic versioning is used, Hibernate will not 
                            increment the version due to local changes to 
                            the association.
                       &lt;/p&gt;   
                    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

                &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                    &lt;p&gt;
                        If an entity is of an immutable class,
                        and it owns a bidirectional one-to-one
                        association, then its reference must be
                        assigned when that entity is first created. 
                        Because the entity is automatically made 
                        read-only, these references cannot be updated.
                    &lt;/p&gt;   
                &lt;/div&gt;

                &lt;p&gt;
                    When the owner is not read-only, Hibernate treats 
                    an association with a read-only entity the same
                    as when the association is with an entity that is
                    not read-only.
                &lt;/p&gt;

            &lt;/div&gt;

            &lt;div class=&quot;section&quot; title=&quot;12.2.3.2. Bidirectional one-to-many/many-to-one&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-onetomany-manytoone&quot;/&gt;12.2.3.2. Bidirectional one-to-many/many-to-one&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                

                &lt;p&gt;
                    A read-only entity has no impact on a bidirectional
                    one-to-many/many-to-one association if:
                &lt;/p&gt;

                &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            the read-only entity is on the one-to-many side
                            using an inverse collection;
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            the read-only entity is on the one-to-many side
                            using a non-inverse collection;                            
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            the one-to-many side uses a non-inverse collection 
                            that contains the read-only entity
                       &lt;/p&gt;   
                    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

                &lt;p&gt;
                    When the one-to-many side uses an inverse collection:
                &lt;/p&gt;

                &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            a read-only entity can only be added to the collection
                            when it is created;
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                        &lt;p&gt;
                            a read-only entity can only be removed from the
                            collection by an orphan delete or by explicitly
                            deleting the entity.                            
                        &lt;/p&gt;
                    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

            &lt;/div&gt;

            &lt;div class=&quot;section&quot; title=&quot;12.2.3.3. Bidirectional many-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;readonly-proptypes-manytomany-bidir&quot;/&gt;12.2.3.3. Bidirectional many-to-many&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
                
                &lt;p&gt;
                    Hibernate treats bidirectional many-to-many 
                    associations owned by a read-only entity the
                    same as when owned by an entity that is not
                    read-only.
                &lt;/p&gt;

                &lt;p&gt;
                    Hibernate dirty-checks bidirectional many-to-many 
                    associations.
                &lt;/p&gt;

                &lt;p&gt; 
                    The collection on either side of the association
                    can contain entities that are read-only, as well
                    as entities that are not read-only.
                &lt;/p&gt;

                &lt;p&gt; 
                    Entities are added and removed from both sides 
                    of the collection; changes are flushed to the 
                    database.
                &lt;/p&gt;

                &lt;p&gt; 
                    If automatic versioning is used, Hibernate will 
                    update the version due to changes in both sides of
                    the collection if they dirty the entity owning the
                    respective collections.
                &lt;/p&gt;

            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 13. Transactions and Concurrency&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions&quot;/&gt;Chapter 13. Transactions and Concurrency&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics&quot;&gt;13.1. Session and transaction scopes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-uow&quot;&gt;13.1.1. Unit of work&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-apptx&quot;&gt;13.1.2. Long conversations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-identity&quot;&gt;13.1.3. Considering object identity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-basics-issues&quot;&gt;13.1.4. Common issues&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation&quot;&gt;13.2. Database transaction demarcation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-nonmanaged&quot;&gt;13.2.1. Non-managed environment&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-jta&quot;&gt;13.2.2. Using JTA&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-exceptions&quot;&gt;13.2.3. Exception handling&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-demarcation-timeout&quot;&gt;13.2.4. Transaction timeout&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic&quot;&gt;13.3. Optimistic concurrency control&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-manual&quot;&gt;13.3.1. Application version checking&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-longsession&quot;&gt;13.3.2. Extended session and automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-detached&quot;&gt;13.3.3. Detached objects and automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-optimistic-customizing&quot;&gt;13.3.4. Customizing automatic versioning&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-locking&quot;&gt;13.4. Pessimistic locking&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#transactions-connection-release&quot;&gt;13.5. Connection release modes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        The most important point about Hibernate and concurrency control is that it is
        easy to understand. Hibernate directly uses JDBC connections and JTA resources without
        adding any additional locking behavior. It is recommended that you spend some time with the
        JDBC, ANSI, and transaction isolation specification of your database management system.
    &lt;/p&gt;

    &lt;p&gt;
        Hibernate does not lock objects in memory. Your application can expect the behavior as
        defined by the isolation level of your database transactions. Through
        &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, which is also a transaction-scoped cache, Hibernate
        provides repeatable reads for lookup by identifier and entity queries and not
        reporting queries that return scalar values.
    &lt;/p&gt;

    &lt;p&gt;
        In addition to versioning for automatic optimistic concurrency control, Hibernate also
        offers, using the
        &lt;code class=&quot;literal&quot;&gt;SELECT FOR UPDATE&lt;/code&gt; syntax, a (minor) API for pessimistic locking of rows.  Optimistic concurrency control and
        this API are discussed later in this chapter.
    &lt;/p&gt;

    &lt;p&gt;
        The discussion of concurrency control in Hibernate begins with the granularity of
        &lt;code class=&quot;literal&quot;&gt;Configuration&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;, and
        &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, as well as database transactions and long conversations.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;13.1. Session and transaction scopes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-basics&quot;/&gt;13.1. Session and transaction scopes&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; is an expensive-to-create, threadsafe object, 
            intended to be shared by all application threads. It is created once, usually on
            application startup, from a &lt;code class=&quot;literal&quot;&gt;Configuration&lt;/code&gt; instance.
        &lt;/p&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is an inexpensive, non-threadsafe object that should be
            used once and then discarded for: a single request, a conversation or a single unit of work.
            A &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; will not obtain a JDBC &lt;code class=&quot;literal&quot;&gt;Connection&lt;/code&gt;,
            or a &lt;code class=&quot;literal&quot;&gt;Datasource&lt;/code&gt;, unless it is needed. It will not consume any
            resources until used.
        &lt;/p&gt;

        &lt;p&gt;
            In order to reduce lock contention in the database, a database transaction has to be as short as possible. 
            Long database transactions will prevent your application from scaling
            to a highly concurrent load. It is not recommended that you hold a
            database transaction open during user think time until the unit of work is
            complete.
        &lt;/p&gt;

        &lt;p&gt;
            What is the scope of a unit of work? Can a single Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
            span several database transactions, or is this a one-to-one relationship of scopes? When
            should you open and close a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and how do you demarcate the
            database transaction boundaries? These questions are addressed in the following sections.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.1.1. Unit of work&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-basics-uow&quot;/&gt;13.1.1. Unit of work&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                First, let&apos;s define a unit of work.  A unit of work is a
                design pattern described by Martin Fowler as
                &lt;span class=&quot;quote&quot;&gt;â&lt;span class=&quot;quote&quot;&gt;
                    [maintaining] a list of objects affected by a business
                    transaction and coordinates the writing out of changes
                    and the resolution of concurrency problems.
                &lt;/span&gt;â&lt;/span&gt;[&lt;a class=&quot;citation&quot; href=&quot;#biblio-PoEAA&quot;&gt;&lt;span class=&quot;citation&quot;&gt;PoEAA&lt;/span&gt;&lt;/a&gt;]
                In other words, its a series of operations we wish to carry out
                against the database together.  Basically, it is a transaction,
                though fulfilling a unit of work will often span multiple
                physical database transactions (see &lt;a class=&quot;xref&quot; href=&quot;#transactions-basics-apptx&quot; title=&quot;13.1.2. Long conversations&quot;&gt;Section 13.1.2, âLong conversationsâ&lt;/a&gt;).
                So really we are talking about a more abstract notion of a
                transaction.  The term &quot;business transaction&quot; is also sometimes
                used in lieu of unit of work.
            &lt;/p&gt;

            &lt;p&gt;
                Do not use the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-operation&lt;/em&gt;&lt;/span&gt; antipattern:
                do not open and close a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; for every simple database call in
                a single thread. The same is true for database transactions. Database calls
                in an application are made using a planned sequence; they are grouped into atomic
                units of work. This also means that auto-commit after every single
                SQL statement is useless in an application as this mode is intended for ad-hoc SQL
                console work. Hibernate disables, or expects the application server to disable,
                auto-commit mode immediately. Database transactions are never optional. All
                communication with a database has to occur inside a transaction. Auto-commit behavior for reading data
                should be avoided, as many small transactions are unlikely to perform better than
                one clearly defined unit of work. The latter is also more maintainable
                and extensible.
            &lt;/p&gt;

            &lt;p&gt;
                The most common pattern in a multi-user client/server application is
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request&lt;/em&gt;&lt;/span&gt;. In this model, a request from the client
                is sent to the server, where the Hibernate persistence layer runs. A new Hibernate
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is opened, and all database operations are executed in this unit
                of work. On completion of the work, and once the response for the client has been prepared,
                the session is flushed and closed. Use a single database transaction to
                serve the clients request, starting and committing it when you open and close the
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. The relationship between the two is one-to-one and this
                model is a perfect fit for many applications.
            &lt;/p&gt;

            &lt;p&gt;
                The challenge lies in the implementation. Hibernate provides built-in management of
                the &quot;current session&quot; to simplify this pattern. Start a
                transaction when a server request has to be processed, and end the transaction
                before the response is sent to the client. Common solutions are &lt;code class=&quot;literal&quot;&gt;ServletFilter&lt;/code&gt;, AOP interceptor with a
                pointcut on the service methods, or a proxy/interception container. An EJB container
                is a standardized way to implement cross-cutting aspects such as transaction
                demarcation on EJB session beans, declaratively with CMT. If you
                use programmatic transaction demarcation, for ease of use and code portability use the Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt;
                API shown later in this chapter.
            &lt;/p&gt;

            &lt;p&gt;
                Your application code can access a &quot;current session&quot; to process the request
                by calling &lt;code class=&quot;literal&quot;&gt;sessionFactory.getCurrentSession()&lt;/code&gt;. 
		You will always get a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; scoped
                to the current database transaction. This has to be configured for either
                resource-local or JTA environments, see &lt;a class=&quot;xref&quot; href=&quot;#architecture-current-session&quot; title=&quot;2.2. Contextual sessions&quot;&gt;Section 2.2, âContextual sessionsâ&lt;/a&gt;.
            &lt;/p&gt;

            &lt;p&gt;
                You can extend the scope of a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and
                database transaction until the &quot;view has been rendered&quot;. This is especially useful
                in servlet applications that utilize a separate rendering phase after the request
                has been processed. Extending the database transaction until view rendering, is achieved by implementing
                your own interceptor. However, this will be difficult
                if you rely on EJBs with container-managed transactions. A
                transaction will be completed when an EJB method returns, before rendering of any
                view can start. See the Hibernate website and forum for tips and examples relating to
                this &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Open Session in View&lt;/em&gt;&lt;/span&gt; pattern.
             &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.1.2. Long conversations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-basics-apptx&quot;/&gt;13.1.2. Long conversations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The session-per-request pattern is not the only way of designing
                units of work. Many business processes require a whole series of interactions with the user that are
                interleaved with database accesses. In web and enterprise applications, it is
                not acceptable for a database transaction to span a user interaction. Consider the following
                example:
            &lt;/p&gt;

            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        The first screen of a dialog opens. The data seen by the user has been loaded in
                        a particular &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and database transaction. The user is free to
                        modify the objects.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        The user clicks &quot;Save&quot; after 5 minutes and expects their modifications to be made
                        persistent. The user also expects that they were the only person editing this information and
                        that no conflicting modification has occurred.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

            &lt;p&gt;
                From the point of view of the user, we call this unit of work a long-running
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;conversation&lt;/em&gt;&lt;/span&gt; or &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;application transaction&lt;/em&gt;&lt;/span&gt;.
                There are many ways to implement this in your application.
            &lt;/p&gt;

            &lt;p&gt;
                A first naive implementation might keep the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and database
                transaction open during user think time, with locks held in the database to prevent
                concurrent modification and to guarantee isolation and atomicity. This is 
                an anti-pattern, since lock contention would not allow the application to scale with
                the number of concurrent users.
            &lt;/p&gt;

            &lt;p&gt;
                You have to use several database transactions to implement the conversation.
                In this case, maintaining isolation of business processes becomes the
                partial responsibility of the application tier. A single conversation
                usually spans several database transactions. It will be atomic if only one of
                these database transactions (the last one) stores the updated data. All others
                simply read data (for example, in a wizard-style dialog spanning several request/response
                cycles). This is easier to implement than it might sound, especially if
                you utilize some of Hibernate&apos;s features:
            &lt;/p&gt;

            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Automatic Versioning&lt;/em&gt;&lt;/span&gt;: Hibernate can perform automatic
                        optimistic concurrency control for you. It can automatically detect
                        if a concurrent modification occurred during user think time. Check for this at 
			the end of the conversation.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Detached Objects&lt;/em&gt;&lt;/span&gt;: if you decide to use the
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request&lt;/em&gt;&lt;/span&gt; pattern, all loaded instances
                        will be in the detached state during user think time. Hibernate allows you to
                        reattach the objects and persist the modifications. The pattern is called
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request-with-detached-objects&lt;/em&gt;&lt;/span&gt;. Automatic
                        versioning is used to isolate concurrent modifications.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Extended (or Long) Session&lt;/em&gt;&lt;/span&gt;: the Hibernate
                        &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; can be disconnected from the underlying JDBC
                        connection after the database transaction has been committed and reconnected
                        when a new client request occurs. This pattern is known as
                        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-conversation&lt;/em&gt;&lt;/span&gt; and makes
                        even reattachment unnecessary. Automatic versioning is used to isolate
                        concurrent modifications and the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; will not
                        be allowed to be flushed automatically, but explicitly.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

            &lt;p&gt;
                Both &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-request-with-detached-objects&lt;/em&gt;&lt;/span&gt; and
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-conversation&lt;/em&gt;&lt;/span&gt; have advantages and disadvantages.
                These disadvantages are discussed later in this chapter in the context of optimistic concurrency control.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.1.3. Considering object identity&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-basics-identity&quot;/&gt;13.1.3. Considering object identity&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                An application can concurrently access the same persistent state in two
                different &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;s. However, an instance of a persistent class
                is never shared between two &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; instances. It is for this reason that there are
                two different notions of identity:
            &lt;/p&gt;

            &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Database Identity&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                        &lt;p&gt;
                            &lt;code class=&quot;literal&quot;&gt;foo.getId().equals( bar.getId() )&lt;/code&gt;
                        &lt;/p&gt;
                    &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;JVM Identity&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                        &lt;p&gt;
                            &lt;code class=&quot;literal&quot;&gt;foo==bar&lt;/code&gt;
                        &lt;/p&gt;
                    &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

            &lt;p&gt;
                For objects attached to a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;particular&lt;/em&gt;&lt;/span&gt; &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
                (i.e., in the scope of a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;), the two notions are equivalent and
                JVM identity for database identity is guaranteed by Hibernate. While the application
                might concurrently access the &quot;same&quot; (persistent identity) business object in two different
                sessions, the two instances will actually be &quot;different&quot; (JVM identity). Conflicts are
                resolved using an optimistic approach and automatic versioning at flush/commit time.
            &lt;/p&gt;

            &lt;p&gt;
                This approach leaves Hibernate and the database to worry about concurrency. It also provides
                the best scalability, since guaranteeing identity in single-threaded units of work means that it does not
                need expensive locking or other means of synchronization. The application does not need to
                synchronize on any business object, as long as it maintains a single thread per
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. Within a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; the application can safely use
                &lt;code class=&quot;literal&quot;&gt;==&lt;/code&gt; to compare objects.
            &lt;/p&gt;

            &lt;p&gt;
                However, an application that uses &lt;code class=&quot;literal&quot;&gt;==&lt;/code&gt; outside of a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
                might produce unexpected results. This might occur even in some unexpected places. For example,
                if you put two detached instances into the same &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;, both might have the same
                database identity (i.e., they represent the same row). JVM identity, however, is by definition not
                guaranteed for instances in a detached state. The developer has to override the &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt;
                and &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; methods in persistent classes and implement
                their own notion of object equality. There is one caveat: never use the database
                identifier to implement equality. Use a business key that is a combination of unique, usually
                immutable, attributes. The database identifier will change if a transient object is made
                persistent. If the transient instance (usually together with detached instances) is held in a
                &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;, changing the hashcode breaks the contract of the &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;.
                Attributes for business keys do not have to be as stable as database primary keys; you only
                have to guarantee stability as long as the objects are in the same &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;. See
                the Hibernate website for a more thorough discussion of this issue. Please note that this is not
                a Hibernate issue, but simply how Java object identity and equality has to be implemented.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.1.4. Common issues&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-basics-issues&quot;/&gt;13.1.4. Common issues&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

             &lt;p&gt;
                 Do not use the anti-patterns &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-user-session&lt;/em&gt;&lt;/span&gt; or
                 &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-application&lt;/em&gt;&lt;/span&gt; (there are, however, rare exceptions to
                 this rule). Some of the following issues might also arise within the recommended
                 patterns, so ensure that you understand the implications before making a design decision:
             &lt;/p&gt;

            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        A &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is not thread-safe. Things that work
                        concurrently, like HTTP requests, session beans, or Swing workers, will cause race
                        conditions if a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; instance is shared. If you keep your
                        Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; in your &lt;code class=&quot;literal&quot;&gt;HttpSession&lt;/code&gt; (this is discussed
                        later in the chapter), you should consider synchronizing access to your Http session. Otherwise,
                        a user that clicks reload fast enough can use the same &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; in
                        two concurrently running threads.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        An exception thrown by Hibernate means you have to rollback your database transaction
                        and close the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; immediately (this is discussed in more detail later in the chapter).
                        If your &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is bound to the application, you have to stop
                        the application. Rolling back the database transaction does not put your business
                        objects back into the state they were at the start of the transaction. This means that the
                        database state and the business objects will be out of sync. Usually this is not a
                        problem, because exceptions are not recoverable and you will have to start over after
                        rollback anyway.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        The &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; caches every object that is in a persistent state (watched
                        and checked for dirty state by Hibernate).  If you keep it open for a long time or simply load too
                        much data, it will grow endlessly until you
                        get an OutOfMemoryException. One solution is to call &lt;code class=&quot;literal&quot;&gt;clear()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;evict()&lt;/code&gt;
                        to manage the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; cache, but you should consider a
                        Stored Procedure if you need mass data operations. Some solutions are shown in
                        &lt;a class=&quot;xref&quot; href=&quot;#batch&quot; title=&quot;Chapter 15. Batch processing&quot;&gt;Chapter 15, &lt;em&gt;Batch processing&lt;/em&gt;&lt;/a&gt;. Keeping a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; open for the duration
                        of a user session also means a higher probability of stale data.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;13.2. Database transaction demarcation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-demarcation&quot;/&gt;13.2. Database transaction demarcation&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Database, or system, transaction boundaries are always necessary. No communication with
            the database can occur outside of a database transaction (this seems to confuse many developers
            who are used to the auto-commit mode). Always use clear transaction boundaries, even for
            read-only operations. Depending on your isolation level and database capabilities this might not
            be required, but there is no downside if you always demarcate transactions explicitly. Certainly,
            a single database transaction is going to perform better than many small transactions, even
            for reading data.
        &lt;/p&gt;

        &lt;p&gt;
            A Hibernate application can run in non-managed (i.e., standalone, simple Web- or Swing applications)
            and managed J2EE environments. In a non-managed environment, Hibernate is usually responsible for
            its own database connection pool. The application developer has to manually set transaction
            boundaries (begin, commit, or rollback database transactions) themselves. A managed environment
            usually provides container-managed transactions (CMT), with the transaction assembly defined declaratively
            (in deployment descriptors of EJB session beans, for example). Programmatic transaction demarcation is
            then no longer necessary.
        &lt;/p&gt;

        &lt;p&gt;
            However, it is often desirable to keep your persistence layer portable between non-managed
            resource-local environments, and systems that can rely on JTA but use BMT instead of CMT.
            In both cases use programmatic transaction demarcation. Hibernate offers a wrapper
            API called &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; that translates into the native transaction system of
            your deployment environment. This API is actually optional, but we strongly encourage its use
            unless you are in a CMT session bean.
        &lt;/p&gt;

        &lt;p&gt;
            Ending a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; usually involves four distinct phases:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    flush the session
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    commit the transaction
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    close the session
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    handle exceptions
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            We discussed Flushing the session earlier, so we will now have a closer look at transaction
            demarcation and exception handling in both managed and non-managed environments.
        &lt;/p&gt;


        &lt;div class=&quot;section&quot; title=&quot;13.2.1. Non-managed environment&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-demarcation-nonmanaged&quot;/&gt;13.2.1. Non-managed environment&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                If a Hibernate persistence layer runs in a non-managed environment, database connections
                are usually handled by simple (i.e., non-DataSource) connection pools from which
	            Hibernate obtains connections as needed. The session/transaction handling idiom looks
	            like this:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// Non-managed environment idiom
Session sess = factory.openSession();
Transaction tx = null;
try {
    tx = sess.beginTransaction();

    // do some work
    ...

    tx.commit();
}
catch (RuntimeException e) {
    if (tx != null) tx.rollback();
    throw e; // or display error message
}
finally {
    sess.close();
}&lt;/pre&gt;

            &lt;p&gt;
                You do not have to &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; explicitly:
                the call to &lt;code class=&quot;literal&quot;&gt;commit()&lt;/code&gt; automatically triggers the synchronization depending
	            on the &lt;a class=&quot;xref&quot; href=&quot;#objectstate-flushing&quot; title=&quot;11.10. Flushing the Session&quot;&gt;Section 11.10, âFlushing the Sessionâ&lt;/a&gt; for the session.
                A call to &lt;code class=&quot;literal&quot;&gt;close()&lt;/code&gt; marks the end of a session. The main implication
                of &lt;code class=&quot;literal&quot;&gt;close()&lt;/code&gt; is that the JDBC connection will be relinquished by the
                session. This Java code is portable and runs in both non-managed and JTA environments.
            &lt;/p&gt;

           &lt;p&gt;
                As outlined earlier, a much more flexible solution is Hibernate&apos;s built-in &quot;current session&quot; context
                management:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// Non-managed environment idiom with getCurrentSession()
try {
    factory.getCurrentSession().beginTransaction();

    // do some work
    ...

    factory.getCurrentSession().getTransaction().commit();
}
catch (RuntimeException e) {
    factory.getCurrentSession().getTransaction().rollback();
    throw e; // or display error message
}&lt;/pre&gt;

            &lt;p&gt;
                You will not see these code snippets in a regular application;
                fatal (system) exceptions should always be caught at the &quot;top&quot;. In other words, the
                code that executes Hibernate calls in the persistence layer, and the code that handles
                &lt;code class=&quot;literal&quot;&gt;RuntimeException&lt;/code&gt; (and usually can only clean up and exit), are in
                different layers. The current context management by Hibernate can significantly
                simplify this design by accessing a &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;.
                Exception handling is discussed later in this chapter.
            &lt;/p&gt;

           &lt;p&gt;
                You should select &lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JDBCTransactionFactory&lt;/code&gt;,
                which is the default, and for the second example select &lt;code class=&quot;literal&quot;&gt;&quot;thread&quot;&lt;/code&gt; as your
                &lt;code class=&quot;literal&quot;&gt;hibernate.current_session_context_class&lt;/code&gt;.
            &lt;/p&gt;
            
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.2.2. Using JTA&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-demarcation-jta&quot;/&gt;13.2.2. Using JTA&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                If your persistence layer runs in an application server (for example, behind EJB session beans),
                every datasource connection obtained by Hibernate will automatically be part of the global
                JTA transaction. You can also install a standalone JTA implementation and use it without
                EJB. Hibernate offers two strategies for JTA integration.
            &lt;/p&gt;

            &lt;p&gt;
                If you use bean-managed transactions (BMT), Hibernate will tell the application server to start
                and end a BMT transaction if you use the &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API. The
                transaction management code is identical to the non-managed environment.
            &lt;/p&gt;
            
           &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// BMT idiom
Session sess = factory.openSession();
Transaction tx = null;
try {
    tx = sess.beginTransaction();

    // do some work
    ...

    tx.commit();
}
catch (RuntimeException e) {
    if (tx != null) tx.rollback();
    throw e; // or display error message
}
finally {
    sess.close();
}&lt;/pre&gt;

           &lt;p&gt;
                If you want to use a transaction-bound &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, that is, the
               &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; functionality for easy context propagation,
               use the JTA &lt;code class=&quot;literal&quot;&gt;UserTransaction&lt;/code&gt; API directly:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// BMT idiom with getCurrentSession()
try {
    UserTransaction tx = (UserTransaction)new InitialContext()
                            .lookup(&quot;java:comp/UserTransaction&quot;);

    tx.begin();

    // Do some work on Session bound to transaction
    factory.getCurrentSession().load(...);
    factory.getCurrentSession().persist(...);

    tx.commit();
}
catch (RuntimeException e) {
    tx.rollback();
    throw e; // or display error message
}&lt;/pre&gt;

            &lt;p&gt;
                With CMT, transaction demarcation is completed in session bean deployment descriptors, not programmatically.
                The code is reduced to:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// CMT idiom
 Session sess = factory.getCurrentSession();

 // do some work
 ...
&lt;/pre&gt;

            &lt;p&gt;
                In a CMT/EJB, even rollback happens automatically. An unhandled &lt;code class=&quot;literal&quot;&gt;RuntimeException&lt;/code&gt;
                thrown  by a session bean method tells the container to set the global transaction to rollback.
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;You do not need to use the Hibernate &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; API at
                all with BMT or CMT, and you get automatic propagation of the &quot;current&quot; Session bound to the
                transaction.&lt;/em&gt;&lt;/span&gt;
            &lt;/p&gt;

            &lt;p&gt;
                When configuring Hibernate&apos;s transaction factory, choose &lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.JTATransactionFactory&lt;/code&gt;
                if you use JTA directly (BMT), and &lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.CMTTransactionFactory&lt;/code&gt;
                in a CMT session bean.  Remember to also set
                &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt;. Ensure
                that your &lt;code class=&quot;literal&quot;&gt;hibernate.current_session_context_class&lt;/code&gt; is either unset (backwards
                compatibility), or is set to &lt;code class=&quot;literal&quot;&gt;&quot;jta&quot;&lt;/code&gt;.
            &lt;/p&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;getCurrentSession()&lt;/code&gt; operation has one downside in a JTA environment.
                There is one caveat to the use of &lt;code class=&quot;literal&quot;&gt;after_statement&lt;/code&gt; connection release
                mode, which is then used by default. Due to a limitation of the JTA spec, it is not
                possible for Hibernate to automatically clean up any unclosed &lt;code class=&quot;literal&quot;&gt;ScrollableResults&lt;/code&gt; or
                &lt;code class=&quot;literal&quot;&gt;Iterator&lt;/code&gt; instances returned by &lt;code class=&quot;literal&quot;&gt;scroll()&lt;/code&gt; or 
                &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt;. You &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;must&lt;/em&gt;&lt;/span&gt; release the underlying database 
                cursor by calling &lt;code class=&quot;literal&quot;&gt;ScrollableResults.close()&lt;/code&gt; or 
                &lt;code class=&quot;literal&quot;&gt;Hibernate.close(Iterator)&lt;/code&gt; explicitly from a &lt;code class=&quot;literal&quot;&gt;finally&lt;/code&gt; 
                block. Most applications can easily avoid using &lt;code class=&quot;literal&quot;&gt;scroll()&lt;/code&gt; or 
                &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt; from the JTA or CMT code.)
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.2.3. Exception handling&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-demarcation-exceptions&quot;/&gt;13.2.3. Exception handling&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                If the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; throws an exception, including any
                &lt;code class=&quot;literal&quot;&gt;SQLException&lt;/code&gt;, immediately rollback the database
                transaction, call &lt;code class=&quot;literal&quot;&gt;Session.close()&lt;/code&gt; and discard the
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; instance. Certain methods of &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
                will &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; leave the session in a consistent state. No
                exception thrown by Hibernate can be treated as recoverable. Ensure that the
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; will be closed by calling &lt;code class=&quot;literal&quot;&gt;close()&lt;/code&gt;
                in a &lt;code class=&quot;literal&quot;&gt;finally&lt;/code&gt; block.
            &lt;/p&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;HibernateException&lt;/code&gt;, which wraps most of the errors that
                can occur in a Hibernate persistence layer, is an unchecked exception. It was not
                in older versions of Hibernate. In our opinion, we should not force the application
                developer to catch an unrecoverable exception at a low layer. In most systems, unchecked
                and fatal exceptions are handled in one of the first frames of the method call
                stack (i.e., in higher layers) and either an error message is presented to the application
                user or some other appropriate action is taken. Note that Hibernate might also throw
                other unchecked exceptions that are not a &lt;code class=&quot;literal&quot;&gt;HibernateException&lt;/code&gt;. These 
                are not recoverable and appropriate action should be taken.
            &lt;/p&gt;

            &lt;p&gt;
                Hibernate wraps &lt;code class=&quot;literal&quot;&gt;SQLException&lt;/code&gt;s thrown while interacting with the database
                in a &lt;code class=&quot;literal&quot;&gt;JDBCException&lt;/code&gt;. In fact, Hibernate will attempt to convert the exception
                into a more meaningful subclass of &lt;code class=&quot;literal&quot;&gt;JDBCException&lt;/code&gt;.  The underlying
                &lt;code class=&quot;literal&quot;&gt;SQLException&lt;/code&gt; is always available via &lt;code class=&quot;literal&quot;&gt;JDBCException.getCause()&lt;/code&gt;.
                Hibernate converts the &lt;code class=&quot;literal&quot;&gt;SQLException&lt;/code&gt; into an appropriate 
                &lt;code class=&quot;literal&quot;&gt;JDBCException&lt;/code&gt; subclass using the &lt;code class=&quot;literal&quot;&gt;SQLExceptionConverter&lt;/code&gt; 
                attached to the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;. By default, the 
                &lt;code class=&quot;literal&quot;&gt;SQLExceptionConverter&lt;/code&gt; is defined by the configured dialect.  However, it is
                also possible to plug in a custom implementation. See the javadocs for the
                &lt;code class=&quot;literal&quot;&gt;SQLExceptionConverterFactory&lt;/code&gt; class for details.  The standard 
                &lt;code class=&quot;literal&quot;&gt;JDBCException&lt;/code&gt; subtypes are:
            &lt;/p&gt;

            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;literal&quot;&gt;JDBCConnectionException&lt;/code&gt;: indicates an error
                        with the underlying JDBC communication.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;literal&quot;&gt;SQLGrammarException&lt;/code&gt;: indicates a grammar
                        or syntax problem with the issued SQL.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;literal&quot;&gt;ConstraintViolationException&lt;/code&gt;: indicates some
                        form of integrity constraint violation.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;literal&quot;&gt;LockAcquisitionException&lt;/code&gt;: indicates an error
                        acquiring a lock level necessary to perform the requested operation.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;
                        &lt;code class=&quot;literal&quot;&gt;GenericJDBCException&lt;/code&gt;: a generic exception
                        which did not fall into any of the other categories.
                    &lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.2.4. Transaction timeout&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-demarcation-timeout&quot;/&gt;13.2.4. Transaction timeout&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                An important feature provided by a managed environment like EJB,
                that is never provided for non-managed code, is transaction timeout. Transaction
                timeouts ensure that no misbehaving transaction can indefinitely tie up 
                resources while returning no response to the user. Outside a managed (JTA)
                environment, Hibernate cannot fully provide this functionality. However,
                Hibernate can at least control data access operations, ensuring that database
                level deadlocks and queries with huge result sets are limited by a defined
                timeout. In a managed environment, Hibernate can delegate transaction timeout
                to JTA. This functionality is abstracted by the Hibernate 
                &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; object.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
Session sess = factory.openSession();
try {
    //set transaction timeout to 3 seconds
    sess.getTransaction().setTimeout(3);
    sess.getTransaction().begin();

    // do some work
    ...

    sess.getTransaction().commit()
}
catch (RuntimeException e) {
    sess.getTransaction().rollback();
    throw e; // or display error message
}
finally {
    sess.close();
}&lt;/pre&gt;

            &lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;setTimeout()&lt;/code&gt; cannot be called in a CMT bean,
                where transaction timeouts must be defined declaratively.
            &lt;/p&gt;
            
        &lt;/div&gt;
        
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;13.3. Optimistic concurrency control&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-optimistic&quot;/&gt;13.3. Optimistic concurrency control&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The only approach that is consistent with high concurrency and high
            scalability, is optimistic concurrency control with versioning. Version
            checking uses version numbers, or timestamps, to detect conflicting updates
            and to prevent lost updates. Hibernate provides three possible approaches
            to writing application code that uses optimistic concurrency. The use cases
            we discuss are in the context of long conversations, but version checking
            also has the benefit of preventing lost updates in single database transactions.
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.3.1. Application version checking&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-optimistic-manual&quot;/&gt;13.3.1. Application version checking&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                In an implementation without much help from Hibernate, each interaction with the
                database occurs in a new &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and the developer is responsible
                for reloading all persistent instances from the database before manipulating them.
                The application is forced to carry out its own version checking to ensure
                conversation transaction isolation. This approach is the least efficient in terms of
                database access. It is the approach most similar to entity EJBs.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// foo is an instance loaded by a previous Session
session = factory.openSession();
Transaction t = session.beginTransaction();

int oldVersion = foo.getVersion();
session.load( foo, foo.getKey() ); // load the current state
if ( oldVersion != foo.getVersion() ) throw new StaleObjectStateException();
foo.setProperty(&quot;bar&quot;);

t.commit();
session.close();&lt;/pre&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;version&lt;/code&gt; property is mapped using &lt;code class=&quot;literal&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt;,
                and Hibernate will automatically increment it during flush if the entity is
                dirty.
            &lt;/p&gt;

            &lt;p&gt;
                If you are operating in a low-data-concurrency environment, and do not
                require version checking, you can use this approach and skip the version
                check. In this case, &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;last commit wins&lt;/em&gt;&lt;/span&gt; is the default
                strategy for long conversations. Be aware that this might
                confuse the users of the application, as they might experience lost updates without
                error messages or a chance to merge conflicting changes.
            &lt;/p&gt;

            &lt;p&gt;
                Manual version checking is only feasible in trivial circumstances
                and not practical for most applications. Often not only single instances, but
                complete graphs of modified objects, have to be checked. Hibernate offers automatic
                version checking with either an extended &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; or detached instances
                as the design paradigm.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.3.2. Extended session and automatic versioning&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-optimistic-longsession&quot;/&gt;13.3.2. Extended session and automatic versioning&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                A single &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; instance and its persistent instances that are
                used for the whole conversation are known as &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-conversation&lt;/em&gt;&lt;/span&gt;.
                Hibernate checks instance versions at flush time, throwing an exception if concurrent
                modification is detected. It is up to the developer to catch and handle this exception. 
                Common options are the opportunity for the user to merge changes or to restart the
                business conversation with non-stale data.
            &lt;/p&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is disconnected from any underlying JDBC connection
                when waiting for user interaction. This approach is the most efficient in terms
                of database access. The application does not version check or
                reattach detached instances, nor does it have to reload instances in every
                database transaction.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// foo is an instance loaded earlier by the old session
Transaction t = session.beginTransaction(); // Obtain a new JDBC connection, start transaction

foo.setProperty(&quot;bar&quot;);

session.flush();    // Only for last transaction in conversation
t.commit();         // Also return JDBC connection
session.close();    // Only for last transaction in conversation&lt;/pre&gt;
            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;foo&lt;/code&gt; object knows which &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; it was
                loaded in. Beginning a new database transaction on an old session obtains a new connection
                and resumes the session. Committing a database transaction disconnects a session
                from the JDBC connection and returns the connection to the pool. After reconnection, to
                force a version check on data you are not updating, you can call &lt;code class=&quot;literal&quot;&gt;Session.lock()&lt;/code&gt;
                with &lt;code class=&quot;literal&quot;&gt;LockMode.READ&lt;/code&gt; on any objects that might have been updated by another
                transaction. You do not need to lock any data that you &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;are&lt;/em&gt;&lt;/span&gt; updating.
                Usually you would set &lt;code class=&quot;literal&quot;&gt;FlushMode.MANUAL&lt;/code&gt; on an extended &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;,
                so that only the last database transaction cycle is allowed to actually persist all
                modifications made in this conversation. Only this last database transaction
                will include the &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; operation, and then
                &lt;code class=&quot;literal&quot;&gt;close()&lt;/code&gt; the session to end the conversation.
            &lt;/p&gt;
            
            &lt;p&gt;
                This pattern is problematic if the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is too big to
                be stored during user think time (for example, an &lt;code class=&quot;literal&quot;&gt;HttpSession&lt;/code&gt; should
                be kept as small as possible). As the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is also the
                first-level cache and contains all loaded objects, we can probably
                use this strategy only for a few request/response cycles. Use a
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; only for a single conversation as it will soon
                have stale data.
            &lt;/p&gt;

            &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
           
	   &lt;p&gt;Earlier versions of Hibernate required explicit disconnection and reconnection
                of a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. These methods are deprecated, as beginning and
                ending a transaction has the same effect.
	    &lt;/p&gt;
            &lt;/div&gt;

            &lt;p&gt;
                Keep the disconnected &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; close
                to the persistence layer. Use an EJB stateful session bean to
                hold the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; in a three-tier environment. Do not transfer
                it to the web layer, or even serialize it to a separate tier, to store it in the
                &lt;code class=&quot;literal&quot;&gt;HttpSession&lt;/code&gt;.
            &lt;/p&gt;

            &lt;p&gt;
                The extended session pattern, or &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;session-per-conversation&lt;/em&gt;&lt;/span&gt;, is
                more difficult to implement with automatic current session context management.
                You need to supply your own implementation of the &lt;code class=&quot;literal&quot;&gt;CurrentSessionContext&lt;/code&gt;
                for this. See the Hibernate Wiki for examples.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.3.3. Detached objects and automatic versioning&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-optimistic-detached&quot;/&gt;13.3.3. Detached objects and automatic versioning&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Each interaction with the persistent store occurs in a new &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.
                However, the same persistent instances are reused for each interaction with the database.
                The application manipulates the state of detached instances originally loaded in another
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and then reattaches them using &lt;code class=&quot;literal&quot;&gt;Session.update()&lt;/code&gt;,
                &lt;code class=&quot;literal&quot;&gt;Session.saveOrUpdate()&lt;/code&gt;, or &lt;code class=&quot;literal&quot;&gt;Session.merge()&lt;/code&gt;.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// foo is an instance loaded by a previous Session
foo.setProperty(&quot;bar&quot;);
session = factory.openSession();
Transaction t = session.beginTransaction();
session.saveOrUpdate(foo); // Use merge() if &quot;foo&quot; might have been loaded already
t.commit();
session.close();&lt;/pre&gt;

            &lt;p&gt;
                Again, Hibernate will check instance versions during flush, throwing an
                exception if conflicting updates occurred.
            &lt;/p&gt;

            &lt;p&gt;
                You can also call &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt; instead of &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;,
                and use &lt;code class=&quot;literal&quot;&gt;LockMode.READ&lt;/code&gt; (performing a version check and bypassing all
                caches) if you are sure that the object has not been modified.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;13.3.4. Customizing automatic versioning&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-optimistic-customizing&quot;/&gt;13.3.4. Customizing automatic versioning&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                You can disable Hibernate&apos;s automatic version increment for particular properties and 
                collections by setting the &lt;code class=&quot;literal&quot;&gt;optimistic-lock&lt;/code&gt; mapping attribute to 
                &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;. Hibernate will then no longer increment versions if the 
                property is dirty.
            &lt;/p&gt;

            &lt;p&gt;
                Legacy database schemas are often static and cannot be modified. Or, other applications
                might access the same database and will not know how to handle version numbers or
                even timestamps. In both cases, versioning cannot rely on a particular column in a table.
                To force a version check with a
                comparison of the state of all fields in a row but without a version or timestamp property mapping, 
		turn on &lt;code class=&quot;literal&quot;&gt;optimistic-lock=&quot;all&quot;&lt;/code&gt;
                in the &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; mapping. This conceptually only works
                if Hibernate can compare the old and the new state (i.e., if you use a single long
                &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; and not session-per-request-with-detached-objects).
            &lt;/p&gt;

            &lt;p&gt;
                Concurrent modification can be permitted in instances where the changes that have been
                made do not overlap. If you set &lt;code class=&quot;literal&quot;&gt;optimistic-lock=&quot;dirty&quot;&lt;/code&gt; when mapping the
                &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt;, Hibernate will only compare dirty fields during flush.
            &lt;/p&gt;

            &lt;p&gt;
                In both cases, with dedicated version/timestamp columns or with a full/dirty field
                comparison, Hibernate uses a single &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; statement, with an
                appropriate &lt;code class=&quot;literal&quot;&gt;WHERE&lt;/code&gt; clause, per entity to execute the version check
                and update the information. If you use transitive persistence to cascade reattachment
                to associated entities, Hibernate may execute unnecessary updates. This is usually
                not a problem, but &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;on update&lt;/em&gt;&lt;/span&gt; triggers in the database might be
                executed even when no changes have been made to detached instances. You can customize
                this behavior by setting  &lt;code class=&quot;literal&quot;&gt;select-before-update=&quot;true&quot;&lt;/code&gt; in the
                &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; mapping, forcing Hibernate to &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;
                the instance to ensure that changes did occur before updating the row.
            &lt;/p&gt;

        &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;13.4. Pessimistic locking&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-locking&quot;/&gt;13.4. Pessimistic locking&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            It is not intended that users spend much time worrying about locking strategies. It is usually
            enough to specify an isolation level for the JDBC connections and then simply let the
            database do all the work. However, advanced users may wish to obtain
            exclusive pessimistic locks or re-obtain locks at the start of a new transaction.
        &lt;/p&gt;

        &lt;p&gt;
            Hibernate will always use the locking mechanism of the database; it never lock objects
            in memory.
        &lt;/p&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;LockMode&lt;/code&gt; class defines the different lock levels that can be acquired
            by Hibernate. A lock is obtained by the following mechanisms:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;LockMode.WRITE&lt;/code&gt; is acquired automatically when Hibernate updates or inserts
                    a row.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;LockMode.UPGRADE&lt;/code&gt; can be acquired upon explicit user request using
                    &lt;code class=&quot;literal&quot;&gt;SELECT ... FOR UPDATE&lt;/code&gt; on databases which support that syntax.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;LockMode.UPGRADE_NOWAIT&lt;/code&gt; can be acquired upon explicit user request using a
                    &lt;code class=&quot;literal&quot;&gt;SELECT ... FOR UPDATE NOWAIT&lt;/code&gt; under Oracle.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;LockMode.READ&lt;/code&gt; is acquired automatically when Hibernate reads data
                    under Repeatable Read or Serializable isolation level. It can be re-acquired by explicit user
                    request.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;
            &lt;code class=&quot;literal&quot;&gt;LockMode.NONE&lt;/code&gt; represents the absence of a lock. All objects switch to this
            lock mode at the end of a &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt;. Objects associated with the session
            via a call to &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt; also start out
            in this lock mode.
        &lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            The &quot;explicit user request&quot; is expressed in one of the following ways:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    A call to &lt;code class=&quot;literal&quot;&gt;Session.load()&lt;/code&gt;, specifying a &lt;code class=&quot;literal&quot;&gt;LockMode&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    A call to &lt;code class=&quot;literal&quot;&gt;Session.lock()&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    A call to &lt;code class=&quot;literal&quot;&gt;Query.setLockMode()&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            If &lt;code class=&quot;literal&quot;&gt;Session.load()&lt;/code&gt; is called with &lt;code class=&quot;literal&quot;&gt;UPGRADE&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;UPGRADE_NOWAIT&lt;/code&gt;, and the requested object was not yet loaded by
            the session, the object is loaded using &lt;code class=&quot;literal&quot;&gt;SELECT ... FOR UPDATE&lt;/code&gt;.
            If &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; is called for an object that is already loaded with
            a less restrictive lock than the one requested, Hibernate calls
            &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt; for that object.
        &lt;/p&gt;

        &lt;p&gt;
            &lt;code class=&quot;literal&quot;&gt;Session.lock()&lt;/code&gt; performs a version number check if the specified lock
            mode is &lt;code class=&quot;literal&quot;&gt;READ&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;UPGRADE&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;UPGRADE_NOWAIT&lt;/code&gt;. In the case of &lt;code class=&quot;literal&quot;&gt;UPGRADE&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;UPGRADE_NOWAIT&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;SELECT ... FOR UPDATE&lt;/code&gt; is used.
        &lt;/p&gt;

        &lt;p&gt;
            If the requested lock mode is not supported by the database, Hibernate uses an appropriate
            alternate mode instead of throwing an exception. This ensures that applications are
            portable.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;13.5. Connection release modes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;transactions-connection-release&quot;/&gt;13.5. Connection release modes&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            One of the legacies of Hibernate 2.x JDBC connection management 
            meant that a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; would obtain a connection when it was first
            required and then maintain that connection until the session was closed.
            Hibernate 3.x introduced the notion of connection release modes that would instruct a session
            how to handle its JDBC connections.  The following discussion is pertinent
            only to connections provided through a configured &lt;code class=&quot;literal&quot;&gt;ConnectionProvider&lt;/code&gt;.
            User-supplied connections are outside the breadth of this discussion.  The different
            release modes are identified by the enumerated values of
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.ConnectionReleaseMode&lt;/code&gt;:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;ON_CLOSE&lt;/code&gt;: is the legacy behavior described above. The
                    Hibernate session obtains a connection when it first needs to perform some JDBC access
                    and maintains that connection until the session is closed.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;AFTER_TRANSACTION&lt;/code&gt;: releases connections after a
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.Transaction&lt;/code&gt; has been completed.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;AFTER_STATEMENT&lt;/code&gt; (also referred to as aggressive release):
                    releases connections after every statement execution. This aggressive releasing
                    is skipped if that statement leaves open resources associated with the given session.
                    Currently the only situation where this occurs is through the use of
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.ScrollableResults&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            The configuration parameter &lt;code class=&quot;literal&quot;&gt;hibernate.connection.release_mode&lt;/code&gt; is used
            to specify which release mode to use.  The possible values are as follows:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;auto&lt;/code&gt; (the default): this choice delegates to the release mode
                    returned by the &lt;code class=&quot;literal&quot;&gt;org.hibernate.transaction.TransactionFactory.getDefaultReleaseMode()&lt;/code&gt;
                    method.  For JTATransactionFactory, this returns ConnectionReleaseMode.AFTER_STATEMENT; for
                    JDBCTransactionFactory, this returns ConnectionReleaseMode.AFTER_TRANSACTION.  Do not
                    change this default behavior as failures due to the value of this setting
                    tend to indicate bugs and/or invalid assumptions in user code.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;on_close&lt;/code&gt;: uses ConnectionReleaseMode.ON_CLOSE.  This setting
                    is left for backwards compatibility, but its use is discouraged.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;after_transaction&lt;/code&gt;: uses ConnectionReleaseMode.AFTER_TRANSACTION.
                    This setting should not be used in JTA environments.  Also note that with
                    ConnectionReleaseMode.AFTER_TRANSACTION, if a session is considered to be in auto-commit
                    mode, connections will be released as if the release mode were AFTER_STATEMENT.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;after_statement&lt;/code&gt;: uses ConnectionReleaseMode.AFTER_STATEMENT.  Additionally,
                    the configured &lt;code class=&quot;literal&quot;&gt;ConnectionProvider&lt;/code&gt; is consulted to see if it supports this
                    setting (&lt;code class=&quot;literal&quot;&gt;supportsAggressiveRelease()&lt;/code&gt;).  If not, the release mode is reset
                    to ConnectionReleaseMode.AFTER_TRANSACTION.  This setting is only safe in environments where
                    we can either re-acquire the same underlying JDBC connection each time you make a call into
                    &lt;code class=&quot;literal&quot;&gt;ConnectionProvider.getConnection()&lt;/code&gt; or in auto-commit environments where
                    it does not matter if we re-establish the same connection.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 14. Interceptors and events&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;events&quot;/&gt;Chapter 14. Interceptors and events&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-interceptors&quot;&gt;14.1. Interceptors&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-events&quot;&gt;14.2. Event system&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-decl-security&quot;&gt;14.3. Hibernate declarative security&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        It is useful for the application to react to certain events that occur
        inside Hibernate. This allows for the implementation of generic 
        functionality and the extension of Hibernate functionality.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;14.1. Interceptors&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-interceptors&quot;/&gt;14.1. Interceptors&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;Interceptor&lt;/code&gt; interface provides callbacks from the session to the 
            application, allowing the application to inspect and/or manipulate properties of a
            persistent object before it is saved, updated, deleted or loaded. One 
            possible use for this is to track auditing information. For example, the following 
            &lt;code class=&quot;literal&quot;&gt;Interceptor&lt;/code&gt; automatically sets the  &lt;code class=&quot;literal&quot;&gt;createTimestamp&lt;/code&gt; 
            when an &lt;code class=&quot;literal&quot;&gt;Auditable&lt;/code&gt; is created and updates the 
            &lt;code class=&quot;literal&quot;&gt;lastUpdateTimestamp&lt;/code&gt; property when an &lt;code class=&quot;literal&quot;&gt;Auditable&lt;/code&gt; is 
            updated.
        &lt;/p&gt;

        &lt;p&gt;
            You can either implement &lt;code class=&quot;literal&quot;&gt;Interceptor&lt;/code&gt; directly or extend
            &lt;code class=&quot;literal&quot;&gt;EmptyInterceptor&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package org.hibernate.test;

import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;

import org.hibernate.EmptyInterceptor;
import org.hibernate.Transaction;
import org.hibernate.type.Type;

public class AuditInterceptor extends EmptyInterceptor {

    private int updates;
    private int creates;
    private int loads;

    public void onDelete(Object entity,
                         Serializable id,
                         Object[] state,
                         String[] propertyNames,
                         Type[] types) {
        // do nothing
    }

    public boolean onFlushDirty(Object entity,
                                Serializable id,
                                Object[] currentState,
                                Object[] previousState,
                                String[] propertyNames,
                                Type[] types) {

        if ( entity instanceof Auditable ) {
            updates++;
            for ( int i=0; i &amp;lt; propertyNames.length; i++ ) {
                if ( &quot;lastUpdateTimestamp&quot;.equals( propertyNames[i] ) ) {
                    currentState[i] = new Date();
                    return true;
                }
            }
        }
        return false;
    }

    public boolean onLoad(Object entity,
                          Serializable id,
                          Object[] state,
                          String[] propertyNames,
                          Type[] types) {
        if ( entity instanceof Auditable ) {
            loads++;
        }
        return false;
    }

    public boolean onSave(Object entity,
                          Serializable id,
                          Object[] state,
                          String[] propertyNames,
                          Type[] types) {

        if ( entity instanceof Auditable ) {
            creates++;
            for ( int i=0; i&amp;lt;propertyNames.length; i++ ) {
                if ( &quot;createTimestamp&quot;.equals( propertyNames[i] ) ) {
                    state[i] = new Date();
                    return true;
                }
            }
        }
        return false;
    }

    public void afterTransactionCompletion(Transaction tx) {
        if ( tx.wasCommitted() ) {
            System.out.println(&quot;Creations: &quot; + creates + &quot;, Updates: &quot; + updates + &quot;Loads: &quot; + loads);
        }
        updates=0;
        creates=0;
        loads=0;
    }

}&lt;/pre&gt;

        &lt;p&gt;
            There are two kinds of inteceptors: &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;-scoped and
            &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;-scoped.
        &lt;/p&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;-scoped interceptor is specified
            when a session is opened.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sf.withOptions( new AuditInterceptor() ).openSession();&lt;/pre&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;-scoped interceptor is registered with the &lt;code class=&quot;literal&quot;&gt;Configuration&lt;/code&gt;
            object prior to building the &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;.  Unless
            a session is opened explicitly specifying the interceptor to use, the supplied interceptor
            will be applied to all sessions opened from that &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;.  &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;-scoped
            interceptors must be thread safe. Ensure that you do not store session-specific states, since multiple
            sessions will use this interceptor potentially concurrently.
        &lt;/p&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;new Configuration().setInterceptor( new AuditInterceptor() );&lt;/pre&gt;

    &lt;/div&gt;

     &lt;div class=&quot;section&quot; title=&quot;14.2. Event system&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-events&quot;/&gt;14.2. Event system&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            If you have to react to particular events in your persistence layer, you can
            also use the Hibernate &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;event&lt;/em&gt;&lt;/span&gt; architecture. The event
            system can be used in addition, or as a replacement, for interceptors.
        &lt;/p&gt;

        &lt;p&gt;
            Many methods of the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; interface correlate to an event type.  The
            full range of defined event types is declared as enum values on
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.event.spi.EventType&lt;/code&gt;. When a request is made of one of
            these methods, the Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; generates an appropriate
            event and passes it to the configured event listeners for that type. Out-of-the-box,
            these listeners implement the same processing in which those methods always resulted.
            However, you are free to implement a customization of one of the listener interfaces
            (i.e., the &lt;code class=&quot;literal&quot;&gt;LoadEvent&lt;/code&gt; is processed by the registered implementation
            of the &lt;code class=&quot;literal&quot;&gt;LoadEventListener&lt;/code&gt; interface), in which case their
            implementation would be responsible for processing any &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; requests
            made of the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.
        &lt;/p&gt;

         &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
             &lt;p&gt;
                 See the &lt;em class=&quot;citetitle&quot;&gt;Hibernate Developer Guide&lt;/em&gt; for information on registering
                 custom event listeners.
             &lt;/p&gt;
         &lt;/div&gt;

        &lt;p&gt;
            The listeners should be considered stateless; they are shared between requests, and should not save any
            state as instance variables.
        &lt;/p&gt;

        &lt;p&gt;
            A custom listener implements the appropriate interface for the event it wants to
            process and/or extend one of the convenience base classes (or even the default event
            listeners used by Hibernate out-of-the-box as these are declared non-final for this
            purpose). Here is an example of a custom load event listener:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public class MyLoadListener implements LoadEventListener {
    // this is the single method defined by the LoadEventListener interface
    public void onLoad(LoadEvent event, LoadEventListener.LoadType loadType)
            throws HibernateException {
        if ( !MySecurity.isAuthorized( event.getEntityClassName(), event.getEntityId() ) ) {
            throw MySecurityException(&quot;Unauthorized access&quot;);
        }
    }
}&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;14.3. Hibernate declarative security&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-decl-security&quot;/&gt;14.3. Hibernate declarative security&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Usually, declarative security in Hibernate applications is managed in a session facade
            layer. Hibernate allows certain actions to be permissioned via JACC, and authorized
            via JAAS. This is an optional functionality that is built on top of the event architecture.
        &lt;/p&gt;
        
        &lt;p&gt;
            First, you must configure the appropriate event listeners, to enable the use of JACC
            authorization.  Again, see &lt;em class=&quot;citetitle&quot;&gt;Hibernate Developer Guide&lt;/em&gt;
            for the details.  Below is an example of an appropriate
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.integrator.spi.Integrator&lt;/code&gt; implementation for this purpose.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;import org.hibernate.event.service.spi.DuplicationStrategy;
import org.hibernate.event.service.spi.EventListenerRegistry;
import org.hibernate.integrator.spi.Integrator;
import org.hibernate.secure.internal.JACCPreDeleteEventListener;
import org.hibernate.secure.internal.JACCPreInsertEventListener;
import org.hibernate.secure.internal.JACCPreLoadEventListener;
import org.hibernate.secure.internal.JACCPreUpdateEventListener;
import org.hibernate.secure.internal.JACCSecurityListener;

public class JaccEventListenerIntegrator implements Integrator {

	private static final DuplicationStrategy JACC_DUPLICATION_STRATEGY = new DuplicationStrategy() {
		@Override
		public boolean areMatch(Object listener, Object original) {
			return listener.getClass().equals( original.getClass() ) &amp;amp;&amp;amp;
					JACCSecurityListener.class.isInstance( original );
		}

		@Override
		public Action getAction() {
			return Action.KEEP_ORIGINAL;
		}
	};

	@Override
	@SuppressWarnings( {&quot;unchecked&quot;})
	public void integrate(
			Configuration configuration,
			SessionFactoryImplementor sessionFactory,
			SessionFactoryServiceRegistry serviceRegistry) {
		boolean isSecurityEnabled = configuration.getProperties().containsKey( AvailableSettings.JACC_ENABLED );
		if ( !isSecurityEnabled ) {
			return;
		}

		final EventListenerRegistry eventListenerRegistry = serviceRegistry.getService( EventListenerRegistry.class );
		eventListenerRegistry.addDuplicationStrategy( JACC_DUPLICATION_STRATEGY );

		final String jaccContextId = configuration.getProperty( Environment.JACC_CONTEXTID );
		eventListenerRegistry.prependListeners( EventType.PRE_DELETE, new JACCPreDeleteEventListener(jaccContextId) );
		eventListenerRegistry.prependListeners( EventType.PRE_INSERT, new JACCPreInsertEventListener(jaccContextId) );
		eventListenerRegistry.prependListeners( EventType.PRE_UPDATE, new JACCPreUpdateEventListener(jaccContextId) );
		eventListenerRegistry.prependListeners( EventType.PRE_LOAD, new JACCPreLoadEventListener(jaccContextId) );
	}
}&lt;/pre&gt;

        &lt;p&gt;
            You must also decide how to configure your JACC provider.  One option is to tell Hibernate what permissions
            to bind to what roles and have it configure the JACC provider.  This would be done in the
            &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt; file.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;grant role=&quot;admin&quot; entity-name=&quot;User&quot; actions=&quot;insert,update,read&quot;/&amp;gt;
&amp;lt;grant role=&quot;su&quot; entity-name=&quot;User&quot; actions=&quot;*&quot;/&amp;gt;&lt;/pre&gt;
        
       
    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 15. Batch processing&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;batch&quot;/&gt;Chapter 15. Batch processing&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-inserts&quot;&gt;15.1. Batch inserts&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-update&quot;&gt;15.2. Batch updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-statelesssession&quot;&gt;15.3. The StatelessSession interface&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#batch-direct&quot;&gt;15.4. DML-style operations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    
    
    &lt;p&gt;
        A naive approach to inserting 100,000 rows in the database using Hibernate might 
        look like this:
    &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
for ( int i=0; i&amp;lt;100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
}
tx.commit();
session.close();&lt;/pre&gt;

    &lt;p&gt;
        This would fall over with an &lt;code class=&quot;literal&quot;&gt;OutOfMemoryException&lt;/code&gt; somewhere 
        around the 50,000th row. That is because Hibernate caches all the newly inserted 
        &lt;code class=&quot;literal&quot;&gt;Customer&lt;/code&gt; instances in the session-level cache. In this chapter 
	we will show you how to avoid this problem.
    &lt;/p&gt;

    &lt;p&gt;
        
        If you are undertaking batch processing you will need to enable the use of
        JDBC batching.  This is absolutely essential if you want to achieve optimal performance.
	Set the JDBC batch size to a reasonable number (10-50, for example):
    &lt;/p&gt;
    
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.jdbc.batch_size 20&lt;/pre&gt;

    &lt;p&gt;&lt;a id=&quot;disablebatching&quot;/&gt;
        Hibernate disables insert batching at the JDBC level transparently if you
        use an &lt;code class=&quot;literal&quot;&gt;identity&lt;/code&gt; identifier generator.
    &lt;/p&gt;

    &lt;p&gt;
        You can also do this kind of work in a process where interaction with 
        the second-level cache is completely disabled:
    &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.cache.use_second_level_cache false&lt;/pre&gt;

    &lt;p&gt;
        However, this is not absolutely necessary, since we can explicitly set the
        &lt;code class=&quot;literal&quot;&gt;CacheMode&lt;/code&gt; to disable interaction with the second-level cache.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;15.1. Batch inserts&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;batch-inserts&quot;/&gt;15.1. Batch inserts&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            When making new objects persistent &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; and 
            then &lt;code class=&quot;literal&quot;&gt;clear()&lt;/code&gt; the session regularly in order to control the size of
            the first-level cache.
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
for ( int i=0; i&amp;lt;100000; i++ ) {
    Customer customer = new Customer(.....);
    session.save(customer);
    if ( i % 20 == 0 ) { //20, same as the JDBC batch size
        //flush a batch of inserts and release memory:
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;15.2. Batch updates&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;batch-update&quot;/&gt;15.2. Batch updates&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            For retrieving and updating data, the same ideas apply. In addition, you need to 
            use &lt;code class=&quot;literal&quot;&gt;scroll()&lt;/code&gt; to take advantage of server-side cursors for 
            queries that return many rows of data.
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery(&quot;GetCustomers&quot;)
    .setCacheMode(CacheMode.IGNORE)
    .scroll(ScrollMode.FORWARD_ONLY);
int count=0;
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    if ( ++count % 20 == 0 ) {
        //flush a batch of updates and release memory:
        session.flush();
        session.clear();
    }
}
   
tx.commit();
session.close();&lt;/pre&gt;

    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;15.3. The StatelessSession interface&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;batch-statelesssession&quot;/&gt;15.3. The StatelessSession interface&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Alternatively, Hibernate provides a command-oriented API that can be used for 
            streaming data to and from the database in the form of detached objects. A 
            &lt;code class=&quot;literal&quot;&gt;StatelessSession&lt;/code&gt; has no persistence context associated
            with it and does not provide many of the higher-level life cycle semantics.
            In particular, a stateless session does not implement a first-level cache nor
            interact with any second-level or query cache. It does not implement 
            transactional write-behind or automatic dirty checking. Operations performed
            using a stateless session never cascade to associated instances. Collections 
            are ignored by a stateless session. Operations performed via a stateless session 
            bypass Hibernate&apos;s event model and interceptors. Due to the lack of a first-level cache, 
	    Stateless sessions are vulnerable to data aliasing effects. A stateless
            session is a lower-level abstraction that is much closer to the underlying JDBC.
        &lt;/p&gt;
        
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;StatelessSession session = sessionFactory.openStatelessSession();
Transaction tx = session.beginTransaction();
   
ScrollableResults customers = session.getNamedQuery(&quot;GetCustomers&quot;)
    .scroll(ScrollMode.FORWARD_ONLY);
while ( customers.next() ) {
    Customer customer = (Customer) customers.get(0);
    customer.updateStuff(...);
    session.update(customer);
}
   
tx.commit();
session.close();&lt;/pre&gt;

        &lt;p&gt;
            In this code example, the &lt;code class=&quot;literal&quot;&gt;Customer&lt;/code&gt; instances returned
            by the query are immediately detached. They are never associated with any persistence
            context.
        &lt;/p&gt;
        
        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;insert(), update()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; operations
            defined by the &lt;code class=&quot;literal&quot;&gt;StatelessSession&lt;/code&gt; interface are considered to be
            direct database row-level operations. They result in the immediate execution of a SQL
            &lt;code class=&quot;literal&quot;&gt;INSERT, UPDATE&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; respectively. 
            They have different semantics to the &lt;code class=&quot;literal&quot;&gt;save(), saveOrUpdate()&lt;/code&gt; 
            and &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; operations defined by the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; 
            interface.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;15.4. DML-style operations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;batch-direct&quot;/&gt;15.4. DML-style operations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            As already discussed, automatic and transparent object/relational mapping is concerned
            with the management of the object state. The object state is available in memory. This means that manipulating data directly in the database (using the SQL &lt;code class=&quot;literal&quot;&gt;Data Manipulation Language&lt;/code&gt;
            (DML) the statements: &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt;)
            will not affect in-memory state. However, Hibernate provides methods
            for bulk SQL-style DML statement execution that is performed through the
            Hibernate Query Language (&lt;a class=&quot;xref&quot; href=&quot;#queryhql&quot; title=&quot;Chapter 16. HQL: The Hibernate Query Language&quot;&gt;Chapter 16, &lt;em&gt;HQL: The Hibernate Query Language&lt;/em&gt;&lt;/a&gt;).
        &lt;/p&gt;

	    &lt;p&gt;
            The pseudo-syntax for &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; statements
            is: &lt;code class=&quot;literal&quot;&gt;( UPDATE | DELETE ) FROM? EntityName (WHERE where_conditions)?&lt;/code&gt;.  
	    &lt;/p&gt;

	&lt;p&gt;
	Some points to note:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    In the from-clause, the FROM keyword is optional
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    There can only be a single entity named in the from-clause. It can, however, be
                    aliased.  If the entity name is aliased, then any property references must
                    be qualified using that alias. If the entity name is not aliased, then it is
                    illegal for any property references to be qualified.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    No &lt;a class=&quot;xref&quot; href=&quot;#queryhql-joins-forms&quot; title=&quot;16.4. Forms of join syntax&quot;&gt;Section 16.4, âForms of join syntaxâ&lt;/a&gt;, either implicit or explicit,
	                can be specified in a bulk HQL query.  Sub-queries can be used in the where-clause, where
	                the subqueries themselves may contain joins.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    The where-clause is also optional.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            As an example, to execute an HQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt;, use the
            &lt;code class=&quot;literal&quot;&gt;Query.executeUpdate()&lt;/code&gt; method. The method is named for
            those familiar with JDBC&apos;s &lt;code class=&quot;literal&quot;&gt;PreparedStatement.executeUpdate()&lt;/code&gt;:
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlUpdate = &quot;update Customer c set c.name = :newName where c.name = :oldName&quot;;
// or String hqlUpdate = &quot;update Customer set name = :newName where name = :oldName&quot;;
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( &quot;newName&quot;, newName )
        .setString( &quot;oldName&quot;, oldName )
        .executeUpdate();
tx.commit();
session.close();&lt;/pre&gt;

        &lt;p&gt;
            In keeping with the EJB3 specification, HQL &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; statements, by default, do not effect the
            &lt;a class=&quot;xref&quot; href=&quot;#entity-mapping-entity-version&quot; title=&quot;5.1.3.1. Version number&quot;&gt;Section 5.1.3.1, âVersion numberâ&lt;/a&gt;
            or the &lt;a class=&quot;xref&quot; href=&quot;#mapping-declaration-timestamp&quot; title=&quot;5.1.3.2. Timestamp&quot;&gt;Section 5.1.3.2, âTimestampâ&lt;/a&gt; property values
            for the affected entities. However,
            you can force Hibernate to reset the &lt;code class=&quot;literal&quot;&gt;version&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;timestamp&lt;/code&gt; property values through the use of a &lt;code class=&quot;literal&quot;&gt;versioned update&lt;/code&gt;.
            This is achieved by adding the &lt;code class=&quot;literal&quot;&gt;VERSIONED&lt;/code&gt; keyword after the &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt;
            keyword.
        &lt;/p&gt;
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();
String hqlVersionedUpdate = &quot;update versioned Customer set name = :newName where name = :oldName&quot;;
int updatedEntities = s.createQuery( hqlUpdate )
        .setString( &quot;newName&quot;, newName )
        .setString( &quot;oldName&quot;, oldName )
        .executeUpdate();
tx.commit();
session.close();&lt;/pre&gt;

        &lt;p&gt;
            Custom version types, &lt;code class=&quot;literal&quot;&gt;org.hibernate.usertype.UserVersionType&lt;/code&gt;,
            are not allowed in conjunction with a &lt;code class=&quot;literal&quot;&gt;update versioned&lt;/code&gt; statement.
        &lt;/p&gt;

        &lt;p&gt;
            To execute an HQL &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt;, use the same &lt;code class=&quot;literal&quot;&gt;Query.executeUpdate()&lt;/code&gt;
            method:
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlDelete = &quot;delete Customer c where c.name = :oldName&quot;;
// or String hqlDelete = &quot;delete Customer where name = :oldName&quot;;
int deletedEntities = s.createQuery( hqlDelete )
        .setString( &quot;oldName&quot;, oldName )
        .executeUpdate();
tx.commit();
session.close();&lt;/pre&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;int&lt;/code&gt; value returned by the &lt;code class=&quot;literal&quot;&gt;Query.executeUpdate()&lt;/code&gt;
            method indicates the number of entities effected by the operation.  This may or may not
            correlate to the number of rows effected in the database.  An HQL bulk operation might result in
            multiple actual SQL statements being executed (for joined-subclass, for example).  The returned
            number indicates the number of actual entities affected by the statement.  Going back to the
            example of joined-subclass, a delete against one of the subclasses may actually result
            in deletes against not just the table to which that subclass is mapped, but also the &quot;root&quot;
            table and potentially joined-subclass tables further down the inheritance hierarchy.
        &lt;/p&gt;

        &lt;p&gt;
            The pseudo-syntax for &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statements is:
            &lt;code class=&quot;literal&quot;&gt;INSERT INTO EntityName properties_list select_statement&lt;/code&gt;.  Some
            points to note:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Only the INSERT INTO ... SELECT ... form is supported; not the INSERT INTO ... VALUES ... form.
                &lt;/p&gt;
                &lt;p&gt;
                    The properties_list is analogous to the &lt;code class=&quot;literal&quot;&gt;column specification&lt;/code&gt;
                    in the SQL &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statement.  For entities involved in mapped
                    inheritance, only properties directly defined on that given class-level can be
                    used in the properties_list.  Superclass properties are not allowed and subclass
                    properties do not make sense.  In other words, &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt;
                    statements are inherently non-polymorphic.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    select_statement can be any valid HQL select query, with the caveat that the return types
                    must match the types expected by the insert.  Currently, this is checked during query
                    compilation rather than allowing the check to relegate to the database. 
                    This might, however, cause problems between Hibernate &lt;code class=&quot;literal&quot;&gt;Type&lt;/code&gt;s which are
                    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;equivalent&lt;/em&gt;&lt;/span&gt; as opposed to &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;equal&lt;/em&gt;&lt;/span&gt;.  This might cause
                    issues with mismatches between a property defined as a &lt;code class=&quot;literal&quot;&gt;org.hibernate.type.DateType&lt;/code&gt;
                    and a property defined as a &lt;code class=&quot;literal&quot;&gt;org.hibernate.type.TimestampType&lt;/code&gt;, even though the
                    database might not make a distinction or might be able to handle the conversion.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    For the id property, the insert statement gives you two options.  You can either
                    explicitly specify the id property in the properties_list, in which case its value
                    is taken from the corresponding select expression, or omit it from the properties_list,
                    in which case a generated value is used.  This latter option is only available when
                    using id generators that operate in the database; attempting to use this option with
                    any &quot;in memory&quot; type generators will cause an exception during parsing.  
                    For the purposes of this discussion, in-database generators are considered to be
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.SequenceGenerator&lt;/code&gt; (and its subclasses) and
                    any implementers of &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.PostInsertIdentifierGenerator&lt;/code&gt;.
                    The most notable exception here is &lt;code class=&quot;literal&quot;&gt;org.hibernate.id.TableHiLoGenerator&lt;/code&gt;,
                    which cannot be used because it does not expose a selectable way to get its values.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    For properties mapped as either &lt;code class=&quot;literal&quot;&gt;version&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;timestamp&lt;/code&gt;,
                    the insert statement gives you two options.  You can either specify the property in the
                    properties_list, in which case its value is taken from the corresponding select expressions,
                    or omit it from the properties_list, in which case the &lt;code class=&quot;literal&quot;&gt;seed value&lt;/code&gt; defined
                    by the &lt;code class=&quot;literal&quot;&gt;org.hibernate.type.VersionType&lt;/code&gt; is used.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            The following is an example of an HQL &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statement execution:
        &lt;/p&gt;

&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = sessionFactory.openSession();
Transaction tx = session.beginTransaction();

String hqlInsert = &quot;insert into DelinquentAccount (id, name) select c.id, c.name from Customer c where ...&quot;;
int createdEntities = s.createQuery( hqlInsert )
        .executeUpdate();
tx.commit();
session.close();&lt;/pre&gt;

    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 16. HQL: The Hibernate Query Language&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql&quot;/&gt;Chapter 16. HQL: The Hibernate Query Language&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-casesensitivity&quot;&gt;16.1. Case Sensitivity&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-from&quot;&gt;16.2. The from clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-joins&quot;&gt;16.3. Associations and joins&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-joins-forms&quot;&gt;16.4. Forms of join syntax&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-identifier-property&quot;&gt;16.5. Referring to identifier property&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-select&quot;&gt;16.6. The select clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-aggregation&quot;&gt;16.7. Aggregate functions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-polymorphism&quot;&gt;16.8. Polymorphic queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-where&quot;&gt;16.9. The where clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-expressions&quot;&gt;16.10. Expressions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-ordering&quot;&gt;16.11. The order by clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-grouping&quot;&gt;16.12. The group by clause&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-subqueries&quot;&gt;16.13. Subqueries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-examples&quot;&gt;16.14. HQL examples&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-bulk&quot;&gt;16.15. Bulk update and delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-tipstricks&quot;&gt;16.16. Tips &amp;amp; Tricks&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-components&quot;&gt;16.17. Components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#queryhql-tuple&quot;&gt;16.18. Row value constructor syntax&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Hibernate uses a powerful query language (HQL) that is similar in appearance to
        SQL. Compared with SQL, however, HQL is fully object-oriented
        and understands notions like inheritance, polymorphism and association.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.1. Case Sensitivity&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-casesensitivity&quot;/&gt;16.1. Case Sensitivity&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            With the exception of names of Java classes and properties, queries are case-insensitive.
            So &lt;code class=&quot;literal&quot;&gt;SeLeCT&lt;/code&gt; is the same as
            &lt;code class=&quot;literal&quot;&gt;sELEct&lt;/code&gt; is the same as
            &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;, but
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.eg.FOO&lt;/code&gt; is not
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.eg.Foo&lt;/code&gt;, and
            &lt;code class=&quot;literal&quot;&gt;foo.barSet&lt;/code&gt; is not
            &lt;code class=&quot;literal&quot;&gt;foo.BARSET&lt;/code&gt;.
        &lt;/p&gt;

        &lt;p&gt;
            This manual uses lowercase HQL keywords. Some users find queries with uppercase keywords
            more readable, but this convention is unsuitable for queries embedded in Java code.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.2. The from clause&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-from&quot;/&gt;16.2. The from clause&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The simplest possible Hibernate query is of the form:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from eg.Cat&lt;/pre&gt;

        &lt;p&gt;
            This returns all instances of the class &lt;code class=&quot;literal&quot;&gt;eg.Cat&lt;/code&gt;.
            You do not usually need to qualify the class name, since &lt;code class=&quot;literal&quot;&gt;auto-import&lt;/code&gt;
            is the default. For example:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat&lt;/pre&gt;

        &lt;p&gt;
            
            In order to refer to the &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; in other parts of the
            query, you will need to assign an &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;alias&lt;/em&gt;&lt;/span&gt;. For example:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat&lt;/pre&gt;

        &lt;p&gt;
            This query assigns the alias &lt;code class=&quot;literal&quot;&gt;cat&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;
            instances, so you can use that alias later in the query. The &lt;code class=&quot;literal&quot;&gt;as&lt;/code&gt;
            keyword is optional. You could also write:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat&lt;/pre&gt;

        &lt;p&gt;
            Multiple classes can appear, resulting in a cartesian product or &quot;cross&quot; join.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Formula, Parameter&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Formula as form, Parameter as param&lt;/pre&gt;

        &lt;p&gt;
            It is good practice to name query aliases using an initial lowercase as this is
            consistent with Java naming standards for local variables
            (e.g. &lt;code class=&quot;literal&quot;&gt;domesticCat&lt;/code&gt;).
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.3. Associations and joins&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-joins&quot;/&gt;16.3. Associations and joins&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can also assign aliases to associated entities or to elements of a
            collection of values using a &lt;code class=&quot;literal&quot;&gt;join&lt;/code&gt;. For example:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
    inner join cat.mate as mate
    left outer join cat.kittens as kitten&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat left join cat.mate.kittens as kittens&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Formula form full join form.parameter param&lt;/pre&gt;

        &lt;p&gt;
            The supported join types are borrowed from ANSI SQL:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;inner join&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;left outer join&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;right outer join&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;full join&lt;/code&gt; (not usually useful)
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;inner join&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;left outer join&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;right outer join&lt;/code&gt; constructs may be abbreviated.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
    join cat.mate as mate
    left join cat.kittens as kitten&lt;/pre&gt;

        &lt;p&gt;
            You may supply extra join conditions using the HQL &lt;code class=&quot;literal&quot;&gt;with&lt;/code&gt;
            keyword.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
    left join cat.kittens as kitten
        with kitten.bodyWeight &amp;gt; 10.0&lt;/pre&gt;

        &lt;p&gt;
            A &quot;fetch&quot; join allows associations or collections of values to be
            initialized along with their parent objects using a single select. This is particularly
            useful in the case of a collection. It effectively overrides the outer join and
            lazy declarations of the mapping file for associations and collections. See
            &lt;a class=&quot;xref&quot; href=&quot;#performance-fetching&quot; title=&quot;20.1. Fetching strategies&quot;&gt;Section 20.1, âFetching strategiesâ&lt;/a&gt; for more information.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
    inner join fetch cat.mate
    left join fetch cat.kittens&lt;/pre&gt;

        &lt;p&gt;
            A fetch join does not usually need to assign an alias, because the associated objects
            should not be used in the &lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; clause (or any other clause). 
            The associated objects are also not returned directly in the query results. Instead, they may
            be accessed via the parent object. The only reason you might need an alias is if you are
            recursively join fetching a further collection:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
    inner join fetch cat.mate
    left join fetch cat.kittens child
    left join fetch child.kittens&lt;/pre&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; construct cannot be used in queries called using
            &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt; (though &lt;code class=&quot;literal&quot;&gt;scroll()&lt;/code&gt; can be used). 
            &lt;code class=&quot;literal&quot;&gt;Fetch&lt;/code&gt; should not be used together with &lt;code class=&quot;literal&quot;&gt;setMaxResults()&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;setFirstResult()&lt;/code&gt;, as these operations are based on the result rows which
            usually contain duplicates for eager collection fetching, hence, the number of rows is not what
            you would expect.
            &lt;code class=&quot;literal&quot;&gt;Fetch&lt;/code&gt; should also not be used together with impromptu &lt;code class=&quot;literal&quot;&gt;with&lt;/code&gt; condition.
            It is possible to create a cartesian product by join fetching more than one collection in a
            query, so take care in this case. Join fetching multiple collection roles can produce
            unexpected results for bag mappings, so user discretion is advised when formulating queries in this
            case. Finally, note that &lt;code class=&quot;literal&quot;&gt;full join fetch&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;right join fetch&lt;/code&gt;
            are not meaningful.
        &lt;/p&gt;

        &lt;p&gt;
            If you are using property-level lazy fetching (with bytecode instrumentation), it is
            possible to force Hibernate to fetch the lazy properties in the first query immediately
            using &lt;code class=&quot;literal&quot;&gt;fetch all properties&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Document fetch all properties order by name&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Document doc fetch all properties where lower(doc.name) like &apos;%cats%&apos;&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.4. Forms of join syntax&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-joins-forms&quot;/&gt;16.4. Forms of join syntax&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

	    &lt;p&gt;
		    HQL supports two forms of association joining: &lt;code class=&quot;literal&quot;&gt;implicit&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;explicit&lt;/code&gt;.
		&lt;/p&gt;

	    &lt;p&gt;
		    The queries shown in the previous section all use the &lt;code class=&quot;literal&quot;&gt;explicit&lt;/code&gt; form, that is, where
		    the join keyword is explicitly used in the from clause.  This is the recommended form.
	    &lt;/p&gt;

	    &lt;p&gt;
		    The &lt;code class=&quot;literal&quot;&gt;implicit&lt;/code&gt; form does not use the join keyword.  Instead, the
		    associations are &quot;dereferenced&quot; using dot-notation.  &lt;code class=&quot;literal&quot;&gt;implicit&lt;/code&gt; joins
		    can appear in any of the HQL clauses.  &lt;code class=&quot;literal&quot;&gt;implicit&lt;/code&gt; join result
		    in inner joins in the resulting SQL statement.
	    &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat where cat.mate.name like &apos;%s%&apos;&lt;/pre&gt;
	&lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.5. Referring to identifier property&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-identifier-property&quot;/&gt;16.5. Referring to identifier property&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            There are 2 ways to refer to an entity&apos;s identifier property:
        &lt;/p&gt;
        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    The special property (lowercase) &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; may be used to reference the identifier
                    property of an entity &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;provided that the entity does not define a non-identifier property
                    named id&lt;/em&gt;&lt;/span&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    If the entity defines a named identifier property, you can use that property name.
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            References to composite identifier properties follow the same naming rules. If the
            entity has a non-identifier property named id, the composite identifier property can only
            be referenced by its defined named. Otherwise, the special &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; property
            can be used to reference the identifier property.
        &lt;/p&gt;

	&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;
            Please note that, starting in version 3.2.2, this has changed significantly. In previous versions,
            &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt;  &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;always&lt;/em&gt;&lt;/span&gt; referred to the identifier property
            regardless of its actual name.  A ramification of that decision was that non-identifier
            properties named &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; could never be referenced in Hibernate queries.
        &lt;/p&gt;
	&lt;/div&gt;  

  &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.6. The select clause&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-select&quot;/&gt;16.6. The select clause&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt; clause picks which objects and properties to return in
            the query result set. Consider the following:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select mate
from Cat as cat
    inner join cat.mate as mate&lt;/pre&gt;

        &lt;p&gt;
            The query will select &lt;code class=&quot;literal&quot;&gt;mate&lt;/code&gt;s of other &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;s.
            You can express this query more compactly as:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.mate from Cat cat&lt;/pre&gt;

        &lt;p&gt;
            Queries can return properties of any value type including properties of component type:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.name from DomesticCat cat
where cat.name like &apos;fri%&apos;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cust.name.firstName from Customer as cust&lt;/pre&gt;

        &lt;p&gt;
            Queries can return multiple objects and/or properties as an array of type
            &lt;code class=&quot;literal&quot;&gt;Object[]&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select mother, offspr, mate.name
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr&lt;/pre&gt;

        &lt;p&gt;
            Or as a &lt;code class=&quot;literal&quot;&gt;List&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select new list(mother, offspr, mate.name)
from DomesticCat as mother
    inner join mother.mate as mate
    left outer join mother.kittens as offspr&lt;/pre&gt;

        &lt;p&gt;
            Or - assuming that the class &lt;code class=&quot;literal&quot;&gt;Family&lt;/code&gt; has an appropriate constructor - as an actual typesafe Java object:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select new Family(mother, mate, offspr)
from DomesticCat as mother
    join mother.mate as mate
    left join mother.kittens as offspr&lt;/pre&gt;

      
        &lt;p&gt;
            You can assign aliases to selected expressions using &lt;code class=&quot;literal&quot;&gt;as&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n
from Cat cat&lt;/pre&gt;

        &lt;p&gt;
            This is most useful when used together with &lt;code class=&quot;literal&quot;&gt;select new map&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select new map( max(bodyWeight) as max, min(bodyWeight) as min, count(*) as n )
from Cat cat&lt;/pre&gt;

        &lt;p&gt;
            This query returns a &lt;code class=&quot;literal&quot;&gt;Map&lt;/code&gt; from aliases to selected values.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.7. Aggregate functions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-aggregation&quot;/&gt;16.7. Aggregate functions&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            HQL queries can even return the results of aggregate functions on properties:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select avg(cat.weight), sum(cat.weight), max(cat.weight), count(cat)
from Cat cat&lt;/pre&gt;



        &lt;p&gt;
            The supported aggregate functions are:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;avg(...), sum(...), min(...), max(...)&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;count(*)&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;count(...), count(distinct ...), count(all...)&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            You can use arithmetic operators, concatenation, and recognized SQL functions
            in the select clause:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.weight + sum(kitten.weight)
from Cat cat
    join cat.kittens kitten
group by cat.id, cat.weight&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select firstName||&apos; &apos;||initial||&apos; &apos;||upper(lastName) from Person&lt;/pre&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;distinct&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt; keywords can be used and
            have the same semantics as in SQL.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select distinct cat.name from Cat cat

select count(distinct cat.name), count(cat) from Cat cat&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.8. Polymorphic queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-polymorphism&quot;/&gt;16.8. Polymorphic queries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A query like:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat&lt;/pre&gt;

        &lt;p&gt;
            returns instances not only of &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;, but also of subclasses like
            &lt;code class=&quot;literal&quot;&gt;DomesticCat&lt;/code&gt;. Hibernate queries can name &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;any&lt;/em&gt;&lt;/span&gt; Java
            class or interface in the &lt;code class=&quot;literal&quot;&gt;from&lt;/code&gt; clause. The query will return instances
            of all persistent classes that extend that class or implement the interface. The following
            query would return all persistent objects:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from java.lang.Object o&lt;/pre&gt;

        &lt;p&gt;
            The interface &lt;code class=&quot;literal&quot;&gt;Named&lt;/code&gt; might be implemented by various persistent
            classes:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Named n, Named m where n.name = m.name&lt;/pre&gt;

        &lt;p&gt;
            These last two queries will require more than one SQL &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;. This
            means that the &lt;code class=&quot;literal&quot;&gt;order by&lt;/code&gt; clause does not correctly order the whole result set.
            It also means you cannot call these queries using &lt;code class=&quot;literal&quot;&gt;Query.scroll()&lt;/code&gt;.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.9. The where clause&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-where&quot;/&gt;16.9. The where clause&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; clause allows you to refine the list of instances returned.
            If no alias exists, you can refer to properties by name:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat where name=&apos;Fritz&apos;&lt;/pre&gt;

        &lt;p&gt;
        	If there is an alias, use a qualified property name:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat where cat.name=&apos;Fritz&apos;&lt;/pre&gt;

        &lt;p&gt;
            This returns instances of &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; named &apos;Fritz&apos;.
        &lt;/p&gt;

		&lt;p&gt;
			The following query:
        &lt;/p&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select foo
from Foo foo, Bar bar
where foo.startDate = bar.date&lt;/pre&gt;

        &lt;p&gt;
            returns all instances of &lt;code class=&quot;literal&quot;&gt;Foo&lt;/code&gt; with an
            instance of &lt;code class=&quot;literal&quot;&gt;bar&lt;/code&gt; with a
            &lt;code class=&quot;literal&quot;&gt;date&lt;/code&gt; property equal to the
            &lt;code class=&quot;literal&quot;&gt;startDate&lt;/code&gt; property of the
            &lt;code class=&quot;literal&quot;&gt;Foo&lt;/code&gt;. Compound path expressions make the
            &lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; clause extremely powerful. Consider the following:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where cat.mate.name is not null&lt;/pre&gt;

        &lt;p&gt;
            This query translates to an SQL query with a table (inner) join. For example:
            
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Foo foo
where foo.bar.baz.customer.address.city is not null&lt;/pre&gt;

        &lt;p&gt;
            would result in a query that would require four table joins in SQL.
        &lt;/p&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;=&lt;/code&gt; operator can be used to compare not only properties, but also
            instances:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat, Cat rival where cat.mate = rival.mate&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat, mate
from Cat cat, Cat mate
where cat.mate = mate&lt;/pre&gt;

        &lt;p&gt;
            The special property (lowercase) &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; can be used to reference the
            unique identifier of an object. See &lt;a class=&quot;xref&quot; href=&quot;#queryhql-identifier-property&quot; title=&quot;16.5. Referring to identifier property&quot;&gt;Section 16.5, âReferring to identifier propertyâ&lt;/a&gt;
            for more information.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat where cat.id = 123

from Cat as cat where cat.mate.id = 69&lt;/pre&gt;

        &lt;p&gt;
            The second query is efficient and does not require a table join.
        &lt;/p&gt;

        &lt;p&gt;
            Properties of composite identifiers can also be used. Consider the following example where &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;
            has composite identifiers consisting of &lt;code class=&quot;literal&quot;&gt;country&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;medicareNumber&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from bank.Person person
where person.id.country = &apos;AU&apos;
    and person.id.medicareNumber = 123456&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from bank.Account account
where account.owner.id.country = &apos;AU&apos;
    and account.owner.id.medicareNumber = 123456&lt;/pre&gt;

        &lt;p&gt;
            Once again, the second query does not require a table join.
        &lt;/p&gt;
	
	&lt;p&gt;
	See &lt;a class=&quot;xref&quot; href=&quot;#queryhql-identifier-property&quot; title=&quot;16.5. Referring to identifier property&quot;&gt;Section 16.5, âReferring to identifier propertyâ&lt;/a&gt;
            for more information regarding referencing identifier properties)
	&lt;/p&gt;
        
	&lt;p&gt;
            The special property &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; accesses the discriminator value
            of an instance in the case of polymorphic persistence. A Java class name embedded in the
            where clause will be translated to its discriminator value.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where cat.class = DomesticCat&lt;/pre&gt;

        &lt;p&gt;
            You can also use components or composite user types, or properties of said
            component types. See &lt;a class=&quot;xref&quot; href=&quot;#queryhql-components&quot; title=&quot;16.17. Components&quot;&gt;Section 16.17, âComponentsâ&lt;/a&gt; for more information.
        &lt;/p&gt;

        &lt;p&gt;
            An &quot;any&quot; type has the special properties &lt;code class=&quot;literal&quot;&gt;id&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;class&lt;/code&gt; that allows you
            to express a join in the following way (where &lt;code class=&quot;literal&quot;&gt;AuditLog.item&lt;/code&gt;
            is a property mapped with &lt;code class=&quot;literal&quot;&gt;&amp;lt;any&amp;gt;&lt;/code&gt;):
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from AuditLog log, Payment payment
where log.item.class = &apos;Payment&apos; and log.item.id = payment.id&lt;/pre&gt;

        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;log.item.class&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;payment.class&lt;/code&gt;
            would refer to the values of completely different database columns in the above query.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.10. Expressions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-expressions&quot;/&gt;16.10. Expressions&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Expressions used in the &lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; clause include the following:
            
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    mathematical operators: &lt;code class=&quot;literal&quot;&gt;+, -, *, /&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    binary comparison operators: &lt;code class=&quot;literal&quot;&gt;=, &amp;gt;=, &amp;lt;=, &amp;lt;&amp;gt;, !=, like&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    logical operations &lt;code class=&quot;literal&quot;&gt;and, or, not&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Parentheses &lt;code class=&quot;literal&quot;&gt;( )&lt;/code&gt; that indicates grouping
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;in&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;not in&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;between&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;is null&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;is not null&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;is empty&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;is not empty&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;member of&lt;/code&gt; and
                    &lt;code class=&quot;literal&quot;&gt;not member of&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                	&quot;Simple&quot; case, &lt;code class=&quot;literal&quot;&gt;case ... when ... then ... else ... end&lt;/code&gt;, and
                    &quot;searched&quot; case, &lt;code class=&quot;literal&quot;&gt;case when ... then ... else ... end&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    string concatenation &lt;code class=&quot;literal&quot;&gt;...||...&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;concat(...,...)&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;current_date()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;current_time()&lt;/code&gt;, and
                    &lt;code class=&quot;literal&quot;&gt;current_timestamp()&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
					&lt;code class=&quot;literal&quot;&gt;second(...)&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;minute(...)&lt;/code&gt;,
					&lt;code class=&quot;literal&quot;&gt;hour(...)&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;day(...)&lt;/code&gt;,
					&lt;code class=&quot;literal&quot;&gt;month(...)&lt;/code&gt;, and &lt;code class=&quot;literal&quot;&gt;year(...)&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Any function or operator defined by EJB-QL 3.0: &lt;code class=&quot;literal&quot;&gt;substring(), trim(),
                    lower(), upper(), length(), locate(), abs(), sqrt(), bit_length(), mod()&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;coalesce()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;nullif()&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;str()&lt;/code&gt; for converting numeric or temporal values to a
                    readable string
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    &lt;code class=&quot;literal&quot;&gt;cast(... as ...)&lt;/code&gt;, where the second argument is the name of
                    a Hibernate type, and &lt;code class=&quot;literal&quot;&gt;extract(... from ...)&lt;/code&gt; if ANSI
                    &lt;code class=&quot;literal&quot;&gt;cast()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;extract()&lt;/code&gt; is supported by
                    the underlying database
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    the HQL &lt;code class=&quot;literal&quot;&gt;index()&lt;/code&gt; function, that applies to aliases of
                    a joined indexed collection
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    HQL functions that take collection-valued path expressions: &lt;code class=&quot;literal&quot;&gt;size(),
                    minelement(), maxelement(), minindex(), maxindex()&lt;/code&gt;, along with the
                    special &lt;code class=&quot;literal&quot;&gt;elements()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;indices&lt;/code&gt; functions
                    that can be quantified using &lt;code class=&quot;literal&quot;&gt;some, all, exists, any, in&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Any database-supported SQL scalar function like &lt;code class=&quot;literal&quot;&gt;sign()&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;trunc()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;rtrim()&lt;/code&gt;, and &lt;code class=&quot;literal&quot;&gt;sin()&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    JDBC-style positional parameters &lt;code class=&quot;literal&quot;&gt;?&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    named parameters &lt;code class=&quot;literal&quot;&gt;:name&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;:start_date&lt;/code&gt;, and &lt;code class=&quot;literal&quot;&gt;:x1&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    SQL literals &lt;code class=&quot;literal&quot;&gt;&apos;foo&apos;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;69&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;6.66E+2&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;&apos;1970-01-01 10:00:01.0&apos;&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;
                    Java &lt;code class=&quot;literal&quot;&gt;public static final&lt;/code&gt; constants &lt;code class=&quot;literal&quot;&gt;eg.Color.TABBY&lt;/code&gt;
                &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            &lt;code class=&quot;literal&quot;&gt;in&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;between&lt;/code&gt; can be used as follows:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat where cat.name between &apos;A&apos; and &apos;B&apos;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat where cat.name in ( &apos;Foo&apos;, &apos;Bar&apos;, &apos;Baz&apos; )&lt;/pre&gt;

        &lt;p&gt;
            The negated forms can be written as follows:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat where cat.name not between &apos;A&apos; and &apos;B&apos;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat where cat.name not in ( &apos;Foo&apos;, &apos;Bar&apos;, &apos;Baz&apos; )&lt;/pre&gt;

        &lt;p&gt;
            Similarly, &lt;code class=&quot;literal&quot;&gt;is null&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;is not null&lt;/code&gt; can be used to test
            for null values.
        &lt;/p&gt;

        &lt;p&gt;
            Booleans can be easily used in expressions by declaring HQL query substitutions in Hibernate
            configuration:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;hibernate.query.substitutions&quot;&amp;gt;true 1, false 0&amp;lt;/property&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            This will replace the keywords &lt;code class=&quot;literal&quot;&gt;true&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; with the
            literals &lt;code class=&quot;literal&quot;&gt;1&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;0&lt;/code&gt; in the translated SQL from this HQL:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where cat.alive = true&lt;/pre&gt;

        &lt;p&gt;
            You can test the size of a collection with the special property &lt;code class=&quot;literal&quot;&gt;size&lt;/code&gt; or
            the special &lt;code class=&quot;literal&quot;&gt;size()&lt;/code&gt; function.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where cat.kittens.size &amp;gt; 0&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where size(cat.kittens) &amp;gt; 0&lt;/pre&gt;

        &lt;p&gt;
            For indexed collections, you can refer to the minimum and maximum indices using
            &lt;code class=&quot;literal&quot;&gt;minindex&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;maxindex&lt;/code&gt; functions. Similarly,
            you can refer to the minimum and maximum elements of a collection of basic type
            using the &lt;code class=&quot;literal&quot;&gt;minelement&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;maxelement&lt;/code&gt;
            functions. For example:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Calendar cal where maxelement(cal.holidays) &amp;gt; current_date&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Order order where maxindex(order.items) &amp;gt; 100&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Order order where minelement(order.items) &amp;gt; 10000&lt;/pre&gt;

        &lt;p&gt;
            The SQL functions &lt;code class=&quot;literal&quot;&gt;any, some, all, exists, in&lt;/code&gt; are supported when passed the element
            or index set of a collection (&lt;code class=&quot;literal&quot;&gt;elements&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;indices&lt;/code&gt; functions)
            or the result of a subquery (see below):
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select mother from Cat as mother, Cat as kit
where kit in elements(foo.kittens)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select p from NameList list, Person p
where p.name = some elements(list.names)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat cat where exists elements(cat.kittens)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Player p where 3 &amp;gt; all elements(p.scores)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Show show where &apos;fizard&apos; in indices(show.acts)&lt;/pre&gt;

        &lt;p&gt;
            Note that these constructs - &lt;code class=&quot;literal&quot;&gt;size&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;elements&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;indices&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;minindex&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;maxindex&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;minelement&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;maxelement&lt;/code&gt; - can only be used in
            the where clause in Hibernate.
        &lt;/p&gt;

        &lt;p&gt;
            Elements of indexed collections (arrays, lists, and maps) can be referred to by
            index in a where clause only:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Order order where order.items[0].id = 1234&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select person from Person person, Calendar calendar
where calendar.holidays[&apos;national day&apos;] = person.birthDay
    and person.nationality.calendar = calendar&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select item from Item item, Order order
where order.items[ order.deliveredItemIndices[0] ] = item and order.id = 11&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select item from Item item, Order order
where order.items[ maxindex(order.items) ] = item and order.id = 11&lt;/pre&gt;

        &lt;p&gt;
            The expression inside &lt;code class=&quot;literal&quot;&gt;[]&lt;/code&gt; can even be an arithmetic expression:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select item from Item item, Order order
where order.items[ size(order.items) - 1 ] = item&lt;/pre&gt;

        &lt;p&gt;
            HQL also provides the built-in &lt;code class=&quot;literal&quot;&gt;index()&lt;/code&gt; function for elements
            of a one-to-many association or collection of values.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select item, index(item) from Order order
    join order.items item
where index(item) &amp;lt; 5&lt;/pre&gt;

        &lt;p&gt;
            Scalar SQL functions supported by the underlying database can be used:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat where upper(cat.name) like &apos;FRI%&apos;&lt;/pre&gt;

        &lt;p&gt;
            Consider how much longer and less readable the
            following query would be in SQL:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cust
from Product prod,
    Store store
    inner join store.customers cust
where prod.name = &apos;widget&apos;
    and store.location.name in ( &apos;Melbourne&apos;, &apos;Sydney&apos; )
    and prod = all elements(cust.currentOrder.lineItems)&lt;/pre&gt;

        &lt;p&gt;
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hint:&lt;/em&gt;&lt;/span&gt; something like
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;SELECT cust.name, cust.address, cust.phone, cust.id, cust.current_order
FROM customers cust,
    stores store,
    locations loc,
    store_customers sc,
    product prod
WHERE prod.name = &apos;widget&apos;
    AND store.loc_id = loc.id
    AND loc.name IN ( &apos;Melbourne&apos;, &apos;Sydney&apos; )
    AND sc.store_id = store.id
    AND sc.cust_id = cust.id
    AND prod.id = ALL(
        SELECT item.prod_id
        FROM line_items item, orders o
        WHERE item.order_id = o.id
            AND cust.current_order = o.id
    )&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.11. The order by clause&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-ordering&quot;/&gt;16.11. The order by clause&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The list returned by a query can be ordered by any property of a returned class or components:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat cat
order by cat.name asc, cat.weight desc nulls first, cat.birthdate&lt;/pre&gt;

        &lt;p&gt;
            The optional &lt;code class=&quot;literal&quot;&gt;asc&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;desc&lt;/code&gt; indicate ascending or descending order
            respectively.
        &lt;/p&gt;

        &lt;p&gt;
            The optional &lt;code class=&quot;literal&quot;&gt;nulls first&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;nulls last&lt;/code&gt; indicate precedence of null
            values while sorting.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.12. The group by clause&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-grouping&quot;/&gt;16.12. The group by clause&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            A query that returns aggregate values can be grouped by any property of a returned class or components:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.color, sum(cat.weight), count(cat)
from Cat cat
group by cat.color&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select foo.id, avg(name), max(name)
from Foo foo join foo.names name
group by foo.id&lt;/pre&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;having&lt;/code&gt; clause is also allowed.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.color, sum(cat.weight), count(cat)
from Cat cat
group by cat.color
having cat.color in (eg.Color.TABBY, eg.Color.BLACK)&lt;/pre&gt;

        &lt;p&gt;
            SQL functions and aggregate functions are allowed in the &lt;code class=&quot;literal&quot;&gt;having&lt;/code&gt;
            and &lt;code class=&quot;literal&quot;&gt;order by&lt;/code&gt; clauses if they are supported by the underlying database
            (i.e., not in MySQL).
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat
from Cat cat
    join cat.kittens kitten
group by cat.id, cat.name, cat.other, cat.properties
having avg(kitten.weight) &amp;gt; 100
order by count(kitten) asc, sum(kitten.weight) desc&lt;/pre&gt;

        &lt;p&gt;
            Neither the &lt;code class=&quot;literal&quot;&gt;group by&lt;/code&gt; clause nor the
            &lt;code class=&quot;literal&quot;&gt;order by&lt;/code&gt; clause can contain arithmetic expressions.
            Hibernate also does not currently expand a grouped entity,
            so you cannot write &lt;code class=&quot;literal&quot;&gt;group by cat&lt;/code&gt; if all properties
            of &lt;code class=&quot;literal&quot;&gt;cat&lt;/code&gt; are non-aggregated. You have to list all
            non-aggregated properties explicitly.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.13. Subqueries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-subqueries&quot;/&gt;16.13. Subqueries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            For databases that support subselects, Hibernate supports subqueries within queries. A subquery must
            be surrounded by parentheses (often by an SQL aggregate function call). Even correlated subqueries
            (subqueries that refer to an alias in the outer query) are allowed.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as fatcat
where fatcat.weight &amp;gt; (
    select avg(cat.weight) from DomesticCat cat
)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat as cat
where cat.name = some (
    select name.nickName from Name as name
)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
where not exists (
    from Cat as mate where mate.mate = cat
)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from DomesticCat as cat
where cat.name not in (
    select name.nickName from Name as name
)&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select cat.id, (select max(kit.weight) from cat.kitten kit)
from Cat as cat&lt;/pre&gt;

        &lt;p&gt;
            Note that HQL subqueries can occur only in the select or where clauses.
        &lt;/p&gt;

        &lt;p&gt;
            Note that subqueries can also utilize &lt;code class=&quot;literal&quot;&gt;row value constructor&lt;/code&gt; syntax.  See
            &lt;a class=&quot;xref&quot; href=&quot;#queryhql-tuple&quot; title=&quot;16.18. Row value constructor syntax&quot;&gt;Section 16.18, âRow value constructor syntaxâ&lt;/a&gt; for more information.
        &lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.14. HQL examples&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-examples&quot;/&gt;16.14. HQL examples&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Hibernate queries can be quite powerful and complex. In fact, the power of the query language
            is one of Hibernate&apos;s main strengths. The following example queries are similar to queries
            that have been used on recent projects. Please note that most queries you will write will be much simpler than the following examples.
        &lt;/p&gt;

        &lt;p&gt;
            The following query returns the order id, number of items, the given minimum total value and the total value of the order for all
            unpaid orders for a particular customer. The results are ordered by
            total value. In determining the prices, it uses the current catalog. The resulting SQL query,
            against the &lt;code class=&quot;literal&quot;&gt;ORDER&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;ORDER_LINE&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;PRODUCT&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;CATALOG&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;PRICE&lt;/code&gt; tables has four inner joins and an
            (uncorrelated) subselect.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select order.id, sum(price.amount), count(item)
from Order as order
    join order.lineItems as item
    join item.product as product,
    Catalog as catalog
    join catalog.prices as price
where order.paid = false
    and order.customer = :customer
    and price.product = product
    and catalog.effectiveDate &amp;lt; sysdate
    and catalog.effectiveDate &amp;gt;= all (
        select cat.effectiveDate
        from Catalog as cat
        where cat.effectiveDate &amp;lt; sysdate
    )
group by order
having sum(price.amount) &amp;gt; :minAmount
order by sum(price.amount) desc&lt;/pre&gt;

        &lt;p&gt;
            What a monster! Actually, in real life, I&apos;m not very keen on subqueries, so my query was
            really more like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select order.id, sum(price.amount), count(item)
from Order as order
    join order.lineItems as item
    join item.product as product,
    Catalog as catalog
    join catalog.prices as price
where order.paid = false
    and order.customer = :customer
    and price.product = product
    and catalog = :currentCatalog
group by order
having sum(price.amount) &amp;gt; :minAmount
order by sum(price.amount) desc&lt;/pre&gt;

        &lt;p&gt;
            The next query counts the number of payments in each status, excluding all payments in the
            &lt;code class=&quot;literal&quot;&gt;AWAITING_APPROVAL&lt;/code&gt; status where the most recent status change was made by the
            current user. It translates to an SQL query with two inner joins and a correlated subselect
            against the &lt;code class=&quot;literal&quot;&gt;PAYMENT&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;PAYMENT_STATUS&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;PAYMENT_STATUS_CHANGE&lt;/code&gt; tables.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select count(payment), status.name
from Payment as payment
    join payment.currentStatus as status
    join payment.statusChanges as statusChange
where payment.status.name &amp;lt;&amp;gt; PaymentStatus.AWAITING_APPROVAL
    or (
        statusChange.timeStamp = (
            select max(change.timeStamp)
            from PaymentStatusChange change
            where change.payment = payment
        )
        and statusChange.user &amp;lt;&amp;gt; :currentUser
    )
group by status.name, status.sortOrder
order by status.sortOrder&lt;/pre&gt;

        &lt;p&gt;
            If the &lt;code class=&quot;literal&quot;&gt;statusChanges&lt;/code&gt; collection was mapped as a list, instead of a set,
            the query would have been much simpler to write.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select count(payment), status.name
from Payment as payment
    join payment.currentStatus as status
where payment.status.name &amp;lt;&amp;gt; PaymentStatus.AWAITING_APPROVAL
    or payment.statusChanges[ maxIndex(payment.statusChanges) ].user &amp;lt;&amp;gt; :currentUser
group by status.name, status.sortOrder
order by status.sortOrder&lt;/pre&gt;

        &lt;p&gt;
            The next query uses the MS SQL Server &lt;code class=&quot;literal&quot;&gt;isNull()&lt;/code&gt; function to return all
            the accounts and unpaid payments for the organization to which the current user belongs.
            It translates to an SQL query with three inner joins, an outer join and a subselect against
            the &lt;code class=&quot;literal&quot;&gt;ACCOUNT&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;PAYMENT&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;PAYMENT_STATUS&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;ACCOUNT_TYPE&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;ORGANIZATION&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;ORG_USER&lt;/code&gt; tables.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select account, payment
from Account as account
    left outer join account.payments as payment
where :currentUser in elements(account.holder.users)
    and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate&lt;/pre&gt;

        &lt;p&gt;
            For some databases, we would need to do away with the (correlated) subselect.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select account, payment
from Account as account
    join account.holder.users as user
    left outer join account.payments as payment
where :currentUser = user
    and PaymentStatus.UNPAID = isNull(payment.currentStatus.name, PaymentStatus.UNPAID)
order by account.type.sortOrder, account.accountNumber, payment.dueDate&lt;/pre&gt;

   &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.15. Bulk update and delete&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-bulk&quot;/&gt;16.15. Bulk update and delete&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            HQL now supports &lt;code class=&quot;literal&quot;&gt;update&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;delete&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;insert ... select ...&lt;/code&gt; statements.
            See &lt;a class=&quot;xref&quot; href=&quot;#batch-direct&quot; title=&quot;15.4. DML-style operations&quot;&gt;Section 15.4, âDML-style operationsâ&lt;/a&gt; for more information.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.16. Tips &amp;amp; Tricks&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-tipstricks&quot;/&gt;16.16. Tips &amp;amp; Tricks&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can count the number of query results without returning them:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;( (Integer) session.createQuery(&quot;select count(*) from ....&quot;).iterate().next() ).intValue()&lt;/pre&gt;

        &lt;p&gt;
            To order a result by the size of a collection, use the following query:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select usr.id, usr.name
from User as usr
    left join usr.messages as msg
group by usr.id, usr.name
order by count(msg)&lt;/pre&gt;

        &lt;p&gt;
            If your database supports subselects, you can place a condition upon selection
            size in the where clause of your query:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from User usr where size(usr.messages) &amp;gt;= 1&lt;/pre&gt;

        &lt;p&gt;
            If your database does not support subselects, use the following query:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select usr.id, usr.name
from User usr
    join usr.messages msg
group by usr.id, usr.name
having count(msg) &amp;gt;= 1&lt;/pre&gt;


        &lt;p&gt;
            As this solution cannot return a &lt;code class=&quot;literal&quot;&gt;User&lt;/code&gt; with zero messages
            because of the inner join, the following form is also useful:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select usr.id, usr.name
from User as usr
    left join usr.messages as msg
group by usr.id, usr.name
having count(msg) = 0&lt;/pre&gt;

        &lt;p&gt;
            Properties of a JavaBean can be bound to named query parameters:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query q = s.createQuery(&quot;from foo Foo as foo where foo.name=:name and foo.size=:size&quot;);
q.setProperties(fooBean); // fooBean has getName() and getSize()
List foos = q.list();&lt;/pre&gt;

        &lt;p&gt;
            Collections are pageable by using the &lt;code class=&quot;literal&quot;&gt;Query&lt;/code&gt; interface with a filter:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query q = s.createFilter( collection, &quot;&quot; ); // the trivial filter
q.setMaxResults(PAGE_SIZE);
q.setFirstResult(PAGE_SIZE * pageNumber);
List page = q.list();&lt;/pre&gt;

        &lt;p&gt;
            Collection elements can be ordered or grouped using a query filter:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Collection orderedCollection = s.filter( collection, &quot;order by this.amount&quot; );
Collection counts = s.filter( collection, &quot;select this.type, count(this) group by this.type&quot; );&lt;/pre&gt;

        &lt;p&gt;
            You can find the size of a collection without initializing it:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;( (Integer) session.createQuery(&quot;select count(*) from ....&quot;).iterate().next() ).intValue();&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.17. Components&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-components&quot;/&gt;16.17. Components&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Components can be used similarly to the simple value types that are used in HQL
            queries.  They can appear in the &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt; clause as follows:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select p.name from Person p&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select p.name.first from Person p&lt;/pre&gt;

        &lt;p&gt;
            where the Person&apos;s name property is a component.  Components can also be used
            in the &lt;code class=&quot;literal&quot;&gt;where&lt;/code&gt; clause:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p where p.name = :name&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p where p.name.first = :firstName&lt;/pre&gt;

        &lt;p&gt;
            Components can also be used in the &lt;code class=&quot;literal&quot;&gt;order by&lt;/code&gt; clause:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p order by p.name&lt;/pre&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p order by p.name.first&lt;/pre&gt;

        &lt;p&gt;
            Another common use of components is in &lt;a class=&quot;xref&quot; href=&quot;#queryhql-tuple&quot; title=&quot;16.18. Row value constructor syntax&quot;&gt;Section 16.18, âRow value constructor syntaxâ&lt;/a&gt;.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;16.18. Row value constructor syntax&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;queryhql-tuple&quot;/&gt;16.18. Row value constructor syntax&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            HQL supports the use of ANSI SQL &lt;code class=&quot;literal&quot;&gt;row value constructor&lt;/code&gt; syntax, sometimes
            referred to AS &lt;code class=&quot;literal&quot;&gt;tuple&lt;/code&gt; syntax, even though the underlying database may not support
            that notion.  Here, we are generally referring to multi-valued comparisons, typically associated
            with components.  Consider an entity Person which defines a name component:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p where p.name.first=&apos;John&apos; and p.name.last=&apos;Jingleheimer-Schmidt&apos;&lt;/pre&gt;

        &lt;p&gt;
            That is valid syntax although it is a little verbose.  You can make this more concise by using
            &lt;code class=&quot;literal&quot;&gt;row value constructor&lt;/code&gt; syntax:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Person p where p.name=(&apos;John&apos;, &apos;Jingleheimer-Schmidt&apos;)&lt;/pre&gt;

        &lt;p&gt;
            It can also be useful to specify this in the &lt;code class=&quot;literal&quot;&gt;select&lt;/code&gt; clause:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select p.name from Person p&lt;/pre&gt;

        &lt;p&gt;
            Using &lt;code class=&quot;literal&quot;&gt;row value constructor&lt;/code&gt; syntax can also be beneficial
            when using subqueries that need to compare against multiple values:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;from Cat as cat
where not ( cat.name, cat.color ) in (
    select cat.name, cat.color from DomesticCat cat
)&lt;/pre&gt;

        &lt;p&gt;
            One thing to consider when deciding if you want to use this syntax, is that the query will
            be dependent upon the ordering of the component sub-properties in the metadata.
        &lt;/p&gt;

    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 17. Criteria Queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria&quot;/&gt;Chapter 17. Criteria Queries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-creating&quot;&gt;17.1. Creating a &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; instance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-narrowing&quot;&gt;17.2. Narrowing the result set&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-ordering&quot;&gt;17.3. Ordering the results&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-associations&quot;&gt;17.4. Associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-dynamicfetching&quot;&gt;17.5. Dynamic association fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-components&quot;&gt;17.6. Components&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-collections&quot;&gt;17.7. Collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-examples&quot;&gt;17.8. Example queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-projection&quot;&gt;17.9. Projections, aggregation and grouping&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querycriteria-detachedqueries&quot;&gt;17.10. Detached queries and subqueries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#query-criteria-naturalid&quot;&gt;17.11. Queries by natural identifier&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Hibernate features an intuitive, extensible criteria query API.
    &lt;/p&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;17.1. Creating a Criteria instance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-creating&quot;/&gt;17.1. Creating a &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; instance&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The interface &lt;code class=&quot;literal&quot;&gt;org.hibernate.Criteria&lt;/code&gt; represents a query against
            a particular persistent class. The &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is a factory for
            &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; instances.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Criteria crit = sess.createCriteria(Cat.class);
crit.setMaxResults(50);
List cats = crit.list();&lt;/pre&gt;

    &lt;/div&gt;
     
    &lt;div class=&quot;section&quot; title=&quot;17.2. Narrowing the result set&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-narrowing&quot;/&gt;17.2. Narrowing the result set&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            An individual query criterion is an instance of the interface
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.criterion.Criterion&lt;/code&gt;. The class
            &lt;code class=&quot;literal&quot;&gt;org.hibernate.criterion.Restrictions&lt;/code&gt; defines
            factory methods for obtaining certain built-in
            &lt;code class=&quot;literal&quot;&gt;Criterion&lt;/code&gt; types.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like(&quot;name&quot;, &quot;Fritz%&quot;) )
    .add( Restrictions.between(&quot;weight&quot;, minWeight, maxWeight) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            Restrictions can be grouped logically.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like(&quot;name&quot;, &quot;Fritz%&quot;) )
    .add( Restrictions.or(
        Restrictions.eq( &quot;age&quot;, new Integer(0) ),
        Restrictions.isNull(&quot;age&quot;)
    ) )
    .list();&lt;/pre&gt;
    
       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.in( &quot;name&quot;, new String[] { &quot;Fritz&quot;, &quot;Izi&quot;, &quot;Pk&quot; } ) )
    .add( Restrictions.disjunction()
        .add( Restrictions.isNull(&quot;age&quot;) )
        .add( Restrictions.eq(&quot;age&quot;, new Integer(0) ) )
        .add( Restrictions.eq(&quot;age&quot;, new Integer(1) ) )
        .add( Restrictions.eq(&quot;age&quot;, new Integer(2) ) )
    ) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            There are a range of built-in criterion types (&lt;code class=&quot;literal&quot;&gt;Restrictions&lt;/code&gt;
            subclasses). One of the most useful allows you to specify SQL directly.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.sqlRestriction(&quot;lower({alias}.name) like lower(?)&quot;, &quot;Fritz%&quot;, Hibernate.STRING) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;{alias}&lt;/code&gt; placeholder will be replaced by the row alias
            of the queried entity.
        &lt;/p&gt;
        
        &lt;p&gt;
            You can also obtain a criterion from a 
            &lt;code class=&quot;literal&quot;&gt;Property&lt;/code&gt; instance. You can create a &lt;code class=&quot;literal&quot;&gt;Property&lt;/code&gt;
            by calling &lt;code class=&quot;literal&quot;&gt;Property.forName()&lt;/code&gt;:
        &lt;/p&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
Property age = Property.forName(&quot;age&quot;);
List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.disjunction()
        .add( age.isNull() )
        .add( age.eq( new Integer(0) ) )
        .add( age.eq( new Integer(1) ) )
        .add( age.eq( new Integer(2) ) )
    ) )
    .add( Property.forName(&quot;name&quot;).in( new String[] { &quot;Fritz&quot;, &quot;Izi&quot;, &quot;Pk&quot; } ) )
    .list();&lt;/pre&gt;
    
   &lt;/div&gt;
     
    &lt;div class=&quot;section&quot; title=&quot;17.3. Ordering the results&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-ordering&quot;/&gt;17.3. Ordering the results&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can order the results using &lt;code class=&quot;literal&quot;&gt;org.hibernate.criterion.Order&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like(&quot;name&quot;, &quot;F%&quot;)
    .addOrder( Order.asc(&quot;name&quot;) )
    .addOrder( Order.desc(&quot;age&quot;) )
    .setMaxResults(50)
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Property.forName(&quot;name&quot;).like(&quot;F%&quot;) )
    .addOrder( Property.forName(&quot;name&quot;).asc() )
    .addOrder( Property.forName(&quot;age&quot;).desc() )
    .setMaxResults(50)
    .list();&lt;/pre&gt;
    
    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;17.4. Associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-associations&quot;/&gt;17.4. Associations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            By navigating
            associations using &lt;code class=&quot;literal&quot;&gt;createCriteria()&lt;/code&gt; you can specify constraints upon related entities:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like(&quot;name&quot;, &quot;F%&quot;) )
    .createCriteria(&quot;kittens&quot;)
        .add( Restrictions.like(&quot;name&quot;, &quot;F%&quot;) )
    .list();&lt;/pre&gt;

        &lt;p&gt;
            The second &lt;code class=&quot;literal&quot;&gt;createCriteria()&lt;/code&gt; returns a new
            instance of &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; that refers to the elements of
            the &lt;code class=&quot;literal&quot;&gt;kittens&lt;/code&gt; collection.
        &lt;/p&gt;

        &lt;p&gt;
            There is also an alternate form that is useful in certain circumstances:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .createAlias(&quot;kittens&quot;, &quot;kt&quot;)
    .createAlias(&quot;mate&quot;, &quot;mt&quot;)
    .add( Restrictions.eqProperty(&quot;kt.name&quot;, &quot;mt.name&quot;) )
    .list();&lt;/pre&gt;

        &lt;p&gt;
            (&lt;code class=&quot;literal&quot;&gt;createAlias()&lt;/code&gt; does not create a new instance of
            &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt;.)
        &lt;/p&gt;

        &lt;p&gt;
            The kittens collections held by the &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; instances
            returned by the previous two queries are &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; pre-filtered
            by the criteria. If you want to retrieve just the kittens that match the
            criteria, you must use a &lt;code class=&quot;literal&quot;&gt;ResultTransformer&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .createCriteria(&quot;kittens&quot;, &quot;kt&quot;)
        .add( Restrictions.eq(&quot;name&quot;, &quot;F%&quot;) )
    .setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP)
    .list();
Iterator iter = cats.iterator();
while ( iter.hasNext() ) {
    Map map = (Map) iter.next();
    Cat cat = (Cat) map.get(Criteria.ROOT_ALIAS);
    Cat kitten = (Cat) map.get(&quot;kt&quot;);
}&lt;/pre&gt;

	&lt;p&gt;
		Additionally you may manipulate the result set using a left outer join:
	&lt;/p&gt;
	&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
		List cats = session.createCriteria( Cat.class )
                       .createAlias(&quot;mate&quot;, &quot;mt&quot;, Criteria.LEFT_JOIN, Restrictions.like(&quot;mt.name&quot;, &quot;good%&quot;) )
                       .addOrder(Order.asc(&quot;mt.age&quot;))
                       .list();
	
	&lt;/pre&gt;

	&lt;p&gt;
		This will return all of the &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;s with a mate whose name starts with &quot;good&quot;
		ordered by their mate&apos;s age, and all cats who do not have a mate.  
		 This is useful when there is a need to order or limit in the database
		 prior to returning complex/large result sets, and removes many instances where
		 multiple queries would have to be performed and the results unioned 
		 by java in memory.  
	&lt;/p&gt;
	&lt;p&gt;
		Without this feature, first all of the cats without a mate would need to be loaded in one query. 
	&lt;/p&gt;
	&lt;p&gt;
		A second query would need to retreive the cats with mates who&apos;s name started with &quot;good&quot; sorted by the mates age.
	&lt;/p&gt;
	&lt;p&gt;
		Thirdly, in memory; the lists would need to be joined manually.
	&lt;/p&gt;
    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;17.5. Dynamic association fetching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-dynamicfetching&quot;/&gt;17.5. Dynamic association fetching&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            You can specify association fetching semantics at runtime using
            &lt;code class=&quot;literal&quot;&gt;setFetchMode()&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createCriteria(Cat.class)
    .add( Restrictions.like(&quot;name&quot;, &quot;Fritz%&quot;) )
    .setFetchMode(&quot;mate&quot;, FetchMode.EAGER)
    .setFetchMode(&quot;kittens&quot;, FetchMode.EAGER)
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            This query will fetch both &lt;code class=&quot;literal&quot;&gt;mate&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;kittens&lt;/code&gt;
            by outer join. See &lt;a class=&quot;xref&quot; href=&quot;#performance-fetching&quot; title=&quot;20.1. Fetching strategies&quot;&gt;Section 20.1, âFetching strategiesâ&lt;/a&gt; for more information.
        &lt;/p&gt;
    
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;17.6. Components&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-components&quot;/&gt;17.6. Components&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
               To add a restriction against a property of an embedded component, the component property
               name should be prepended to the property name when creating the &lt;code class=&quot;literal&quot;&gt;Restriction&lt;/code&gt;.
               The criteria object should be created on the owning entity, and cannot be created on the component 
               itself.  For example, suppose the &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; has a component property &lt;code class=&quot;literal&quot;&gt;fullName&lt;/code&gt;
               with sub-properties &lt;code class=&quot;literal&quot;&gt;firstName&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;lastName&lt;/code&gt;:
	&lt;/p&gt;

	&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
		List cats = session.createCriteria(Cat.class)
			.add(Restrictions.eq(&quot;fullName.lastName&quot;, &quot;Cattington&quot;))
			.list();
	&lt;/pre&gt;
	
	&lt;p&gt;
		Note: this does not apply when querying collections of components, for that see below 
		&lt;a class=&quot;xref&quot; href=&quot;#querycriteria-collections&quot; title=&quot;17.7. Collections&quot;&gt;Section 17.7, âCollectionsâ&lt;/a&gt;
	&lt;/p&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;17.7. Collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-collections&quot;/&gt;17.7. Collections&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
	
	&lt;p&gt;
		When using criteria against collections, there are two distinct cases.  One is if
		the collection contains entities (eg. &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many/&amp;gt;&lt;/code&gt; 
		or &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-many/&amp;gt;&lt;/code&gt;) or components 
		(&lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-element/&amp;gt;&lt;/code&gt; ),
		and the second is if the collection contains scalar values 
		(&lt;code class=&quot;literal&quot;&gt;&amp;lt;element/&amp;gt;&lt;/code&gt;).
		In the first case, the syntax is as given above in the section 
		&lt;a class=&quot;xref&quot; href=&quot;#querycriteria-associations&quot; title=&quot;17.4. Associations&quot;&gt;Section 17.4, âAssociationsâ&lt;/a&gt; where we restrict the &lt;code class=&quot;literal&quot;&gt;kittens&lt;/code&gt;
		collection. Essentially we create a &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; object against the collection
		property and restrict the entity or component properties using that instance.
	&lt;/p&gt;
	&lt;p&gt;
		For queryng a collection of basic values, we still create the &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt;
		object against the collection, but to reference the value, we use the special property 
		&quot;elements&quot;.  For an indexed collection, we can also reference the index property using
		the special property &quot;indices&quot;.
	&lt;/p&gt;
	&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;
		List cats = session.createCriteria(Cat.class)
			.createCriteria(&quot;nickNames&quot;)
				.add(Restrictions.eq(&quot;elements&quot;, &quot;BadBoy&quot;))
			.list();
	&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;17.8. Example queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-examples&quot;/&gt;17.8. Example queries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The class &lt;code class=&quot;literal&quot;&gt;org.hibernate.criterion.Example&lt;/code&gt; allows
            you to construct a query criterion from a given instance.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = new Cat();
cat.setSex(&apos;F&apos;);
cat.setColor(Color.BLACK);
List results = session.createCriteria(Cat.class)
    .add( Example.create(cat) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
           Version properties, identifiers and associations are ignored. By default,
           null valued properties are excluded.
        &lt;/p&gt;

        &lt;p&gt;
           You can adjust how the &lt;code class=&quot;literal&quot;&gt;Example&lt;/code&gt; is applied.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Example example = Example.create(cat)
    .excludeZeroes()           //exclude zero valued properties
    .excludeProperty(&quot;color&quot;)  //exclude the property named &quot;color&quot;
    .ignoreCase()              //perform case insensitive string comparisons
    .enableLike();             //use like for string comparisons
List results = session.createCriteria(Cat.class)
    .add(example)
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            You can even use examples to place criteria upon associated objects.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .add( Example.create(cat) )
    .createCriteria(&quot;mate&quot;)
        .add( Example.create( cat.getMate() ) )
    .list();&lt;/pre&gt;
    
    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;17.9. Projections, aggregation and grouping&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-projection&quot;/&gt;17.9. Projections, aggregation and grouping&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            The class &lt;code class=&quot;literal&quot;&gt;org.hibernate.criterion.Projections&lt;/code&gt; is a
            factory for &lt;code class=&quot;literal&quot;&gt;Projection&lt;/code&gt; instances. You can apply a
            projection to a query by calling &lt;code class=&quot;literal&quot;&gt;setProjection()&lt;/code&gt;.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.rowCount() )
    .add( Restrictions.eq(&quot;color&quot;, Color.BLACK) )
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount() )
        .add( Projections.avg(&quot;weight&quot;) )
        .add( Projections.max(&quot;weight&quot;) )
        .add( Projections.groupProperty(&quot;color&quot;) )
    )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            There is no explicit &quot;group by&quot; necessary in a criteria query. Certain
            projection types are defined to be &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;grouping projections&lt;/em&gt;&lt;/span&gt;,
            which also appear in the SQL &lt;code class=&quot;literal&quot;&gt;group by&lt;/code&gt; clause.
        &lt;/p&gt;
    
        &lt;p&gt;
            An alias can be assigned to a projection so that the projected value
            can be referred to in restrictions or orderings. Here are two different ways to
            do this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.alias( Projections.groupProperty(&quot;color&quot;), &quot;colr&quot; ) )
    .addOrder( Order.asc(&quot;colr&quot;) )
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.groupProperty(&quot;color&quot;).as(&quot;colr&quot;) )
    .addOrder( Order.asc(&quot;colr&quot;) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;alias()&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;as()&lt;/code&gt; methods simply wrap a
            projection instance in another, aliased, instance of &lt;code class=&quot;literal&quot;&gt;Projection&lt;/code&gt;.
            As a shortcut, you can assign an alias when you add the projection to a 
            projection list:
        &lt;/p&gt;

       &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount(), &quot;catCountByColor&quot; )
        .add( Projections.avg(&quot;weight&quot;), &quot;avgWeight&quot; )
        .add( Projections.max(&quot;weight&quot;), &quot;maxWeight&quot; )
        .add( Projections.groupProperty(&quot;color&quot;), &quot;color&quot; )
    )
    .addOrder( Order.desc(&quot;catCountByColor&quot;) )
    .addOrder( Order.desc(&quot;avgWeight&quot;) )
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Domestic.class, &quot;cat&quot;)
    .createAlias(&quot;kittens&quot;, &quot;kit&quot;)
    .setProjection( Projections.projectionList()
        .add( Projections.property(&quot;cat.name&quot;), &quot;catName&quot; )
        .add( Projections.property(&quot;kit.name&quot;), &quot;kitName&quot; )
    )
    .addOrder( Order.asc(&quot;catName&quot;) )
    .addOrder( Order.asc(&quot;kitName&quot;) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            You can also use &lt;code class=&quot;literal&quot;&gt;Property.forName()&lt;/code&gt; to express projections:
        &lt;/p&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Property.forName(&quot;name&quot;) )
    .add( Property.forName(&quot;color&quot;).eq(Color.BLACK) )
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List results = session.createCriteria(Cat.class)
    .setProjection( Projections.projectionList()
        .add( Projections.rowCount().as(&quot;catCountByColor&quot;) )
        .add( Property.forName(&quot;weight&quot;).avg().as(&quot;avgWeight&quot;) )
        .add( Property.forName(&quot;weight&quot;).max().as(&quot;maxWeight&quot;) )
        .add( Property.forName(&quot;color&quot;).group().as(&quot;color&quot; )
    )
    .addOrder( Order.desc(&quot;catCountByColor&quot;) )
    .addOrder( Order.desc(&quot;avgWeight&quot;) )
    .list();&lt;/pre&gt;
    
    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;17.10. Detached queries and subqueries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querycriteria-detachedqueries&quot;/&gt;17.10. Detached queries and subqueries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        &lt;p&gt;
            The &lt;code class=&quot;literal&quot;&gt;DetachedCriteria&lt;/code&gt; class allows you to create a query outside the scope 
            of a session and then execute it using an arbitrary &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DetachedCriteria query = DetachedCriteria.forClass(Cat.class)
    .add( Property.forName(&quot;sex&quot;).eq(&apos;F&apos;) );
    
Session session = ....;
Transaction txn = session.beginTransaction();
List results = query.getExecutableCriteria(session).setMaxResults(100).list();
txn.commit();
session.close();&lt;/pre&gt;

        &lt;p&gt;
            A &lt;code class=&quot;literal&quot;&gt;DetachedCriteria&lt;/code&gt; can also be used to express a subquery. Criterion
            instances involving subqueries can be obtained via &lt;code class=&quot;literal&quot;&gt;Subqueries&lt;/code&gt; or
            &lt;code class=&quot;literal&quot;&gt;Property&lt;/code&gt;.            
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DetachedCriteria avgWeight = DetachedCriteria.forClass(Cat.class)
    .setProjection( Property.forName(&quot;weight&quot;).avg() );
session.createCriteria(Cat.class)
    .add( Property.forName(&quot;weight&quot;).gt(avgWeight) )
    .list();&lt;/pre&gt;
    
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DetachedCriteria weights = DetachedCriteria.forClass(Cat.class)
    .setProjection( Property.forName(&quot;weight&quot;) );
session.createCriteria(Cat.class)
    .add( Subqueries.geAll(&quot;weight&quot;, weights) )
    .list();&lt;/pre&gt;
    
        &lt;p&gt;
            Correlated subqueries are also possible:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DetachedCriteria avgWeightForSex = DetachedCriteria.forClass(Cat.class, &quot;cat2&quot;)
    .setProjection( Property.forName(&quot;weight&quot;).avg() )
    .add( Property.forName(&quot;cat2.sex&quot;).eqProperty(&quot;cat.sex&quot;) );
session.createCriteria(Cat.class, &quot;cat&quot;)
    .add( Property.forName(&quot;weight&quot;).gt(avgWeightForSex) )
    .list();&lt;/pre&gt;

        &lt;p&gt;
            Example of multi-column restriction based on a subquery:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;DetachedCriteria sizeQuery = DetachedCriteria.forClass( Man.class )
    .setProjection( Projections.projectionList().add( Projections.property( &quot;weight&quot; ) )
                                                .add( Projections.property( &quot;height&quot; ) ) )
    .add( Restrictions.eq( &quot;name&quot;, &quot;John&quot; ) );
session.createCriteria( Woman.class )
    .add( Subqueries.propertiesEq( new String[] { &quot;weight&quot;, &quot;height&quot; }, sizeQuery ) )
    .list();&lt;/pre&gt;

    &lt;/div&gt;

        
               
    &lt;div class=&quot;section&quot; title=&quot;17.11. Queries by natural identifier&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;query-criteria-naturalid&quot;/&gt;17.11. Queries by natural identifier&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            For most queries, including criteria queries, the query cache is not efficient
            because query cache invalidation occurs too frequently. However, there is a special
            kind of query where you can optimize the cache invalidation algorithm: lookups by a 
            constant natural key. In some applications, this kind of query occurs frequently.
            The criteria API provides special provision for this use case.
        &lt;/p&gt;
        
        &lt;p&gt;
            First, map the natural key of your entity using 
            &lt;code class=&quot;literal&quot;&gt;&amp;lt;natural-id&amp;gt;&lt;/code&gt; and enable use of the second-level cache.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;User&quot;&amp;gt;
    &amp;lt;cache usage=&quot;read-write&quot;/&amp;gt;
    &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;increment&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;natural-id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
        &amp;lt;property name=&quot;org&quot;/&amp;gt;
    &amp;lt;/natural-id&amp;gt;
    &amp;lt;property name=&quot;password&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
    
        &lt;p&gt;
            This functionality is not intended for use with entities with 
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/span&gt; natural keys.
        &lt;/p&gt;
        
        &lt;p&gt;
            Once you have enabled the Hibernate query cache, 
            the &lt;code class=&quot;literal&quot;&gt;Restrictions.naturalId()&lt;/code&gt; allows you to make use of
            the more efficient cache algorithm.
        &lt;/p&gt;
       
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;session.createCriteria(User.class)
    .add( Restrictions.naturalId()
        .set(&quot;name&quot;, &quot;gavin&quot;)
        .set(&quot;org&quot;, &quot;hb&quot;) 
    ).setCacheable(true)
    .uniqueResult();&lt;/pre&gt;
            
    &lt;/div&gt;
    
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 18. Native SQL&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql&quot;/&gt;Chapter 18. Native SQL&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-creating&quot;&gt;18.1. Using a &lt;code class=&quot;literal&quot;&gt;SQLQuery&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8301&quot;&gt;18.1.1. Scalar queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8325&quot;&gt;18.1.2. Entity queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8343&quot;&gt;18.1.3. Handling associations and collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8356&quot;&gt;18.1.4. Returning multiple entities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8448&quot;&gt;18.1.5. Returning non-managed entities&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8460&quot;&gt;18.1.6. Handling inheritance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e8463&quot;&gt;18.1.7. Parameters&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-namedqueries&quot;&gt;18.2. Named SQL queries&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#propertyresults&quot;&gt;18.2.1. Using return-property to explicitly specify column/alias
      names&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#sp_query&quot;&gt;18.2.2. Using stored procedures for querying&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-cud&quot;&gt;18.3. Custom SQL for create, update and delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#querysql-load&quot;&gt;18.4. Custom SQL for loading&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;p&gt;You can also express queries in the native SQL dialect of your
  database. This is useful if you want to utilize database-specific features
  such as query hints or the &lt;code class=&quot;literal&quot;&gt;CONNECT&lt;/code&gt; keyword in Oracle. It
  also provides a clean migration path from a direct SQL/JDBC based
  application to Hibernate.&lt;/p&gt;

  &lt;p&gt;Hibernate allows you to specify handwritten SQL, including stored
  procedures, for all create, update, delete, and load operations.&lt;/p&gt;

  &lt;div class=&quot;section&quot; title=&quot;18.1. Using a SQLQuery&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-creating&quot;/&gt;18.1. Using a &lt;code class=&quot;literal&quot;&gt;SQLQuery&lt;/code&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Execution of native SQL queries is controlled via the
    &lt;code class=&quot;literal&quot;&gt;SQLQuery&lt;/code&gt; interface, which is obtained by calling
    &lt;code class=&quot;literal&quot;&gt;Session.createSQLQuery()&lt;/code&gt;. The following sections
    describe how to use this API for querying.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.1. Scalar queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8301&quot;/&gt;18.1.1. Scalar queries&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The most basic SQL query is to get a list of scalars
      (values).&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT * FROM CATS&quot;).list();
sess.createSQLQuery(&quot;SELECT ID, NAME, BIRTHDATE FROM CATS&quot;).list();
&lt;/pre&gt;

      &lt;p&gt;These will return a List of Object arrays (Object[]) with scalar
      values for each column in the CATS table. Hibernate will use
      ResultSetMetadata to deduce the actual order and types of the returned
      scalar values.&lt;/p&gt;

      &lt;p&gt;To avoid the overhead of using
      &lt;code class=&quot;literal&quot;&gt;ResultSetMetadata&lt;/code&gt;, or simply to be more explicit in
      what is returned, one can use &lt;code class=&quot;literal&quot;&gt;addScalar()&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT * FROM CATS&quot;)
 .addScalar(&quot;ID&quot;, Hibernate.LONG)
 .addScalar(&quot;NAME&quot;, Hibernate.STRING)
 .addScalar(&quot;BIRTHDATE&quot;, Hibernate.DATE)
&lt;/pre&gt;

      &lt;p&gt;This query specified:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the SQL query string&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the columns and types to return&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;This will return Object arrays, but now it will not use
      &lt;code class=&quot;literal&quot;&gt;ResultSetMetadata&lt;/code&gt; but will instead explicitly get the
      ID, NAME and BIRTHDATE column as respectively a Long, String and a Short
      from the underlying resultset. This also means that only these three
      columns will be returned, even though the query is using
      &lt;code class=&quot;literal&quot;&gt;*&lt;/code&gt; and could return more than the three listed
      columns.&lt;/p&gt;

      &lt;p&gt;It is possible to leave out the type information for all or some
      of the scalars.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT * FROM CATS&quot;)
 .addScalar(&quot;ID&quot;, Hibernate.LONG)
 .addScalar(&quot;NAME&quot;)
 .addScalar(&quot;BIRTHDATE&quot;)
&lt;/pre&gt;

      &lt;p&gt;This is essentially the same query as before, but now
      &lt;code class=&quot;literal&quot;&gt;ResultSetMetaData&lt;/code&gt; is used to determine the type of
      NAME and BIRTHDATE, where as the type of ID is explicitly
      specified.&lt;/p&gt;

      &lt;p&gt;How the java.sql.Types returned from ResultSetMetaData is mapped
      to Hibernate types is controlled by the Dialect. If a specific type is
      not mapped, or does not result in the expected type, it is possible to
      customize it via calls to &lt;code class=&quot;literal&quot;&gt;registerHibernateType&lt;/code&gt; in
      the Dialect.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.2. Entity queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8325&quot;/&gt;18.1.2. Entity queries&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The above queries were all about returning scalar values,
      basically returning the &quot;raw&quot; values from the resultset. The following
      shows how to get entity objects from a native sql query via
      &lt;code class=&quot;literal&quot;&gt;addEntity()&lt;/code&gt;.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT * FROM CATS&quot;).addEntity(Cat.class);
sess.createSQLQuery(&quot;SELECT ID, NAME, BIRTHDATE FROM CATS&quot;).addEntity(Cat.class);
&lt;/pre&gt;

      &lt;p&gt;This query specified:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the SQL query string&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the entity returned by the query&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Assuming that Cat is mapped as a class with the columns ID, NAME
      and BIRTHDATE the above queries will both return a List where each
      element is a Cat entity.&lt;/p&gt;

      &lt;p&gt;If the entity is mapped with a &lt;code class=&quot;literal&quot;&gt;many-to-one&lt;/code&gt; to
      another entity it is required to also return this when performing the
      native query, otherwise a database specific &quot;column not found&quot; error
      will occur. The additional columns will automatically be returned when
      using the * notation, but we prefer to be explicit as in the following
      example for a &lt;code class=&quot;literal&quot;&gt;many-to-one&lt;/code&gt; to a
      &lt;code class=&quot;literal&quot;&gt;Dog&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT ID, NAME, BIRTHDATE, DOG_ID FROM CATS&quot;).addEntity(Cat.class);
&lt;/pre&gt;

      &lt;p&gt;This will allow cat.getDog() to function properly.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.3. Handling associations and collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8343&quot;/&gt;18.1.3. Handling associations and collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;It is possible to eagerly join in the &lt;code class=&quot;literal&quot;&gt;Dog&lt;/code&gt; to
      avoid the possible extra roundtrip for initializing the proxy. This is
      done via the &lt;code class=&quot;literal&quot;&gt;addJoin()&lt;/code&gt; method, which allows you to
      join in an association or collection.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT c.ID, NAME, BIRTHDATE, DOG_ID, D_ID, D_NAME FROM CATS c, DOGS d WHERE c.DOG_ID = d.D_ID&quot;)
 .addEntity(&quot;cat&quot;, Cat.class)
 .addJoin(&quot;cat.dog&quot;);
&lt;/pre&gt;

      &lt;p&gt;In this example, the returned &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;&apos;s will have
      their &lt;code class=&quot;literal&quot;&gt;dog&lt;/code&gt; property fully initialized without any
      extra roundtrip to the database. Notice that you added an alias name
      (&quot;cat&quot;) to be able to specify the target property path of the join. It
      is possible to do the same eager joining for collections, e.g. if the
      &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; had a one-to-many to &lt;code class=&quot;literal&quot;&gt;Dog&lt;/code&gt;
      instead.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT ID, NAME, BIRTHDATE, D_ID, D_NAME, CAT_ID FROM CATS c, DOGS d WHERE c.ID = d.CAT_ID&quot;)
 .addEntity(&quot;cat&quot;, Cat.class)
 .addJoin(&quot;cat.dogs&quot;);
&lt;/pre&gt;

      &lt;p&gt;At this stage you are reaching the limits of what is possible with
      native queries, without starting to enhance the sql queries to make them
      usable in Hibernate. Problems can arise when returning multiple entities
      of the same type or when the default alias/column names are not
      enough.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.4. Returning multiple entities&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8356&quot;/&gt;18.1.4. Returning multiple entities&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Until now, the result set column names are assumed to be the same
      as the column names specified in the mapping document. This can be
      problematic for SQL queries that join multiple tables, since the same
      column names can appear in more than one table.&lt;/p&gt;

      &lt;p&gt;Column alias injection is needed in the following query (which
      most likely will fail):&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT c.*, m.*  FROM CATS c, CATS m WHERE c.MOTHER_ID = c.ID&quot;)
 .addEntity(&quot;cat&quot;, Cat.class)
 .addEntity(&quot;mother&quot;, Cat.class)
&lt;/pre&gt;

      &lt;p&gt;The query was intended to return two Cat instances per row: a cat
      and its mother. The query will, however, fail because there is a
      conflict of names; the instances are mapped to the same column names.
      Also, on some databases the returned column aliases will most likely be
      on the form &quot;c.ID&quot;, &quot;c.NAME&quot;, etc. which are not equal to the columns
      specified in the mappings (&quot;ID&quot; and &quot;NAME&quot;).&lt;/p&gt;

      &lt;p&gt;The following form is not vulnerable to column name
      duplication:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT {cat.*}, {m.*}  FROM CATS c, CATS m WHERE c.MOTHER_ID = m.ID&quot;)
 .addEntity(&quot;cat&quot;, Cat.class)
 .addEntity(&quot;mother&quot;, Cat.class)
&lt;/pre&gt;

      &lt;p&gt;This query specified:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the SQL query string, with placeholders for Hibernate to
          inject column aliases&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the entities returned by the query&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;The {cat.*} and {mother.*} notation used above is a shorthand for
      &quot;all properties&quot;. Alternatively, you can list the columns explicitly,
      but even in this case Hibernate injects the SQL column aliases for each
      property. The placeholder for a column alias is just the property name
      qualified by the table alias. In the following example, you retrieve
      Cats and their mothers from a different table (cat_log) to the one
      declared in the mapping metadata. You can even use the property aliases
      in the where clause.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;String sql = &quot;SELECT ID as {c.id}, NAME as {c.name}, &quot; +
         &quot;BIRTHDATE as {c.birthDate}, MOTHER_ID as {c.mother}, {mother.*} &quot; +
         &quot;FROM CAT_LOG c, CAT_LOG m WHERE {c.mother} = c.ID&quot;;

List loggedCats = sess.createSQLQuery(sql)
        .addEntity(&quot;cat&quot;, Cat.class)
        .addEntity(&quot;mother&quot;, Cat.class).list()
&lt;/pre&gt;

      &lt;div class=&quot;section&quot; title=&quot;18.1.4.1. Alias and property references&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-aliasreferences&quot;/&gt;18.1.4.1. Alias and property references&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;In most cases the above alias injection is needed. For queries
        relating to more complex mappings, like composite properties,
        inheritance discriminators, collections etc., you can use specific
        aliases that allow Hibernate to inject the proper aliases.&lt;/p&gt;

        &lt;p&gt;The following table shows the different ways you can use the
        alias injection. Please note that the alias names in the result are
        simply examples; each alias will have a unique and probably different
        name when used.&lt;/p&gt;

        &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;aliasinjection-summary&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 18.1. Alias injection names&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
          

          &lt;table summary=&quot;Alias injection names&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;2.5*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;Syntax&lt;/th&gt;&lt;th&gt;Example&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;A simple property&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].[propertyname]}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;A_NAME as {item.name}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;A composite property&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].[componentname].[propertyname]}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;CURRENCY as {item.amount.currency}, VALUE as
                {item.amount.value}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Discriminator of an entity&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].class}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;DISC as {item.class}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;All properties of an entity&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].*}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{item.*}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;A collection key&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].key}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;ORGID as {coll.key}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;The id of an collection&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].id}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;EMPID as {coll.id}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;The element of an collection&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].element}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;XID as {coll.element}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;property of the element in the collection&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].element.[propertyname]}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;NAME as {coll.element.name}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;All properties of the element in the collection&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].element.*}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{coll.element.*}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;All properties of the collection&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{[aliasname].*}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;{coll.*}&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
        &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.5. Returning non-managed entities&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8448&quot;/&gt;18.1.5. Returning non-managed entities&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;It is possible to apply a ResultTransformer to native SQL queries,
      allowing it to return non-managed entities.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sess.createSQLQuery(&quot;SELECT NAME, BIRTHDATE FROM CATS&quot;)
        .setResultTransformer(Transformers.aliasToBean(CatDTO.class))&lt;/pre&gt;

      &lt;p&gt;This query specified:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;the SQL query string&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;a result transformer&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;The above query will return a list of &lt;code class=&quot;literal&quot;&gt;CatDTO&lt;/code&gt;
      which has been instantiated and injected the values of NAME and
      BIRTHNAME into its corresponding properties or fields.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.6. Handling inheritance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8460&quot;/&gt;18.1.6. Handling inheritance&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Native SQL queries which query for entities that are mapped as
      part of an inheritance must include all properties for the baseclass and
      all its subclasses.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.1.7. Parameters&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e8463&quot;/&gt;18.1.7. Parameters&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Native SQL queries support positional as well as named
      parameters:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Query query = sess.createSQLQuery(&quot;SELECT * FROM CATS WHERE NAME like ?&quot;).addEntity(Cat.class);
List pusList = query.setString(0, &quot;Pus%&quot;).list();
     
query = sess.createSQLQuery(&quot;SELECT * FROM CATS WHERE NAME like :name&quot;).addEntity(Cat.class);
List pusList = query.setString(&quot;name&quot;, &quot;Pus%&quot;).list();          &lt;/pre&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;18.2. Named SQL queries&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-namedqueries&quot;/&gt;18.2. Named SQL queries&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Named SQL queries can also be defined in the mapping document and
    called in exactly the same way as a named HQL query (see &lt;a class=&quot;xref&quot; href=&quot;#objectstate-querying-executing-named&quot; title=&quot;11.4.1.7. Externalizing named queries&quot;&gt;Section 11.4.1.7, âExternalizing named queriesâ&lt;/a&gt;). In this case, you do
    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; need to call
    &lt;code class=&quot;literal&quot;&gt;addEntity()&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8473&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.1. Named sql query using the &amp;lt;sql-query&amp;gt; maping
      element&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;persons&quot;&amp;gt;
    &amp;lt;return alias=&quot;person&quot; class=&quot;eg.Person&quot;/&amp;gt;
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex}
    FROM PERSON person
    WHERE person.NAME LIKE :namePattern
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8476&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.2. Execution of a named query&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List people = sess.getNamedQuery(&quot;persons&quot;)
    .setString(&quot;namePattern&quot;, namePattern)
    .setMaxResults(50)
    .list();&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-join&amp;gt;&lt;/code&gt; element is use to join
    associations and the &lt;code class=&quot;literal&quot;&gt;&amp;lt;load-collection&amp;gt;&lt;/code&gt; element is
    used to define queries which initialize collections,&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8482&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.3. Named sql query with association&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;personsWith&quot;&amp;gt;
    &amp;lt;return alias=&quot;person&quot; class=&quot;eg.Person&quot;/&amp;gt;
    &amp;lt;return-join alias=&quot;address&quot; property=&quot;person.mailingAddress&quot;/&amp;gt;
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person
    JOIN ADDRESS address
        ON person.ID = address.PERSON_ID AND address.TYPE=&apos;MAILING&apos;
    WHERE person.NAME LIKE :namePattern
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;A named SQL query may return a scalar value. You must declare the
    column alias and Hibernate type using the
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-scalar&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8487&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.4. Named query returning a scalar&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;mySqlQuery&quot;&amp;gt;
    &amp;lt;return-scalar column=&quot;name&quot; type=&quot;string&quot;/&amp;gt;
    &amp;lt;return-scalar column=&quot;age&quot; type=&quot;long&quot;/&amp;gt;
    SELECT p.NAME AS name, 
           p.AGE AS age,
    FROM PERSON p WHERE p.NAME LIKE &apos;Hiber%&apos;
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;You can externalize the resultset mapping information in a
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;resultset&amp;gt;&lt;/code&gt; element which will allow you to
    either reuse them across several named queries or through the
    &lt;code class=&quot;literal&quot;&gt;setResultSetMapping()&lt;/code&gt; API.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8493&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.5. &amp;lt;resultset&amp;gt; mapping used to externalize mapping
      information&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;resultset name=&quot;personAddress&quot;&amp;gt;
    &amp;lt;return alias=&quot;person&quot; class=&quot;eg.Person&quot;/&amp;gt;
    &amp;lt;return-join alias=&quot;address&quot; property=&quot;person.mailingAddress&quot;/&amp;gt;
&amp;lt;/resultset&amp;gt;

&amp;lt;sql-query name=&quot;personsWith&quot; resultset-ref=&quot;personAddress&quot;&amp;gt;
    SELECT person.NAME AS {person.name},
           person.AGE AS {person.age},
           person.SEX AS {person.sex},
           address.STREET AS {address.street},
           address.CITY AS {address.city},
           address.STATE AS {address.state},
           address.ZIP AS {address.zip}
    FROM PERSON person
    JOIN ADDRESS address
        ON person.ID = address.PERSON_ID AND address.TYPE=&apos;MAILING&apos;
    WHERE person.NAME LIKE :namePattern
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;You can, alternatively, use the resultset mapping information in
    your hbm files directly in java code.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8497&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.6. Programmatically specifying the result mapping information
      &lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List cats = sess.createSQLQuery(
        &quot;select {cat.*}, {kitten.*} from cats cat, cats kitten where kitten.mother = cat.id&quot;
    )
    .setResultSetMapping(&quot;catAndKitten&quot;)
    .list();&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;So far we have only looked at externalizing SQL queries using
    Hibernate mapping files. The same concept is also available with
    anntations and is called named native queries. You can use
    &lt;code class=&quot;classname&quot;&gt;@NamedNativeQuery&lt;/code&gt;
    (&lt;code class=&quot;classname&quot;&gt;@NamedNativeQueries&lt;/code&gt;) in conjunction with
    &lt;code class=&quot;literal&quot;&gt;@SqlResultSetMapping&lt;/code&gt;
    (&lt;code class=&quot;literal&quot;&gt;@SqlResultSetMappings&lt;/code&gt;). Like
    &lt;code class=&quot;literal&quot;&gt;@NamedQuery&lt;/code&gt;, &lt;code class=&quot;classname&quot;&gt;@NamedNativeQuery&lt;/code&gt;
    and &lt;code class=&quot;literal&quot;&gt;@SqlResultSetMapping&lt;/code&gt; can be defined at class level,
    but their scope is global to the application. Lets look at a view
    examples.&lt;/p&gt;

    &lt;p&gt;&lt;a class=&quot;xref&quot; href=&quot;#example-named-native-query-annotation-with-result-set-mapping&quot; title=&quot;Example 18.7. Named SQL query using @NamedNativeQuery together with @SqlResultSetMapping&quot;&gt;Example 18.7, âNamed SQL query using &lt;code class=&quot;classname&quot;&gt;@NamedNativeQuery&lt;/code&gt;
      together with &lt;code class=&quot;classname&quot;&gt;@SqlResultSetMapping&lt;/code&gt;â&lt;/a&gt;
    shows how a &lt;code class=&quot;literal&quot;&gt;resultSetMapping&lt;/code&gt; parameter is defined in
    &lt;code class=&quot;literal&quot;&gt;@NamedNativeQuery&lt;/code&gt;. It represents the name of a defined
    &lt;code class=&quot;literal&quot;&gt;@SqlResultSetMapping&lt;/code&gt;. The resultset mapping declares
    the entities retrieved by this native query. Each field of the entity is
    bound to an SQL alias (or column name). All fields of the entity including
    the ones of subclasses and the foreign key columns of related entities
    have to be present in the SQL query. Field definitions are optional
    provided that they map to the same column name as the one declared on the
    class property. In the example 2 entities, &lt;code class=&quot;literal&quot;&gt;Night&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;Area&lt;/code&gt;, are returned and each property is declared and
    associated to a column name, actually the column name retrieved by the
    query. &lt;/p&gt;

    &lt;p&gt;In &lt;a class=&quot;xref&quot; href=&quot;#example-implicit-result-set-mapping&quot; title=&quot;Example 18.8. Implicit result set mapping&quot;&gt;Example 18.8, âImplicit result set mappingâ&lt;/a&gt; the result
    set mapping is implicit. We only describe the entity class of the result
    set mapping. The property / column mappings is done using the entity
    mapping values. In this case the model property is bound to the model_txt
    column. &lt;/p&gt;

    &lt;p&gt;Finally, if the association to a related entity involve a composite
    primary key, a &lt;code class=&quot;literal&quot;&gt;@FieldResult&lt;/code&gt; element should be used for
    each foreign key column. The &lt;code class=&quot;literal&quot;&gt;@FieldResult&lt;/code&gt; name is
    composed of the property name for the relationship, followed by a dot
    (&quot;.&quot;), followed by the name or the field or property of the primary key.
    This can be seen in &lt;a class=&quot;xref&quot; href=&quot;#example-field-result-annotation-with-associations&quot; title=&quot;Example 18.9. Using dot notation in @FieldResult for specifying associations&quot;&gt;Example 18.9, âUsing dot notation in @FieldResult for specifying associations
      â&lt;/a&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-named-native-query-annotation-with-result-set-mapping&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.7. Named SQL query using &lt;code class=&quot;classname&quot;&gt;@NamedNativeQuery&lt;/code&gt;
      together with &lt;code class=&quot;classname&quot;&gt;@SqlResultSetMapping&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;night&amp;amp;area&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;query&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;night.id&amp;nbsp;nid,&amp;nbsp;night.night_duration,&amp;nbsp;&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;&amp;nbsp;night.night_date,&amp;nbsp;area.id&amp;nbsp;aid,&amp;nbsp;night.area_id,&amp;nbsp;area.name&amp;nbsp;&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;from&amp;nbsp;Night&amp;nbsp;night,&amp;nbsp;Area&amp;nbsp;area&amp;nbsp;where&amp;nbsp;night.area_id&amp;nbsp;=&amp;nbsp;area.id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resultSetMapping&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;joinMapping&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SqlResultSetMapping&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;joinMapping&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;entities&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EntityResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entityClass&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Night&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fields&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;nid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;duration&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;night_duration&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;night_date&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;area&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;area_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;discriminatorColumn&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;disc&amp;quot;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EntityResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entityClass&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Area&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fields&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;aid&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-implicit-result-set-mapping&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.8. Implicit result set mapping&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SqlResultSetMapping&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;implicit&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;entities&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EntityResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entityClass&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;implicitSample&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;query&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;*&amp;nbsp;from&amp;nbsp;SpaceShip&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resultSetMapping&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;implicit&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Column&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;model_txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getModel&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setModel&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;model&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getSpeed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setSpeed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;speed&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-field-result-annotation-with-associations&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.9. Using dot notation in @FieldResult for specifying associations
      &lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SqlResultSetMapping&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;compositekey&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;entities&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;EntityResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;entityClass&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;fields&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;speed&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;speed&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;captain.firstname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstn&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;captain.lastname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastn&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;dimensions.length&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;length&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FieldResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;dimensions.width&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;column&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;columns&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ColumnResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;surface&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ColumnResult&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;volume&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;compositekey&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;query&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;name,&amp;nbsp;model,&amp;nbsp;speed,&amp;nbsp;lname&amp;nbsp;as&amp;nbsp;lastn,&amp;nbsp;fname&amp;nbsp;as&amp;nbsp;firstn,&amp;nbsp;length,&amp;nbsp;width,&amp;nbsp;length&amp;nbsp;*&amp;nbsp;width&amp;nbsp;as&amp;nbsp;surface&amp;nbsp;from&amp;nbsp;SpaceShip&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;resultSetMapping&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;compositekey&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Captain&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;captain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Dimensions&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;dimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setName&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ManyToOne&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;LAZY&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumns&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;fname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;firstname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;referencedColumnName&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;lastname&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Captain&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getCaptain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;captain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setCaptain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Captain&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;captain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;captain&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;captain&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getModel&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setModel&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;model&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;model&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getSpeed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setSpeed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;speed&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;speed&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Dimensions&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getDimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;dimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setDimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Dimensions&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;dimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;dimensions&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;dimensions&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;IdClass&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Identity&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Captain&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getFirstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setFirstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;firstname&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;firstname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getLastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;setLastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;lastname&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;lastname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
      &lt;p&gt;If you retrieve a single entity using the default mapping, you can
      specify the &lt;code class=&quot;literal&quot;&gt;resultClass&lt;/code&gt; attribute instead of
      &lt;code class=&quot;literal&quot;&gt;resultSetMapping&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;implicitSample&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;query&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;*&amp;nbsp;from&amp;nbsp;SpaceShip&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;resultClass&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SpaceShip&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;In some of your native queries, you&apos;ll have to return scalar values,
    for example when building report queries. You can map them in the
    &lt;code class=&quot;literal&quot;&gt;@SqlResultsetMapping&lt;/code&gt; through
    &lt;code class=&quot;literal&quot;&gt;@ColumnResult&lt;/code&gt;. You actually can even mix, entities and
    scalar returns in the same native query (this is probably not that common
    though).&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8540&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.10. Scalar values via &lt;code class=&quot;classname&quot;&gt;@ColumnResult&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;SqlResultSetMapping&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;scalar&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;columns&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;ColumnResult&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;dimension&amp;quot;&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;))&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;scalar&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;query&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;length*width&amp;nbsp;as&amp;nbsp;dimension&amp;nbsp;from&amp;nbsp;SpaceShip&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;resultSetMapping&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;scalar&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;An other query hint specific to native queries has been introduced:
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.callable&lt;/code&gt; which can be true or false
    depending on whether the query is a stored procedure or not.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.2.1. Using return-property to explicitly specify column/alias names&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;propertyresults&quot;/&gt;18.2.1. Using return-property to explicitly specify column/alias
      names&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;You can explicitly tell Hibernate what column aliases to use with
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-property&amp;gt;&lt;/code&gt;, instead of using the
      &lt;code class=&quot;literal&quot;&gt;{}&lt;/code&gt;-syntax to let Hibernate inject its own aliases.For
      example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;mySqlQuery&quot;&amp;gt;
    &amp;lt;return alias=&quot;person&quot; class=&quot;eg.Person&quot;&amp;gt;
        &amp;lt;return-property name=&quot;name&quot; column=&quot;myName&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;age&quot; column=&quot;myAge&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;sex&quot; column=&quot;mySex&quot;/&amp;gt;
    &amp;lt;/return&amp;gt;
    SELECT person.NAME AS myName,
           person.AGE AS myAge,
           person.SEX AS mySex,
    FROM PERSON person WHERE person.NAME LIKE :name
&amp;lt;/sql-query&amp;gt;
&lt;/pre&gt;

      &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;return-property&amp;gt;&lt;/code&gt; also works with
      multiple columns. This solves a limitation with the
      &lt;code class=&quot;literal&quot;&gt;{}&lt;/code&gt;-syntax which cannot allow fine grained control of
      multi-column properties.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;organizationCurrentEmployments&quot;&amp;gt;
    &amp;lt;return alias=&quot;emp&quot; class=&quot;Employment&quot;&amp;gt;
        &amp;lt;return-property name=&quot;salary&quot;&amp;gt;
            &amp;lt;return-column name=&quot;VALUE&quot;/&amp;gt;
            &amp;lt;return-column name=&quot;CURRENCY&quot;/&amp;gt;
        &amp;lt;/return-property&amp;gt;
        &amp;lt;return-property name=&quot;endDate&quot; column=&quot;myEndDate&quot;/&amp;gt;
    &amp;lt;/return&amp;gt;
        SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer},
        STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
        REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY
        FROM EMPLOYMENT
        WHERE EMPLOYER = :id AND ENDDATE IS NULL
        ORDER BY STARTDATE ASC
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;

      &lt;p&gt;In this example &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-property&amp;gt;&lt;/code&gt; was
      used in combination with the &lt;code class=&quot;literal&quot;&gt;{}&lt;/code&gt;-syntax for injection.
      This allows users to choose how they want to refer column and
      properties.&lt;/p&gt;

      &lt;p&gt;If your mapping has a discriminator you must use
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-discriminator&amp;gt;&lt;/code&gt; to specify the
      discriminator column.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;18.2.2. Using stored procedures for querying&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;sp_query&quot;/&gt;18.2.2. Using stored procedures for querying&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate provides support for queries via stored procedures and
      functions. Most of the following documentation is equivalent for both.
      The stored procedure/function must return a resultset as the first
      out-parameter to be able to work with Hibernate. An example of such a
      stored function in Oracle 9 and higher is as follows:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;CREATE OR REPLACE FUNCTION selectAllEmployments
    RETURN SYS_REFCURSOR
AS
    st_cursor SYS_REFCURSOR;
BEGIN
    OPEN st_cursor FOR
 SELECT EMPLOYEE, EMPLOYER,
 STARTDATE, ENDDATE,
 REGIONCODE, EID, VALUE, CURRENCY
 FROM EMPLOYMENT;
      RETURN  st_cursor;
 END;&lt;/pre&gt;

      &lt;p&gt;To use this query in Hibernate you need to map it via a named
      query.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;selectAllEmployees_SP&quot; callable=&quot;true&quot;&amp;gt;
    &amp;lt;return alias=&quot;emp&quot; class=&quot;Employment&quot;&amp;gt;
        &amp;lt;return-property name=&quot;employee&quot; column=&quot;EMPLOYEE&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;employer&quot; column=&quot;EMPLOYER&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;startDate&quot; column=&quot;STARTDATE&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;endDate&quot; column=&quot;ENDDATE&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;regionCode&quot; column=&quot;REGIONCODE&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;id&quot; column=&quot;EID&quot;/&amp;gt;
        &amp;lt;return-property name=&quot;salary&quot;&amp;gt;
            &amp;lt;return-column name=&quot;VALUE&quot;/&amp;gt;
            &amp;lt;return-column name=&quot;CURRENCY&quot;/&amp;gt;
        &amp;lt;/return-property&amp;gt;
    &amp;lt;/return&amp;gt;
    { ? = call selectAllEmployments() }
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;

      &lt;p&gt;Stored procedures currently only return scalars and entities.
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;return-join&amp;gt;&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;load-collection&amp;gt;&lt;/code&gt; are not supported.&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;18.2.2.1. Rules/limitations for using stored procedures&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h4 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-limits-storedprocedures&quot;/&gt;18.2.2.1. Rules/limitations for using stored procedures&lt;/h4&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;You cannot use stored procedures with Hibernate unless you
        follow some procedure/function rules. If they do not follow those
        rules they are not usable with Hibernate. If you still want to use
        these procedures you have to execute them via
        &lt;code class=&quot;literal&quot;&gt;session.connection()&lt;/code&gt;. The rules are different for
        each database, since database vendors have different stored procedure
        semantics/syntax.&lt;/p&gt;

        &lt;p&gt;Stored procedure queries cannot be paged with
        &lt;code class=&quot;literal&quot;&gt;setFirstResult()/setMaxResults()&lt;/code&gt;.&lt;/p&gt;

        &lt;p&gt;The recommended call form is standard SQL92: &lt;code class=&quot;literal&quot;&gt;{ ? = call
        functionName(&amp;lt;parameters&amp;gt;) }&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;{ ? = call
        procedureName(&amp;lt;parameters&amp;gt;}&lt;/code&gt;. Native call syntax is not
        supported.&lt;/p&gt;

        &lt;p&gt;For Oracle the following rules apply:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;A function must return a result set. The first parameter of
            a procedure must be an &lt;code class=&quot;literal&quot;&gt;OUT&lt;/code&gt; that returns a
            result set. This is done by using a
            &lt;code class=&quot;literal&quot;&gt;SYS_REFCURSOR&lt;/code&gt; type in Oracle 9 or 10. In Oracle
            you need to define a &lt;code class=&quot;literal&quot;&gt;REF CURSOR&lt;/code&gt; type. See
            Oracle literature for further information.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;For Sybase or MS SQL server the following rules apply:&lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;The procedure must return a result set. Note that since
            these servers can return multiple result sets and update counts,
            Hibernate will iterate the results and take the first result that
            is a result set as its return value. Everything else will be
            discarded.&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;If you can enable &lt;code class=&quot;literal&quot;&gt;SET NOCOUNT ON&lt;/code&gt; in your
            procedure it will probably be more efficient, but this is not a
            requirement.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;18.3. Custom SQL for create, update and delete&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-cud&quot;/&gt;18.3. Custom SQL for create, update and delete&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate can use custom SQL for create, update, and delete
    operations. The SQL can be overridden at the statement level or
    inidividual column level. This section describes statement overrides. For
    columns, see &lt;a class=&quot;xref&quot; href=&quot;#mapping-column-read-and-write&quot; title=&quot;5.6. Column transformers: read and write expressions&quot;&gt;Section 5.6, âColumn transformers: read and write expressionsâ&lt;/a&gt;. &lt;a class=&quot;xref&quot; href=&quot;#example-custom-crdu-via-annotations&quot; title=&quot;Example 18.11. Custom CRUD via annotations&quot;&gt;Example 18.11, âCustom CRUD via annotationsâ&lt;/a&gt; shows how to define
    custom SQL operatons using annotations.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-custom-crdu-via-annotations&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.11. Custom CRUD via annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;CHAOS&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLInsert&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;INSERT&amp;nbsp;INTO&amp;nbsp;CHAOS(size,&amp;nbsp;name,&amp;nbsp;nickname,&amp;nbsp;id)&amp;nbsp;VALUES(?,upper(?),?,?)&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLUpdate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;UPDATE&amp;nbsp;CHAOS&amp;nbsp;SET&amp;nbsp;size&amp;nbsp;=&amp;nbsp;?,&amp;nbsp;name&amp;nbsp;=&amp;nbsp;upper(?),&amp;nbsp;nickname&amp;nbsp;=&amp;nbsp;?&amp;nbsp;WHERE&amp;nbsp;id&amp;nbsp;=&amp;nbsp;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLDelete&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;DELETE&amp;nbsp;CHAOS&amp;nbsp;WHERE&amp;nbsp;id&amp;nbsp;=&amp;nbsp;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLDeleteAll&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;DELETE&amp;nbsp;CHAOS&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;namedQuery&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;chaos&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;NamedNativeQuery&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;chaos&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;query&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;select&amp;nbsp;id,&amp;nbsp;size,&amp;nbsp;name,&amp;nbsp;lower(&amp;nbsp;nickname&amp;nbsp;)&amp;nbsp;as&amp;nbsp;nickname&amp;nbsp;from&amp;nbsp;CHAOS&amp;nbsp;where&amp;nbsp;xml:id=&amp;nbsp;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;resultClass&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Chaos&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Chaos&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Id&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;id&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;size&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;nickname&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;@SQLInsert&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;@SQLUpdate&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;@SQLDelete&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;@SQLDeleteAll&lt;/code&gt;
    respectively override the INSERT, UPDATE, DELETE, and DELETE all
    statement. The same can be achieved using Hibernate mapping files and the
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;sql-insert&amp;gt;&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;sql-update&amp;gt;&lt;/code&gt; and
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;sql-delete&amp;gt;&lt;/code&gt; nodes. This can be seen in &lt;a class=&quot;xref&quot; href=&quot;#example-custom-crdu-via-xml&quot; title=&quot;Example 18.12. Custom CRUD XML&quot;&gt;Example 18.12, âCustom CRUD XMLâ&lt;/a&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-custom-crdu-via-xml&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.12. Custom CRUD XML&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;increment&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;name&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;sql-insert&amp;gt;INSERT INTO PERSON (NAME, ID) VALUES ( UPPER(?), ? )&amp;lt;/sql-insert&amp;gt;
    &amp;lt;sql-update&amp;gt;UPDATE PERSON SET NAME=UPPER(?) WHERE xml:id=?&amp;lt;/sql-update&amp;gt;
    &amp;lt;sql-delete&amp;gt;DELETE FROM PERSON WHERE xml:id=?&amp;lt;/sql-delete&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;If you expect to call a store procedure, be sure to set the
    &lt;code class=&quot;literal&quot;&gt;callable&lt;/code&gt; attribute to &lt;code class=&quot;constant&quot;&gt;true&lt;/code&gt;. In
    annotations as well as in xml. &lt;/p&gt;

    &lt;p&gt;To check that the execution happens correctly, Hibernate allows you
    to define one of those three strategies:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;none: no check is performed: the store procedure is expected to
        fail upon issues&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;count: use of rowcount to check that the update is
        successful&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;param: like COUNT but using an output parameter rather that the
        standard mechanism&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;To define the result check style, use the &lt;code class=&quot;literal&quot;&gt;check&lt;/code&gt;
    parameter which is again available in annoations as well as in xml.&lt;/p&gt;

    &lt;p&gt;You can use the exact same set of annotations respectively xml nodes
    to override the collection related statements -see &lt;a class=&quot;xref&quot; href=&quot;#example-overriding-sql-collections-annotations&quot; title=&quot;Example 18.13. Overriding SQL statements for collections using annotations&quot;&gt;Example 18.13, âOverriding SQL statements for collections using
      annotationsâ&lt;/a&gt;.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-overriding-sql-collections-annotations&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.13. Overriding SQL statements for collections using
      annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;chaos_fk&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLInsert&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;UPDATE&amp;nbsp;CASIMIR_PARTICULE&amp;nbsp;SET&amp;nbsp;chaos_fk&amp;nbsp;=&amp;nbsp;?&amp;nbsp;where&amp;nbsp;id&amp;nbsp;=&amp;nbsp;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLDelete&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;UPDATE&amp;nbsp;CASIMIR_PARTICULE&amp;nbsp;SET&amp;nbsp;chaos_fk&amp;nbsp;=&amp;nbsp;null&amp;nbsp;where&amp;nbsp;id&amp;nbsp;=&amp;nbsp;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CasimirParticle&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;particles&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;HashSet&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CasimirParticle&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;();&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
      &lt;p&gt;The parameter order is important and is defined by the order
      Hibernate handles properties. You can see the expected order by enabling
      debug logging for the &lt;code class=&quot;literal&quot;&gt;org.hibernate.persister.entity&lt;/code&gt;
      level. With this level enabled Hibernate will print out the static SQL
      that is used to create, update, delete etc. entities. (To see the
      expected sequence, remember to not include your custom SQL through
      annotations or mapping files as that will override the Hibernate
      generated static sql)&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;Overriding SQL statements for secondary tables is also possible
    using &lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.Table&lt;/code&gt; and either (or
    all) attributes &lt;code class=&quot;literal&quot;&gt;sqlInsert&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;sqlUpdate&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;sqlDelete&lt;/code&gt;:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8639&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.14. Overriding SQL statements for secondary tables&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTables&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;`Cat&amp;nbsp;nbr1`&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SecondaryTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@org&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tables&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;appliesTo&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;comment&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;My&amp;nbsp;cat&amp;nbsp;table&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;appliesTo&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;Cat2&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;foreignKey&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;FK_CAT2_CAT&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fetch&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FetchMode&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;SELECT&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sqlInsert&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SQLInsert&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;insert&amp;nbsp;into&amp;nbsp;Cat2(storyPart2,&amp;nbsp;id)&amp;nbsp;values(upper(?),&amp;nbsp;?)&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cat&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;implements&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Serializable&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The previous example also shows that you can give a comment to a
    given table (primary or secondary): This comment will be used for DDL
    generation.&lt;/p&gt;

    &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;tip&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Tip&lt;/h2&gt;
      &lt;p&gt;The SQL is directly executed in your database, so you can use any
      dialect you like. This will, however, reduce the portability of your
      mapping if you use database specific SQL.&lt;/p&gt;
    &lt;/div&gt;

    &lt;p&gt;Last but not least, stored procedures are in most cases required to
    return the number of rows inserted, updated and deleted. Hibernate always
    registers the first statement parameter as a numeric output parameter for
    the CUD operations:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8646&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 18.15. Stored procedures and their return value&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;CREATE OR REPLACE FUNCTION updatePerson (uid IN NUMBER, uname IN VARCHAR2)
    RETURN NUMBER IS
BEGIN

    update PERSON
    set
        NAME = uname,
    where
        ID = uid;

    return SQL%ROWCOUNT;

END updatePerson;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;18.4. Custom SQL for loading&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;querysql-load&quot;/&gt;18.4. Custom SQL for loading&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;You can also declare your own SQL (or HQL) queries for entity
    loading. As with inserts, updates, and deletes, this can be done at the
    individual column level as described in &lt;a class=&quot;xref&quot; href=&quot;#mapping-column-read-and-write&quot; title=&quot;5.6. Column transformers: read and write expressions&quot;&gt;Section 5.6, âColumn transformers: read and write expressionsâ&lt;/a&gt; or at the statement level. Here
    is an example of a statement level override:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;person&quot;&amp;gt;
    &amp;lt;return alias=&quot;pers&quot; class=&quot;Person&quot; lock-mode=&quot;upgrade&quot;/&amp;gt;
    SELECT NAME AS {pers.name}, ID AS {pers.id}
    FROM PERSON
    WHERE xml:id=?
    FOR UPDATE
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;

    &lt;p&gt;This is just a named query declaration, as discussed earlier. You
    can reference this named query in a class mapping:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;increment&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;name&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;loader query-ref=&quot;person&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

    &lt;p&gt;This even works with stored procedures.&lt;/p&gt;

    &lt;p&gt;You can even define a query for collection loading:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;employments&quot; inverse=&quot;true&quot;&amp;gt;
    &amp;lt;key/&amp;gt;
    &amp;lt;one-to-many class=&quot;Employment&quot;/&amp;gt;
    &amp;lt;loader query-ref=&quot;employments&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;employments&quot;&amp;gt;
    &amp;lt;load-collection alias=&quot;emp&quot; role=&quot;Person.employments&quot;/&amp;gt;
    SELECT {emp.*}
    FROM EMPLOYMENT emp
    WHERE EMPLOYER = :id
    ORDER BY STARTDATE ASC, EMPLOYEE ASC
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;

    &lt;p&gt;You can also define an entity loader that loads a collection by join
    fetching:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;sql-query name=&quot;person&quot;&amp;gt;
    &amp;lt;return alias=&quot;pers&quot; class=&quot;Person&quot;/&amp;gt;
    &amp;lt;return-join alias=&quot;emp&quot; property=&quot;pers.employments&quot;/&amp;gt;
    SELECT NAME AS {pers.*}, {emp.*}
    FROM PERSON pers
    LEFT OUTER JOIN EMPLOYMENT emp
        ON pers.ID = emp.PERSON_ID
    WHERE xml:id=?
&amp;lt;/sql-query&amp;gt;&lt;/pre&gt;

    &lt;p&gt;The annotation equivalent &lt;code class=&quot;literal&quot;&gt;&amp;lt;loader&amp;gt;&lt;/code&gt; is the
    @Loader annotation as seen in &lt;a class=&quot;xref&quot; href=&quot;#example-custom-crdu-via-annotations&quot; title=&quot;Example 18.11. Custom CRUD via annotations&quot;&gt;Example 18.11, âCustom CRUD via annotationsâ&lt;/a&gt;.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 19. Filtering data&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;filters&quot;/&gt;Chapter 19. Filtering data&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#objectstate-filters&quot;&gt;19.1. Hibernate filters&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;p&gt;Hibernate provides an innovative new approach to handling data with
  &quot;visibility&quot; rules. A &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate filter&lt;/em&gt;&lt;/span&gt; is a global,
  named, parameterized filter that can be enabled or disabled for a particular
  Hibernate session.&lt;/p&gt;

  &lt;div class=&quot;section&quot; title=&quot;19.1. Hibernate filters&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;objectstate-filters&quot;/&gt;19.1. Hibernate filters&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate has the ability to pre-define filter criteria and attach
    those filters at both a class level and a collection level. A filter
    criteria allows you to define a restriction clause similar to the existing
    &quot;where&quot; attribute available on the class and various collection elements.
    These filter conditions, however, can be parameterized. The application
    can then decide at runtime whether certain filters should be enabled and
    what their parameter values should be. Filters can be used like database
    views, but they are parameterized inside the application.&lt;/p&gt;

    &lt;p&gt;Using annotatons filters are defined via
    &lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.FilterDef&lt;/code&gt; or
    &lt;code class=&quot;literal&quot;&gt;@org.hibernate.annotations.FilterDefs&lt;/code&gt;. A filter
    definition has a &lt;code class=&quot;methodname&quot;&gt;name()&lt;/code&gt; and an array of
    parameters(). A parameter will allow you to adjust the behavior of the
    filter at runtime. Each parameter is defined by a
    &lt;code class=&quot;literal&quot;&gt;@ParamDef&lt;/code&gt; which has a name and a type. You can also
    define a &lt;code class=&quot;methodname&quot;&gt;defaultCondition()&lt;/code&gt; parameter for a given
    &lt;code class=&quot;literal&quot;&gt;@FilterDef&lt;/code&gt; to set the default condition to use when
    none are defined in each individual &lt;code class=&quot;literal&quot;&gt;@Filter&lt;/code&gt;.
    &lt;code class=&quot;literal&quot;&gt;@FilterDef&lt;/code&gt;(s) can be defined at the class or package
    level. &lt;/p&gt;

    &lt;p&gt;We now need to define the SQL filter clause applied to either the
    entity load or the collection load. &lt;code class=&quot;literal&quot;&gt;@Filter&lt;/code&gt; is used and
    placed either on the entity or the collection element. The connection
    between &lt;code class=&quot;classname&quot;&gt;@FilterName&lt;/code&gt; and
    &lt;code class=&quot;classname&quot;&gt;@Filter&lt;/code&gt; is a matching name.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8685&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 19.1. @FilterDef and @Filter annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FilterDef&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;parameters&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;ParamDef&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;type&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;integer&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;betweenLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;:minLength&amp;nbsp;&amp;lt;=&amp;nbsp;length&amp;nbsp;and&amp;nbsp;:maxLength&amp;nbsp;&amp;gt;=&amp;nbsp;length&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;:minLength&amp;nbsp;&amp;lt;=&amp;nbsp;length&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;When the collection use an association table as a relational
    representation, you might want to apply the filter condition to the
    association table itself or to the target entity table. To apply the
    constraint on the target entity, use the regular
    &lt;code class=&quot;literal&quot;&gt;@Filter&lt;/code&gt; annotation. However, if you want to target the
    association table, use the &lt;code class=&quot;literal&quot;&gt;@FilterJoinTable&lt;/code&gt;
    annotation.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8691&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 19.2. Using &lt;code class=&quot;classname&quot;&gt;@FilterJoinTable&lt;/code&gt; for filterting on
      the association table&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinTable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;filter&amp;nbsp;on&amp;nbsp;the&amp;nbsp;target&amp;nbsp;entity&amp;nbsp;table&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;betweenLength&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;:minLength&amp;nbsp;&amp;lt;=&amp;nbsp;length&amp;nbsp;and&amp;nbsp;:maxLength&amp;nbsp;&amp;gt;=&amp;nbsp;length&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_operator&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;filter&amp;nbsp;on&amp;nbsp;the&amp;nbsp;association&amp;nbsp;table&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;FilterJoinTable&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;security&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;:userlevel&amp;nbsp;&amp;gt;=&amp;nbsp;requredLevel&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getForests&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;By default, Hibernate attempts to automatically determine all points within the
    &lt;code class=&quot;literal&quot;&gt;@Filter&lt;/code&gt; SQL condition fragment that an alias should be injected.  To control the alias injection,
    set &lt;code class=&quot;literal&quot;&gt;deduceAliasInjectionPoints&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt; within the
    &lt;code class=&quot;literal&quot;&gt;@Filter&lt;/code&gt;.  Injection points are then marked using &lt;code class=&quot;literal&quot;&gt;@SqlFragmentAlias&lt;/code&gt; annotations or
    within the SQL&apos;s condition fragment using &lt;code class=&quot;literal&quot;&gt;{alias}&lt;/code&gt;.&lt;/p&gt;
    
    &lt;p&gt;In addition to allowing explicit alias control, &lt;code class=&quot;literal&quot;&gt;deduceAliasInjectionPoints&lt;/code&gt;
    provides an out when Hibernate assumes an ANSI SQL reserved keyword is a column and incorrectly aliases it.&lt;/p&gt;

	&lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8704&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 19.3. @Filter annotation, disabling deduceAliasInjectionPoints&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
		

		&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Table&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;T_TREE&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filters&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;({&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;isTall&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;{alias}.LENGTH&amp;nbsp;&amp;gt;=&amp;nbsp;100&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;deduceAliasInjectionPoints&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;),&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Filter&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;isOak&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;condition&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;{t}.WOODTYPE&amp;nbsp;like&amp;nbsp;&apos;oak&apos;&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;deduceAliasInjectionPoints&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;aliases&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SqlFragmentAlias&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;alias&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;table&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;T_TREE&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;})&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Tree&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;
	&lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;Using Hibernate mapping files for defining filters the situtation is
    very similar. The filters must first be defined and then attached to the
    appropriate mapping elements. To define a filter, use the
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter-def/&amp;gt;&lt;/code&gt; element within a
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;hibernate-mapping/&amp;gt;&lt;/code&gt; element:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8710&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 19.4. Defining a filter definition via
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter-def&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;filter-def name=&quot;myFilter&quot;&amp;gt;
    &amp;lt;filter-param name=&quot;myFilterParam&quot; type=&quot;string&quot;/&amp;gt;
&amp;lt;/filter-def&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;This filter can then be attached to a class or collection (or, to
    both or multiples of each at the same time):&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e8715&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 19.5. Attaching a filter to a class or collection using
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;myClass&quot; ...&amp;gt;
    ...
    &amp;lt;filter name=&quot;myFilter&quot; condition=&quot;:myFilterParam = MY_FILTERED_COLUMN&quot;/&amp;gt;

    &amp;lt;set ...&amp;gt;
        &amp;lt;filter name=&quot;myFilter&quot; condition=&quot;:myFilterParam = MY_FILTERED_COLUMN&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;  
&amp;lt;/class&amp;gt;&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The methods on &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; are:
    &lt;code class=&quot;literal&quot;&gt;enableFilter(String filterName)&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;getEnabledFilter(String filterName)&lt;/code&gt;, and
    &lt;code class=&quot;literal&quot;&gt;disableFilter(String filterName)&lt;/code&gt;. By default, filters
    are &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; enabled for a given session. Filters must be
    enabled through use of the &lt;code class=&quot;literal&quot;&gt;Session.enableFilter()&lt;/code&gt;
    method, which returns an instance of the &lt;code class=&quot;literal&quot;&gt;Filter&lt;/code&gt;
    interface. If you used the simple filter defined above, it would look like
    this:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;session.enableFilter(&quot;myFilter&quot;).setParameter(&quot;myFilterParam&quot;, &quot;some-value&quot;);&lt;/pre&gt;

    &lt;p&gt;Methods on the org.hibernate.Filter interface do allow the
    method-chaining common to much of Hibernate.&lt;/p&gt;

    &lt;p&gt;The following is a full example, using temporal data with an
    effective record date pattern:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;filter-def name=&quot;effectiveDate&quot;&amp;gt;
    &amp;lt;filter-param name=&quot;asOfDate&quot; type=&quot;date&quot;/&amp;gt;
&amp;lt;/filter-def&amp;gt;

&amp;lt;class name=&quot;Employee&quot; ...&amp;gt;
...
    &amp;lt;many-to-one name=&quot;department&quot; column=&quot;dept_id&quot; class=&quot;Department&quot;/&amp;gt;
    &amp;lt;property name=&quot;effectiveStartDate&quot; type=&quot;date&quot; column=&quot;eff_start_dt&quot;/&amp;gt;
    &amp;lt;property name=&quot;effectiveEndDate&quot; type=&quot;date&quot; column=&quot;eff_end_dt&quot;/&amp;gt;
...
    &amp;lt;!--
        Note that this assumes non-terminal records have an eff_end_dt set to
        a max db date for simplicity-sake
    --&amp;gt;
    &amp;lt;filter name=&quot;effectiveDate&quot;
            condition=&quot;:asOfDate BETWEEN eff_start_dt and eff_end_dt&quot;/&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Department&quot; ...&amp;gt;
...
    &amp;lt;set name=&quot;employees&quot; lazy=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;dept_id&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Employee&quot;/&amp;gt;
        &amp;lt;filter name=&quot;effectiveDate&quot;
                condition=&quot;:asOfDate BETWEEN eff_start_dt and eff_end_dt&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

    &lt;p&gt;In order to ensure that you are provided with currently effective
    records, enable the filter on the session prior to retrieving employee
    data:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = ...;
session.enableFilter(&quot;effectiveDate&quot;).setParameter(&quot;asOfDate&quot;, new Date());
List results = session.createQuery(&quot;from Employee as e where e.salary &amp;gt; :targetSalary&quot;)
         .setLong(&quot;targetSalary&quot;, new Long(1000000))
         .list();
&lt;/pre&gt;

    &lt;p&gt;Even though a salary constraint was mentioned explicitly on the
    results in the above HQL, because of the enabled filter, the query will
    return only currently active employees who have a salary greater than one
    million dollars.&lt;/p&gt;

    &lt;p&gt;If you want to use filters with outer joining, either through HQL or
    load fetching, be careful of the direction of the condition expression. It
    is safest to set this up for left outer joining. Place the parameter first
    followed by the column name(s) after the operator.&lt;/p&gt;

    &lt;p&gt;After being defined, a filter might be attached to multiple entities
    and/or collections each with its own condition. This can be problematic
    when the conditions are the same each time. Using
    &lt;code class=&quot;literal&quot;&gt;&amp;lt;filter-def/&amp;gt;&lt;/code&gt; allows you to definine a default
    condition, either as an attribute or CDATA:&lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;filter-def name=&quot;myFilter&quot; condition=&quot;abc &amp;gt; xyz&quot;&amp;gt;...&amp;lt;/filter-def&amp;gt;
&amp;lt;filter-def name=&quot;myOtherFilter&quot;&amp;gt;abc=xyz&amp;lt;/filter-def&amp;gt;&lt;/pre&gt;

    &lt;p&gt;This default condition will be used whenever the filter is attached
    to something without specifying a condition. This means you can give a
    specific condition as part of the attachment of the filter that overrides
    the default condition in that particular case.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 20. Improving performance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance&quot;/&gt;Chapter 20. Improving performance&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching&quot;&gt;20.1. Fetching strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-lazy&quot;&gt;20.1.1. Working with lazy associations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-custom&quot;&gt;20.1.2. Tuning fetch strategies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-proxies&quot;&gt;20.1.3. Single-ended association proxies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-initialization&quot;&gt;20.1.4. Initializing collections and proxies&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-batch&quot;&gt;20.1.5. Using batch fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-subselect&quot;&gt;20.1.6. Using subselect fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-profiles&quot;&gt;20.1.7. Fetch profiles&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-fetching-lazyproperties&quot;&gt;20.1.8. Using lazy property fetching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache&quot;&gt;20.2. The Second Level Cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-mapping&quot;&gt;20.2.1. Cache mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-readonly&quot;&gt;20.2.2. Strategy: read only&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-readwrite&quot;&gt;20.2.3. Strategy: read/write&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-nonstrict&quot;&gt;20.2.4. Strategy: nonstrict read/write&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-transactional&quot;&gt;20.2.5. Strategy: transactional&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-cache-compat-matrix&quot;&gt;20.2.6. Cache-provider/concurrency-strategy compatibility&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-sessioncache&quot;&gt;20.3. Managing the caches&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache&quot;&gt;20.4. The Query Cache&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache-enable&quot;&gt;20.4.1. Enabling query caching&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-querycache-regions&quot;&gt;20.4.2. Query cache regions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#bytecode-enhancement&quot;&gt;20.5. Bytecode Enhancement&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-impl-interface&quot;&gt;20.5.1. Implementing &lt;code class=&quot;classname&quot;&gt;org.hibernate.engine.spi.ManagedEntity&lt;/code&gt; interface&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-impl-interface-by-wrapper&quot;&gt;20.5.2. Runtime instrument&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#entityentry-lookup-buildtime-instrument&quot;&gt;20.5.3. Build-time instrument&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections&quot;&gt;20.6. Understanding Collection performance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-taxonomy&quot;&gt;20.6.1. Taxonomy&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-mostefficientupdate&quot;&gt;20.6.2. Lists, maps, idbags and sets are the most efficient collections
      to update&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-mostefficentinverse&quot;&gt;20.6.3. Bags and lists are the most efficient inverse collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-collections-oneshotdelete&quot;&gt;20.6.4. One shot delete&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring&quot;&gt;20.7. Monitoring performance&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring-sf&quot;&gt;20.7.1. Monitoring a SessionFactory&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#performance-monitoring-metrics&quot;&gt;20.7.2. Metrics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;div class=&quot;section&quot; title=&quot;20.1. Fetching strategies&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching&quot;/&gt;20.1. Fetching strategies&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Hibernate uses a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;fetching strategy&lt;/em&gt;&lt;/span&gt; to retrieve
    associated objects if the application needs to navigate the association.
    Fetch strategies can be declared in the O/R mapping metadata, or
    over-ridden by a particular HQL or &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt;
    query.&lt;/p&gt;

    &lt;p&gt;Hibernate defines the following fetching strategies:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Join fetching&lt;/em&gt;&lt;/span&gt;: Hibernate retrieves the
        associated instance or collection in the same
        &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;, using an &lt;code class=&quot;literal&quot;&gt;OUTER
        JOIN&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Select fetching&lt;/em&gt;&lt;/span&gt;: a second
        &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; is used to retrieve the associated entity or
        collection. Unless you explicitly disable lazy fetching by specifying
        &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt;, this second select will only be
        executed when you access the association.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Subselect fetching&lt;/em&gt;&lt;/span&gt;: a second
        &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; is used to retrieve the associated
        collections for all entities retrieved in a previous query or fetch.
        Unless you explicitly disable lazy fetching by specifying
        &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt;, this second select will only be
        executed when you access the association.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Batch fetching&lt;/em&gt;&lt;/span&gt;: an optimization strategy
        for select fetching. Hibernate retrieves a batch of entity instances
        or collections in a single &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; by specifying a
        list of primary or foreign keys.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;Hibernate also distinguishes between:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Immediate fetching&lt;/em&gt;&lt;/span&gt;: an association,
        collection or attribute is fetched immediately when the owner is
        loaded.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Lazy collection fetching&lt;/em&gt;&lt;/span&gt;: a collection is
        fetched when the application invokes an operation upon that
        collection. This is the default for collections.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&quot;Extra-lazy&quot; collection fetching&lt;/em&gt;&lt;/span&gt;:
        individual elements of the collection are accessed from the database
        as needed. Hibernate tries not to fetch the whole collection into
        memory unless absolutely needed. It is suitable for large
        collections.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Proxy fetching&lt;/em&gt;&lt;/span&gt;: a single-valued association
        is fetched when a method other than the identifier getter is invoked
        upon the associated object.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&quot;No-proxy&quot; fetching&lt;/em&gt;&lt;/span&gt;: a single-valued
        association is fetched when the instance variable is accessed.
        Compared to proxy fetching, this approach is less lazy; the
        association is fetched even when only the identifier is accessed. It
        is also more transparent, since no proxy is visible to the
        application. This approach requires buildtime bytecode instrumentation
        and is rarely necessary.&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Lazy attribute fetching&lt;/em&gt;&lt;/span&gt;: an attribute or
        single valued association is fetched when the instance variable is
        accessed. This approach requires buildtime bytecode instrumentation
        and is rarely necessary.&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;We have two orthogonal notions here: &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;when&lt;/em&gt;&lt;/span&gt; is
    the association fetched and &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;how&lt;/em&gt;&lt;/span&gt; is it fetched. It is
    important that you do not confuse them. We use &lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; to
    tune performance. We can use &lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt; to define a contract
    for what data is always available in any detached instance of a particular
    class.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.1. Working with lazy associations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-lazy&quot;/&gt;20.1.1. Working with lazy associations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;By default, Hibernate uses lazy select fetching for collections
      and lazy proxy fetching for single-valued associations. These defaults
      make sense for most associations in the majority of applications.&lt;/p&gt;

      &lt;p&gt;If you set &lt;code class=&quot;literal&quot;&gt;hibernate.default_batch_fetch_size&lt;/code&gt;,
      Hibernate will use the batch fetch optimization for lazy fetching. This
      optimization can also be enabled at a more granular level.&lt;/p&gt;

      &lt;p&gt;Please be aware that access to a lazy association outside of the
      context of an open Hibernate session will result in an exception. For
      example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;s = sessions.openSession();
Transaction tx = s.beginTransaction();
            
User u = (User) s.createQuery(&quot;from User u where u.name=:userName&quot;)
    .setString(&quot;userName&quot;, userName).uniqueResult();
Map permissions = u.getPermissions();

tx.commit();
s.close();

Integer accessLevel = (Integer) permissions.get(&quot;accounts&quot;);  // Error!&lt;/pre&gt;

      &lt;p&gt;Since the permissions collection was not initialized when the
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; was closed, the collection will not be able
      to load its state. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate does not support lazy
      initialization for detached objects&lt;/em&gt;&lt;/span&gt;. This can be fixed by
      moving the code that reads from the collection to just before the
      transaction is committed.&lt;/p&gt;

      &lt;p&gt;Alternatively, you can use a non-lazy collection or association,
      by specifying &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt; for the association
      mapping. However, it is intended that lazy initialization be used for
      almost all collections and associations. If you define too many non-lazy
      associations in your object model, Hibernate will fetch the entire
      database into memory in every transaction.&lt;/p&gt;

      &lt;p&gt;On the other hand, you can use join fetching, which is non-lazy by
      nature, instead of select fetching in a particular transaction. We will
      now explain how to customize the fetching strategy. In Hibernate, the
      mechanisms for choosing a fetch strategy are identical for single-valued
      associations and collections.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.2. Tuning fetch strategies&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-custom&quot;/&gt;20.1.2. Tuning fetch strategies&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Select fetching (the default) is extremely vulnerable to N+1
      selects problems, so we might want to enable join fetching in the
      mapping document:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;permissions&quot;
            fetch=&quot;join&quot;&amp;gt;
    &amp;lt;key column=&quot;userId&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Permission&quot;/&amp;gt;
&amp;lt;/set&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;mother&quot; class=&quot;Cat&quot; fetch=&quot;join&quot;/&amp;gt;&lt;/pre&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;fetch&lt;/code&gt; strategy defined in the mapping
      document affects:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;retrieval via &lt;code class=&quot;literal&quot;&gt;get()&lt;/code&gt; or
          &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;retrieval that happens implicitly when an association is
          navigated&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; queries&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;HQL queries if &lt;code class=&quot;literal&quot;&gt;subselect&lt;/code&gt; fetching is
          used&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Irrespective of the fetching strategy you use, the defined
      non-lazy graph is guaranteed to be loaded into memory. This might,
      however, result in several immediate selects being used to execute a
      particular HQL query.&lt;/p&gt;

      &lt;p&gt;Usually, the mapping document is not used to customize fetching.
      Instead, we keep the default behavior, and override it for a particular
      transaction, using &lt;code class=&quot;literal&quot;&gt;left join fetch&lt;/code&gt; in HQL. This tells
      Hibernate to fetch the association eagerly in the first select, using an
      outer join. In the &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; query API, you would use
      &lt;code class=&quot;literal&quot;&gt;setFetchMode(FetchMode.JOIN)&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;If you want to change the fetching strategy used by
      &lt;code class=&quot;literal&quot;&gt;get()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt;, you can use a
      &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt; query. For example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;User user = (User) session.createCriteria(User.class)
                .setFetchMode(&quot;permissions&quot;, FetchMode.JOIN)
                .add( Restrictions.idEq(userId) )
                .uniqueResult();&lt;/pre&gt;

      &lt;p&gt;This is Hibernate&apos;s equivalent of what some ORM solutions call a
      &quot;fetch plan&quot;.&lt;/p&gt;

      &lt;p&gt;A completely different approach to problems with N+1 selects is to
      use the second-level cache.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.3. Single-ended association proxies&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-proxies&quot;/&gt;20.1.3. Single-ended association proxies&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Lazy fetching for collections is implemented using Hibernate&apos;s own
      implementation of persistent collections. However, a different mechanism
      is needed for lazy behavior in single-ended associations. The target
      entity of the association must be proxied. Hibernate implements lazy
      initializing proxies for persistent objects using runtime bytecode
      enhancement which is accessed via the bytecode provider.&lt;/p&gt;

      &lt;p&gt;At startup, Hibernate generates proxies by default for all
      persistent classes and uses them to enable lazy fetching of
      &lt;code class=&quot;literal&quot;&gt;many-to-one&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;one-to-one&lt;/code&gt;
      associations.&lt;/p&gt;

      &lt;p&gt;The mapping file may declare an interface to use as the proxy
      interface for that class, with the &lt;code class=&quot;literal&quot;&gt;proxy&lt;/code&gt; attribute.
      By default, Hibernate uses a subclass of the class. &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;The
      proxied class must implement a default constructor with at least package
      visibility. This constructor is recommended for all persistent
      classes&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;

      &lt;p&gt;There are potential problems to note when extending this approach
      to polymorphic classes.For example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Cat&quot; proxy=&quot;Cat&quot;&amp;gt;
    ......
    &amp;lt;subclass name=&quot;DomesticCat&quot;&amp;gt;
        .....
    &amp;lt;/subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;Firstly, instances of &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; will never be
      castable to &lt;code class=&quot;literal&quot;&gt;DomesticCat&lt;/code&gt;, even if the underlying
      instance is an instance of &lt;code class=&quot;literal&quot;&gt;DomesticCat&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = (Cat) session.load(Cat.class, id);  // instantiate a proxy (does not hit the db)
if ( cat.isDomesticCat() ) {                  // hit the db to initialize the proxy
    DomesticCat dc = (DomesticCat) cat;       // Error!
    ....
}&lt;/pre&gt;

      &lt;p&gt;Secondly, it is possible to break proxy
      &lt;code class=&quot;literal&quot;&gt;==&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = (Cat) session.load(Cat.class, id);            // instantiate a Cat proxy
DomesticCat dc = 
        (DomesticCat) session.load(DomesticCat.class, id);  // acquire new DomesticCat proxy!
System.out.println(cat==dc);                            // false&lt;/pre&gt;

      &lt;p&gt;However, the situation is not quite as bad as it looks. Even
      though we now have two references to different proxy objects, the
      underlying instance will still be the same object:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;cat.setWeight(11.0);  // hit the db to initialize the proxy
System.out.println( dc.getWeight() );  // 11.0&lt;/pre&gt;

      &lt;p&gt;Third, you cannot use a bytecode provider generated proxy for a &lt;code class=&quot;literal&quot;&gt;final&lt;/code&gt;
      class or a class with any &lt;code class=&quot;literal&quot;&gt;final&lt;/code&gt; methods.&lt;/p&gt;

      &lt;p&gt;Finally, if your persistent object acquires any resources upon
      instantiation (e.g. in initializers or default constructor), then those
      resources will also be acquired by the proxy. The proxy class is an
      actual subclass of the persistent class.&lt;/p&gt;

      &lt;p&gt;These problems are all due to fundamental limitations in Java&apos;s
      single inheritance model. To avoid these problems your persistent
      classes must each implement an interface that declares its business
      methods. You should specify these interfaces in the mapping file where
      &lt;code class=&quot;literal&quot;&gt;CatImpl&lt;/code&gt; implements the interface
      &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;DomesticCatImpl&lt;/code&gt; implements
      the interface &lt;code class=&quot;literal&quot;&gt;DomesticCat&lt;/code&gt;. For example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;CatImpl&quot; proxy=&quot;Cat&quot;&amp;gt;
    ......
    &amp;lt;subclass name=&quot;DomesticCatImpl&quot; proxy=&quot;DomesticCat&quot;&amp;gt;
        .....
    &amp;lt;/subclass&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;Then proxies for instances of &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;DomesticCat&lt;/code&gt; can be returned by
      &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt;.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Cat cat = (Cat) session.load(CatImpl.class, catid);
Iterator iter = session.createQuery(&quot;from CatImpl as cat where cat.name=&apos;fritz&apos;&quot;).iterate();
Cat fritz = (Cat) iter.next();&lt;/pre&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        

        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;list()&lt;/code&gt; does not usually return
        proxies.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;Relationships are also lazily initialized. This means you must
      declare any properties to be of type &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;, not
      &lt;code class=&quot;literal&quot;&gt;CatImpl&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Certain operations do &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;not&lt;/em&gt;&lt;/span&gt; require proxy
      initialization:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt;: if the persistent class does not
          override &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;: if the persistent class does
          not override &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;The identifier getter method&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Hibernate will detect persistent classes that override
      &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;By choosing &lt;code class=&quot;literal&quot;&gt;lazy=&quot;no-proxy&quot;&lt;/code&gt; instead of the
      default &lt;code class=&quot;literal&quot;&gt;lazy=&quot;proxy&quot;&lt;/code&gt;, you can avoid problems
      associated with typecasting. However, buildtime bytecode instrumentation
      is required, and all operations will result in immediate proxy
      initialization.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.4. Initializing collections and proxies&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-initialization&quot;/&gt;20.1.4. Initializing collections and proxies&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;A &lt;code class=&quot;literal&quot;&gt;LazyInitializationException&lt;/code&gt; will be thrown by
      Hibernate if an uninitialized collection or proxy is accessed outside of
      the scope of the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, i.e., when the entity
      owning the collection or having the reference to the proxy is in the
      detached state.&lt;/p&gt;

      &lt;p&gt;Sometimes a proxy or collection needs to be initialized before
      closing the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. You can force initialization by
      calling &lt;code class=&quot;literal&quot;&gt;cat.getSex()&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;cat.getKittens().size()&lt;/code&gt;, for example. However, this
      can be confusing to readers of the code and it is not convenient for
      generic code.&lt;/p&gt;

      &lt;p&gt;The static methods &lt;code class=&quot;literal&quot;&gt;Hibernate.initialize()&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;Hibernate.isInitialized()&lt;/code&gt;, provide the application
      with a convenient way of working with lazily initialized collections or
      proxies. &lt;code class=&quot;literal&quot;&gt;Hibernate.initialize(cat)&lt;/code&gt; will force the
      initialization of a proxy, &lt;code class=&quot;literal&quot;&gt;cat&lt;/code&gt;, as long as its
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is still open. &lt;code class=&quot;literal&quot;&gt;Hibernate.initialize(
      cat.getKittens() )&lt;/code&gt; has a similar effect for the collection of
      kittens.&lt;/p&gt;

      &lt;p&gt;Another option is to keep the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; open
      until all required collections and proxies have been loaded. In some
      application architectures, particularly where the code that accesses
      data using Hibernate, and the code that uses it are in different
      application layers or different physical processes, it can be a problem
      to ensure that the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is open when a collection
      is initialized. There are two basic ways to deal with this issue:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;In a web-based application, a servlet filter can be used to
          close the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; only at the end of a user
          request, once the rendering of the view is complete (the
          &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Open Session in View&lt;/em&gt;&lt;/span&gt; pattern). Of course, this
          places heavy demands on the correctness of the exception handling of
          your application infrastructure. It is vitally important that the
          &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is closed and the transaction ended
          before returning to the user, even when an exception occurs during
          rendering of the view. See the Hibernate Wiki for examples of this
          &quot;Open Session in View&quot; pattern.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;In an application with a separate business tier, the business
          logic must &quot;prepare&quot; all collections that the web tier needs before
          returning. This means that the business tier should load all the
          data and return all the data already initialized to the
          presentation/web tier that is required for a particular use case.
          Usually, the application calls
          &lt;code class=&quot;literal&quot;&gt;Hibernate.initialize()&lt;/code&gt; for each collection that
          will be needed in the web tier (this call must occur before the
          session is closed) or retrieves the collection eagerly using a
          Hibernate query with a &lt;code class=&quot;literal&quot;&gt;FETCH&lt;/code&gt; clause or a
          &lt;code class=&quot;literal&quot;&gt;FetchMode.JOIN&lt;/code&gt; in &lt;code class=&quot;literal&quot;&gt;Criteria&lt;/code&gt;.
          This is usually easier if you adopt the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Command&lt;/em&gt;&lt;/span&gt;
          pattern instead of a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Session Facade&lt;/em&gt;&lt;/span&gt;.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;You can also attach a previously loaded object to a new
          &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; with &lt;code class=&quot;literal&quot;&gt;merge()&lt;/code&gt; or
          &lt;code class=&quot;literal&quot;&gt;lock()&lt;/code&gt; before accessing uninitialized collections
          or other proxies. Hibernate does not, and certainly
          &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;should&lt;/em&gt;&lt;/span&gt; not, do this automatically since it
          would introduce impromptu transaction semantics.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Sometimes you do not want to initialize a large collection, but
      still need some information about it, like its size, for example, or a
      subset of the data.&lt;/p&gt;

      &lt;p&gt;You can use a collection filter to get the size of a collection
      without initializing it:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;( (Integer) s.createFilter( collection, &quot;select count(*)&quot; ).list().get(0) ).intValue()&lt;/pre&gt;

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;createFilter()&lt;/code&gt; method is also used to
      efficiently retrieve subsets of a collection without needing to
      initialize the whole collection:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;s.createFilter( lazyCollection, &quot;&quot;).setFirstResult(0).setMaxResults(10).list();&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.5. Using batch fetching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-batch&quot;/&gt;20.1.5. Using batch fetching&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Using batch fetching, Hibernate can load several uninitialized
      proxies if one proxy is accessed. Batch fetching is an optimization of
      the lazy select fetching strategy. There are two ways you can configure
      batch fetching: on the class level and the collection level.&lt;/p&gt;

      &lt;p&gt;Batch fetching for classes/entities is easier to understand.
      Consider the following example: at runtime you have 25
      &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; instances loaded in a &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;,
      and each &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt; has a reference to its
      &lt;code class=&quot;literal&quot;&gt;owner&lt;/code&gt;, a &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;. The
      &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; class is mapped with a proxy,
      &lt;code class=&quot;literal&quot;&gt;lazy=&quot;true&quot;&lt;/code&gt;. If you now iterate through all cats and
      call &lt;code class=&quot;literal&quot;&gt;getOwner()&lt;/code&gt; on each, Hibernate will, by default,
      execute 25 &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt; statements to retrieve the proxied
      owners. You can tune this behavior by specifying a
      &lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; in the mapping of
      &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot; batch-size=&quot;10&quot;&amp;gt;...&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;With this &lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; specified, Hibernate will now execute queries on demand when need to access the
          uninitialized proxy, as above, but the difference is that instead of querying the exactly proxy entity that
          being accessed, it will query more Person&apos;s owner at once, so, when accessing other person&apos;s owner, it may
          already been initialized by this batch fetch with only a few ( much less than 25) queries will be executed.
      &lt;/p&gt;

        &lt;p&gt;This behavior is controlled by the &lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; and batch fetch style configuration.
            The batch fetch style configuration ( &lt;code class=&quot;literal&quot;&gt;hibernate.batch_fetch_style&lt;/code&gt; ) is a new performance
            improvement since 4.2.0, there are 3 different strategies provided, which is &lt;code class=&quot;literal&quot;&gt;legacy&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;padded&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;dynamic&lt;/code&gt;.
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;LEGACY&lt;/code&gt;&lt;/p&gt;
                &lt;p&gt;The legacy algorithm where we keep a set of pre-built batch sizes based on
                    &lt;code class=&quot;classname&quot;&gt;org.hibernate.internal.util.collections.ArrayHelper#getBatchSizes&lt;/code&gt;.
                    Batches are performed using the next-smaller pre-built batch size from the number of existing batchable identifiers.&lt;/p&gt;
                &lt;p&gt;In the above example, with a batch-size setting of 25 the pre-built batch sizes would be [25, 12, 10, 9, 8, 7, .., 1].&lt;/p&gt;
                &lt;p&gt;And since there are 25 persons&apos; owner to be initialized, then only one query will be executed using these 25 owners&apos; identifier.&lt;/p&gt;
                &lt;p&gt;But in another case, suppose there are only 24 persons, there will be 3 queries (12, 10, 2) will
                    be executed to go through all person&apos;s owner, and the query will looks like :
                &lt;/p&gt;
                &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;select * from owner where id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      select * from owner where id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      select * from owner where id in (?, ?)
                &lt;/pre&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;PADDED&lt;/code&gt;&lt;/p&gt;
                &lt;p&gt; This is kind of similar with the legacy algorithm, it uses the pre-build batch sizes based on same
                &lt;code class=&quot;classname&quot;&gt;org.hibernate.internal.util.collections.ArrayHelper#getBatchSizes&lt;/code&gt;. The difference
                is that here hibernate will use the next-bigger batch size and pads the extra  identifier placeholders.&lt;/p&gt;
                &lt;p&gt;So, using the same example above, initializing 25 persons the query would be same as above,
                    only 1 query will be executed to batch query all the owners.
                &lt;/p&gt;
                &lt;p&gt;However, the attempt to batch load 24 owners would result just a single batch of size 25, the
                    identifiers to load would be &quot;padded&quot; (aka, repeated) to make up the difference.
                &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;DYNAMIC&lt;/code&gt;&lt;/p&gt;
                &lt;p&gt;Dynamically builds its SQL based on the actual number of available ids.  Does still limit to the batch-size defined on the entity.&lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;


        &lt;p&gt;You can also enable batch fetching of collections. For example, if
      each &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; has a lazy collection of
      &lt;code class=&quot;literal&quot;&gt;Cat&lt;/code&gt;s, and 10 persons are currently loaded in the
      &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, iterating through all persons will generate
      10 &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;s, one for every call to
      &lt;code class=&quot;literal&quot;&gt;getCats()&lt;/code&gt;. If you enable batch fetching for the
      &lt;code class=&quot;literal&quot;&gt;cats&lt;/code&gt; collection in the mapping of
      &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;, Hibernate can pre-fetch collections:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;set name=&quot;cats&quot; batch-size=&quot;3&quot;&amp;gt;
        ...
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;For example, with a &lt;code class=&quot;literal&quot;&gt;batch-size&lt;/code&gt; of 3 and using &lt;code class=&quot;literal&quot;&gt;legacy&lt;/code&gt; batch style,
      Hibernate will load 3, 3, 3, 1 collections in four &lt;code class=&quot;literal&quot;&gt;SELECT&lt;/code&gt;s. Again, the value
      of the attribute depends on the expected number of uninitialized
      collections in a particular &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Batch fetching of collections is particularly useful if you have a
      nested tree of items, i.e. the typical bill-of-materials pattern.
      However, a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;nested set&lt;/em&gt;&lt;/span&gt; or a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;materialized
      path&lt;/em&gt;&lt;/span&gt; might be a better option for read-mostly trees.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.6. Using subselect fetching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-subselect&quot;/&gt;20.1.6. Using subselect fetching&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If one lazy collection or single-valued proxy has to be fetched,
      Hibernate will load all of them, re-running the original query in a
      subselect. This works in the same way as batch-fetching but without the
      piecemeal loading.&lt;/p&gt;

      
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.7. Fetch profiles&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-profiles&quot;/&gt;20.1.7. Fetch profiles&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Another way to affect the fetching strategy for loading associated
      objects is through something called a fetch profile, which is a named
      configuration associated with the
      &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.SessionFactory&lt;/code&gt; but enabled,
      by name, on the &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;.
      Once enabled on a &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt;,
      the fetch profile will be in affect for that
      &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.Session&lt;/code&gt; until it is
      explicitly disabled.&lt;/p&gt;

      &lt;p&gt;So what does that mean? Well lets explain that by way of an
      example which show the different available approaches to configure a
      fetch profile:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9018&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.1. Specifying a fetch profile using
        &lt;code class=&quot;classname&quot;&gt;@FetchProfile&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Entity
@FetchProfile(name = &quot;customer-with-orders&quot;, fetchOverrides = {
   @FetchProfile.FetchOverride(entity = Customer.class, association = &quot;orders&quot;, mode = FetchMode.JOIN)
})
public class Customer {
   @Id
   @GeneratedValue
   private long id;

   private String name;

   private long customerNumber;

   @OneToMany
   private Set&amp;lt;Order&amp;gt; orders;

   // standard getter/setter
   ...
}&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9022&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.2. Specifying a fetch profile using
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;fetch-profile&amp;gt;&lt;/code&gt; outside
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; node&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    &amp;lt;class name=&quot;Customer&quot;&amp;gt;
        ...
        &amp;lt;set name=&quot;orders&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;cust_id&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Order&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;
    &amp;lt;class name=&quot;Order&quot;&amp;gt;
        ...
    &amp;lt;/class&amp;gt;
    &amp;lt;fetch-profile name=&quot;customer-with-orders&quot;&amp;gt;
        &amp;lt;fetch entity=&quot;Customer&quot; association=&quot;orders&quot; style=&quot;join&quot;/&amp;gt;
    &amp;lt;/fetch-profile&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9027&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.3. Specifying a fetch profile using
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;fetch-profile&amp;gt;&lt;/code&gt; inside
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;class&amp;gt;&lt;/code&gt; node&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
    &amp;lt;class name=&quot;Customer&quot;&amp;gt;
        ...
        &amp;lt;set name=&quot;orders&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;cust_id&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Order&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
        &amp;lt;fetch-profile name=&quot;customer-with-orders&quot;&amp;gt;
            &amp;lt;fetch association=&quot;orders&quot; style=&quot;join&quot;/&amp;gt;
        &amp;lt;/fetch-profile&amp;gt;
    &amp;lt;/class&amp;gt;
    &amp;lt;class name=&quot;Order&quot;&amp;gt;
        ...
    &amp;lt;/class&amp;gt;
&amp;lt;/hibernate-mapping&amp;gt;
&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Now normally when you get a reference to a particular customer,
      that customer&apos;s set of orders will be lazy meaning we will not yet have
      loaded those orders from the database. Normally this is a good thing.
      Now lets say that you have a certain use case where it is more efficient
      to load the customer and their orders together. One way certainly is to
      use &quot;dynamic fetching&quot; strategies via an HQL or criteria queries. But
      another option is to use a fetch profile to achieve that. The following
      code will load both the customer &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;and&lt;/em&gt;&lt;/span&gt;their
      orders:&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9034&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.4. Activating a fetch profile for a given
        &lt;code class=&quot;classname&quot;&gt;Session&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Session session = ...;
session.enableFetchProfile( &quot;customer-with-orders&quot; );  // name matches from mapping
Customer customer = (Customer) session.get( Customer.class, customerId );
&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@FetchProfile &lt;/code&gt;definitions are global and
        it does not matter on which class you place them. You can place the
        &lt;code class=&quot;classname&quot;&gt;@FetchProfile&lt;/code&gt; annotation either onto a class or
        package (package-info.java). In order to define multiple fetch
        profiles for the same class or package
        &lt;code class=&quot;classname&quot;&gt;@FetchProfiles&lt;/code&gt; can be used.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;
          Currently only join style fetch profiles are supported, but they plan is to support additional styles. See
          &lt;a class=&quot;ulink&quot; href=&quot;http://opensource.atlassian.com/projects/hibernate/browse/HHH-3414&quot;&gt;HHH-3414&lt;/a&gt;
          for details.
      &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.1.8. Using lazy property fetching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-fetching-lazyproperties&quot;/&gt;20.1.8. Using lazy property fetching&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate supports the lazy fetching of individual properties.
      This optimization technique is also known as &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;fetch
      groups&lt;/em&gt;&lt;/span&gt;. Please note that this is mostly a marketing feature;
      optimizing row reads is much more important than optimization of column
      reads. However, only loading some properties of a class could be useful
      in extreme cases. For example, when legacy tables have hundreds of
      columns and the data model cannot be improved.&lt;/p&gt;

      &lt;p&gt;To enable lazy property loading, set the &lt;code class=&quot;literal&quot;&gt;lazy&lt;/code&gt;
      attribute on your particular property mappings:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Document&quot;&amp;gt;
       &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    &amp;lt;property name=&quot;name&quot; not-null=&quot;true&quot; length=&quot;50&quot;/&amp;gt;
    &amp;lt;property name=&quot;summary&quot; not-null=&quot;true&quot; length=&quot;200&quot; lazy=&quot;true&quot;/&amp;gt;
    &amp;lt;property name=&quot;text&quot; not-null=&quot;true&quot; length=&quot;2000&quot; lazy=&quot;true&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;

      &lt;p&gt;Lazy property loading requires buildtime bytecode instrumentation.
      If your persistent classes are not enhanced, Hibernate will ignore lazy
      property settings and return to immediate fetching.&lt;/p&gt;

      &lt;p&gt;For bytecode instrumentation, use the following Ant task:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;target name=&quot;instrument&quot; depends=&quot;compile&quot;&amp;gt;
    &amp;lt;taskdef name=&quot;instrument&quot; classname=&quot;org.hibernate.tool.instrument.InstrumentTask&quot;&amp;gt;
        &amp;lt;classpath path=&quot;${jar.path}&quot;/&amp;gt;
        &amp;lt;classpath path=&quot;${classes.dir}&quot;/&amp;gt;
        &amp;lt;classpath refxml:id=&quot;lib.class.path&quot;/&amp;gt;
    &amp;lt;/taskdef&amp;gt;

    &amp;lt;instrument verbose=&quot;true&quot;&amp;gt;
        &amp;lt;fileset dir=&quot;${testclasses.dir}/org/hibernate/auction/model&quot;&amp;gt;
            &amp;lt;include name=&quot;*.class&quot;/&amp;gt;
        &amp;lt;/fileset&amp;gt;
    &amp;lt;/instrument&amp;gt;
&amp;lt;/target&amp;gt;&lt;/pre&gt;

      &lt;p&gt;A different way of avoiding unnecessary column reads, at least for
      read-only transactions, is to use the projection features of HQL or
      Criteria queries. This avoids the need for buildtime bytecode processing
      and is certainly a preferred solution.&lt;/p&gt;

      &lt;p&gt;You can force the usual eager fetching of properties using
      &lt;code class=&quot;literal&quot;&gt;fetch all properties&lt;/code&gt; in HQL.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;20.2. The Second Level Cache&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache&quot;/&gt;20.2. The Second Level Cache&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;A Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; is a transaction-level cache
    of persistent data. It is possible to configure a cluster or JVM-level
    (&lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;-level) cache on a class-by-class and
    collection-by-collection basis. You can even plug in a clustered cache. Be
    aware that caches are not aware of changes made to the persistent store by
    another application. They can, however, be configured to regularly expire
    cached data.&lt;/p&gt;

    &lt;p&gt;You have the option to tell Hibernate which caching
    implementation to use by specifying the name of a class that implements
    &lt;code class=&quot;literal&quot;&gt;org.hibernate.cache.spi.CacheProvider&lt;/code&gt; using the property
    &lt;code class=&quot;literal&quot;&gt;hibernate.cache.provider_class&lt;/code&gt;. Hibernate is bundled
    with a number of built-in integrations with the open-source cache
    providers that are listed in &lt;a class=&quot;xref&quot; href=&quot;#cacheproviders&quot; title=&quot;Table 20.1. Cache Providers&quot;&gt;Table 20.1, âCache Providersâ&lt;/a&gt;. You can
    also implement your own and plug it in as outlined above. Note that
    versions prior to Hibernate 3.2 use EhCache as the default cache
    provider.&lt;/p&gt;

    &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;cacheproviders&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 20.1. Cache Providers&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
      

      &lt;table summary=&quot;Cache Providers&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;3*&quot; align=&quot;left&quot; class=&quot;c2&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c3&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c4&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c5&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Cache&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Provider class&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Type&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Cluster Safe&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;Query Cache Supported&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;ConcurrentHashMap (only for testing purpose, in hibernate-testing module)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.testing.cache.CachingRegionFactory&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;memory&lt;/td&gt;&lt;td align=&quot;left&quot;&gt; &lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;EHCache&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;memory, disk, transactional, clustered&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Infinispan&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.cache.infinispan.InfinispanRegionFactory&lt;/code&gt;&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;clustered (ip multicast), transactional&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes (replication or invalidation)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes (clock sync req.)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.1. Cache mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-mapping&quot;/&gt;20.2.1. Cache mappings&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;As we have done in previous chapters we are looking at the two
      different possibiltites to configure caching. First configuration via
      annotations and then via Hibernate mapping files.&lt;/p&gt;

      &lt;p&gt;By default, entities are not part of the second level cache and we
      recommend you to stick to this setting. However, you can override this
      by setting the &lt;code class=&quot;literal&quot;&gt;shared-cache-mode&lt;/code&gt; element in your
      &lt;code class=&quot;filename&quot;&gt;persistence.xml&lt;/code&gt; file or by using the
      &lt;code class=&quot;literal&quot;&gt;javax.persistence.sharedCache.mode &lt;/code&gt;property in your
      configuration. The following values are possible:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ENABLE_SELECTIVE&lt;/code&gt; (Default and recommended
          value): entities are not cached unless explicitly marked as
          cacheable.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;DISABLE_SELECTIVE&lt;/code&gt;: entities are cached
          unless explicitly marked as not cacheable.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ALL&lt;/code&gt;: all entities are always cached even if
          marked as non cacheable.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;NONE&lt;/code&gt;: no entity are cached even if marked
          as cacheable. This option can make sense to disable second-level
          cache altogether.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;The cache concurrency strategy used by default can be set globaly
      via the
      &lt;code class=&quot;literal&quot;&gt;hibernate.cache.default_cache_concurrency_strategy&lt;/code&gt;
      configuration property. The values for this property are:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;read-only&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;read-write&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;nonstrict-read-write&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;transactional&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;It is recommended to define the cache concurrency strategy per
        entity rather than using a global one. Use the
        &lt;code class=&quot;classname&quot;&gt;@org.hibernate.annotations.Cache&lt;/code&gt; annotation for
        that.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-cache-concurrency-with-cache-annotation&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.5. Definition of cache concurrency strategy via
        &lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;Entity&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cacheable&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;usage&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CacheConcurrencyStrategy&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;NONSTRICT_READ_WRITE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Forest&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Hibernate also let&apos;s you cache the content of a collection or the
      identifiers if the collection contains other entities. Use the
      &lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt; annotation on the collection
      property.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9148&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.6. Caching collections using annotations&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;JAVA&quot;&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;OneToMany&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;cascade&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;CascadeType&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;ALL&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;,&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;fetch&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_type&quot;&gt;FetchType&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_plain&quot;&gt;EAGER&lt;/span&gt;&lt;!-- &lt;br/&gt; --&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;JoinColumn&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_literal&quot;&gt;&amp;quot;CUST_ID&amp;quot;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;usage&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;CacheConcurrencyStrategy&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;NONSTRICT_READ_WRITE&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;)&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_keyword&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;SortedSet&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;java_type&quot;&gt;Ticket&lt;/span&gt;&lt;span class=&quot;java_operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;getTickets&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;{&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;java_keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;java_plain&quot;&gt;&amp;nbsp;tickets&lt;/span&gt;&lt;span class=&quot;java_separator&quot;&gt;;&lt;/span&gt;
&lt;!--  --&gt;&lt;br/&gt;&lt;span class=&quot;java_separator&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;&lt;a class=&quot;xref&quot; href=&quot;#example-cache-annotation-with-attributes&quot; title=&quot;Example 20.7. @Cache annotation with attributes&quot;&gt;Example 20.7, â&lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt; annotation with
        attributesâ&lt;/a&gt;shows
      the&lt;code class=&quot;literal&quot;&gt; @org.hibernate.annotations.Cache&lt;/code&gt; annotations with
      its attributes. It allows you to define the caching strategy and region
      of a given second level cache.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-cache-annotation-with-attributes&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.7. &lt;code class=&quot;classname&quot;&gt;@Cache&lt;/code&gt; annotation with
        attributes&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;@Cache(
    CacheConcurrencyStrategy usage();                      &lt;span class=&quot;co&quot; id=&quot;cache-hm1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;
    String region() default &quot;&quot;;                            &lt;span class=&quot;co&quot; id=&quot;cache-hm2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
    String include() default &quot;all&quot;;                        &lt;span class=&quot;co&quot; id=&quot;cache-hm3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
)&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;usage: the given cache concurrency strategy (NONE,
              READ_ONLY, NONSTRICT_READ_WRITE, READ_WRITE,
              TRANSACTIONAL)&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;region (optional): the cache region (default to the fqcn
              of the class or the fq role name of the collection)&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;include&lt;/code&gt; (optional): all to include all
              properties, non-lazy to only include non lazy properties
              (default all).&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Let&apos;s now take a look at Hibernate mapping files. There the
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt; element of a class or collection
      mapping is used to configure the second level cache. Looking at &lt;a class=&quot;xref&quot; href=&quot;#example-hibernate-cache-mapping-element&quot; title=&quot;Example 20.8. The Hibernate &amp;lt;cache&amp;gt; mapping element&quot;&gt;Example 20.8, âThe Hibernate &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt; mapping
        elementâ&lt;/a&gt; the parallels to
      anotations is obvious.&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;example-hibernate-cache-mapping-element&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.8. The Hibernate &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt; mapping
        element&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;div class=&quot;programlistingco&quot;&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;cache
    usage=&quot;transactional|read-write|nonstrict-read-write|re&lt;span class=&quot;co&quot; id=&quot;cache1&quot;&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;(1)&quot;/&gt;&lt;/span&gt;ad-only&quot;
    region=&quot;RegionName&quot;                                    &lt;span class=&quot;co&quot; id=&quot;cache2&quot;&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;(2)&quot;/&gt;&lt;/span&gt;
    include=&quot;all|non-lazy&quot;                                 &lt;span class=&quot;co&quot; id=&quot;cache3&quot;&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;(3)&quot;/&gt;&lt;/span&gt;
/&amp;gt;&lt;/pre&gt;&lt;div class=&quot;calloutlist&quot;&gt;&lt;table border=&quot;0&quot; summary=&quot;Callout list&quot;&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/1.png&quot; alt=&quot;1&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;usage&lt;/code&gt; (required) specifies the caching
              strategy: &lt;code class=&quot;literal&quot;&gt;transactional&lt;/code&gt;,
              &lt;code class=&quot;literal&quot;&gt;read-write&lt;/code&gt;,
              &lt;code class=&quot;literal&quot;&gt;nonstrict-read-write&lt;/code&gt; or
              &lt;code class=&quot;literal&quot;&gt;read-only&lt;/code&gt;&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/2.png&quot; alt=&quot;2&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;region&lt;/code&gt; (optional: defaults to the class
              or collection role name): specifies the name of the second level
              cache region&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td width=&quot;5%&quot; valign=&quot;top&quot; align=&quot;left&quot;&gt;&lt;p&gt;&lt;img src=&quot;images/callouts/3.png&quot; alt=&quot;3&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/td&gt;&lt;td valign=&quot;top&quot; align=&quot;left&quot;&gt;
              &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;include&lt;/code&gt; (optional: defaults to
              &lt;code class=&quot;literal&quot;&gt;all&lt;/code&gt;) &lt;code class=&quot;literal&quot;&gt;non-lazy&lt;/code&gt;: specifies
              that properties of the entity mapped with
              &lt;code class=&quot;literal&quot;&gt;lazy=&quot;true&quot;&lt;/code&gt; cannot be cached when
              attribute-level lazy fetching is enabled&lt;/p&gt;
            &lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;p&gt;Alternatively to &lt;code class=&quot;literal&quot;&gt;&amp;lt;cache&amp;gt;&lt;/code&gt;, you can use
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;class-cache&amp;gt;&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;collection-cache&amp;gt;&lt;/code&gt; elements in
      &lt;code class=&quot;literal&quot;&gt;hibernate.cfg.xml&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Let&apos;s now have a closer look at the different usage
      strategies&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.2. Strategy: read only&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-readonly&quot;/&gt;20.2.2. Strategy: read only&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If your application needs to read, but not modify, instances of a
      persistent class, a &lt;code class=&quot;literal&quot;&gt;read-only&lt;/code&gt; cache can be used. This
      is the simplest and optimal performing strategy. It is even safe for use
      in a cluster.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.3. Strategy: read/write&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-readwrite&quot;/&gt;20.2.3. Strategy: read/write&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If the application needs to update data, a
      &lt;code class=&quot;literal&quot;&gt;read-write&lt;/code&gt; cache might be appropriate. This cache
      strategy should never be used if serializable transaction isolation
      level is required. If the cache is used in a JTA environment, you must
      specify the property
      &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt; and naming
      a strategy for obtaining the JTA &lt;code class=&quot;literal&quot;&gt;TransactionManager&lt;/code&gt;.
      In other environments, you should ensure that the transaction is
      completed when &lt;code class=&quot;literal&quot;&gt;Session.close()&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;Session.disconnect()&lt;/code&gt; is called. If you want to use
      this strategy in a cluster, you should ensure that the underlying cache
      implementation supports locking. The built-in cache providers
      &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;do not&lt;/em&gt;&lt;/span&gt; support locking.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.4. Strategy: nonstrict read/write&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-nonstrict&quot;/&gt;20.2.4. Strategy: nonstrict read/write&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If the application only occasionally needs to update data (i.e. if
      it is extremely unlikely that two transactions would try to update the
      same item simultaneously), and strict transaction isolation is not
      required, a &lt;code class=&quot;literal&quot;&gt;nonstrict-read-write&lt;/code&gt; cache might be
      appropriate. If the cache is used in a JTA environment, you must specify
      &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt;. In other
      environments, you should ensure that the transaction is completed when
      &lt;code class=&quot;literal&quot;&gt;Session.close()&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;Session.disconnect()&lt;/code&gt; is called.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.5. Strategy: transactional&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-transactional&quot;/&gt;20.2.5. Strategy: transactional&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;transactional&lt;/code&gt; cache strategy provides
      support for fully transactional cache providers such as JBoss TreeCache.
      Such a cache can only be used in a JTA environment and you must specify
      &lt;code class=&quot;literal&quot;&gt;hibernate.transaction.manager_lookup_class&lt;/code&gt;.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.2.6. Cache-provider/concurrency-strategy compatibility&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-cache-compat-matrix&quot;/&gt;20.2.6. Cache-provider/concurrency-strategy compatibility&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;None of the cache providers support all of the cache concurrency
        strategies.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;The following table shows which providers are compatible with
      which concurrency strategies.&lt;/p&gt;

      &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e9236&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 20.2. Cache Concurrency Strategy Support&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
        

        &lt;table summary=&quot;Cache Concurrency Strategy Support&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c1&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c2&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c3&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c4&quot;/&gt;&lt;col width=&quot;1*&quot; align=&quot;left&quot; class=&quot;c5&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;Cache&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;read-only&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;nonstrict-read-write&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;read-write&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;transactional&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;ConcurrentHashMap (not intended for production use)&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt; &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;EHCache&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;Infinispan&lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;td align=&quot;left&quot;&gt; &lt;/td&gt;&lt;td align=&quot;left&quot;&gt; &lt;/td&gt;&lt;td align=&quot;left&quot;&gt;yes&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;20.3. Managing the caches&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-sessioncache&quot;/&gt;20.3. Managing the caches&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Whenever you pass an object to &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;saveOrUpdate()&lt;/code&gt;, and
    whenever you retrieve an object using &lt;code class=&quot;literal&quot;&gt;load()&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;get()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;list()&lt;/code&gt;,
    &lt;code class=&quot;literal&quot;&gt;iterate()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;scroll()&lt;/code&gt;, that object
    is added to the internal cache of the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;When &lt;code class=&quot;literal&quot;&gt;flush()&lt;/code&gt; is subsequently called, the state of
    that object will be synchronized with the database. If you do not want
    this synchronization to occur, or if you are processing a huge number of
    objects and need to manage memory efficiently, the
    &lt;code class=&quot;literal&quot;&gt;evict()&lt;/code&gt; method can be used to remove the object and its
    collections from the first-level cache.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9285&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.9. Explcitly evicting a cached instance from the first level cache
      using &lt;code class=&quot;methodname&quot;&gt;Session.evict()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;ScrollableResult cats = sess.createQuery(&quot;from Cat as cat&quot;).scroll(); //a huge result set
while ( cats.next() ) {
    Cat cat = (Cat) cats.get(0);
    doSomethingWithACat(cat);
    sess.evict(cat);
}&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; also provides a
    &lt;code class=&quot;literal&quot;&gt;contains()&lt;/code&gt; method to determine if an instance belongs
    to the session cache.&lt;/p&gt;

    &lt;p&gt;To evict all objects from the session cache, call
    &lt;code class=&quot;literal&quot;&gt;Session.clear()&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;For the second-level cache, there are methods defined on
    &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; for evicting the cached state of an
    instance, entire class, collection instance or entire collection
    role.&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9296&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.10. Second-level cache eviction via
      &lt;code class=&quot;methodname&quot;&gt;SessionFactoty.evict() &lt;/code&gt;and
      &lt;code class=&quot;methodname&quot;&gt;SessionFacyory.evictCollection()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;sessionFactory.evict(Cat.class, catId); //evict a particular Cat
sessionFactory.evict(Cat.class);  //evict all Cats
sessionFactory.evictCollection(&quot;Cat.kittens&quot;, catId); //evict a particular collection of kittens
sessionFactory.evictCollection(&quot;Cat.kittens&quot;); //evict all kitten collections&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;The &lt;code class=&quot;literal&quot;&gt;CacheMode&lt;/code&gt; controls how a particular session
    interacts with the second-level cache:&lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CacheMode.NORMAL&lt;/code&gt;: will read items from and
        write items to the second-level cache&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CacheMode.GET&lt;/code&gt;: will read items from the
        second-level cache. Do not write to the second-level cache except when
        updating data&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CacheMode.PUT&lt;/code&gt;: will write items to the
        second-level cache. Do not read from the second-level cache&lt;/p&gt;
      &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
        &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;CacheMode.REFRESH&lt;/code&gt;: will write items to the
        second-level cache. Do not read from the second-level cache. Bypass
        the effect of &lt;code class=&quot;literal&quot;&gt;hibernate.cache.use_minimal_puts&lt;/code&gt;
        forcing a refresh of the second-level cache for all items read from
        the database&lt;/p&gt;
      &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;To browse the contents of a second-level or query cache region, use
    the &lt;code class=&quot;literal&quot;&gt;Statistics&lt;/code&gt; API:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9319&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.11. Browsing the second-level cache entries via the
      &lt;code class=&quot;classname&quot;&gt;Statistics&lt;/code&gt; API&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Map cacheEntries = sessionFactory.getStatistics()
        .getSecondLevelCacheStatistics(regionName)
        .getEntries();&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

    &lt;p&gt;You will need to enable statistics and, optionally, force Hibernate
    to keep the cache entries in a more readable format:&lt;/p&gt;

    &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9324&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 20.12. Enabling Hibernate statistics&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
      

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.generate_statistics true
hibernate.cache.use_structured_entries true&lt;/pre&gt;
    &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;20.4. The Query Cache&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-querycache&quot;/&gt;20.4. The Query Cache&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Query result sets can also be cached. This is only useful for
    queries that are run frequently with the same parameters.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.4.1. Enabling query caching&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-querycache-enable&quot;/&gt;20.4.1. Enabling query caching&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Caching of query results introduces some overhead in terms of your
      applications normal transactional processing. For example, if you cache
      results of a query against Person Hibernate will need to keep track of
      when those results should be invalidated because changes have been
      committed against Person. That, coupled with the fact that most
      applications simply gain no benefit from caching query results, leads
      Hibernate to disable caching of query results by default. To use query
      caching, you will first need to enable the query cache:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;hibernate.cache.use_query_cache true&lt;/pre&gt;

      &lt;p&gt;This setting creates two new cache regions: &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.cache.internal.StandardQueryCache&lt;/code&gt;,
            holding the cached query results&lt;/p&gt;
          &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;org.hibernate.cache.spi.UpdateTimestampsCache&lt;/code&gt;,
            holding timestamps of the most recent updates to queryable tables.
            These are used to validate the results as they are served from the
            query cache.&lt;/p&gt;
          &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
        &lt;p&gt;If you configure your underlying cache implementation to use
        expiry or timeouts is very important that the cache timeout of the
        underlying cache region for the UpdateTimestampsCache be set to a
        higher value than the timeouts of any of the query caches. In fact, we
        recommend that the the UpdateTimestampsCache region not be configured
        for expiry at all. Note, in particular, that an LRU cache expiry
        policy is never appropriate.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;As mentioned above, most queries do not benefit from caching or
      their results. So by default, individual queries are not cached even
      after enabling query caching. To enable results caching for a particular
      query, call &lt;code class=&quot;literal&quot;&gt;org.hibernate.Query.setCacheable(true)&lt;/code&gt;.
      This call allows the query to look for existing cache results or add its
      results to the cache when it is executed.&lt;/p&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;The query cache does not cache the state of the actual entities
        in the cache; it caches only identifier values and results of value
        type. For this reaso, the query cache should always be used in
        conjunction with the second-level cache for those entities expected to
        be cached as part of a query result cache (just as with collection
        caching).&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.4.2. Query cache regions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-querycache-regions&quot;/&gt;20.4.2. Query cache regions&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If you require fine-grained control over query cache expiration
      policies, you can specify a named cache region for a particular query by
      calling &lt;code class=&quot;literal&quot;&gt;Query.setCacheRegion()&lt;/code&gt;.&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;List blogs = sess.createQuery(&quot;from Blog blog where blog.blogger = :blogger&quot;)
        .setEntity(&quot;blogger&quot;, blogger)
        .setMaxResults(15)
        .setCacheable(true)
        .setCacheRegion(&quot;frontpages&quot;)
        .list();&lt;/pre&gt;

      &lt;p&gt;If you want to force the query cache to refresh one of its regions
      (disregard any cached results it finds there) you can use
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.Query.setCacheMode(CacheMode.REFRESH)&lt;/code&gt;.
      In conjunction with the region you have defined for the given query,
      Hibernate will selectively force the results cached in that particular
      region to be refreshed. This is particularly useful in cases where
      underlying data may have been updated via a separate process and is a
      far more efficient alternative to bulk eviction of the region via
      &lt;code class=&quot;literal&quot;&gt;org.hibernate.SessionFactory.evictQueries()&lt;/code&gt;.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&quot;section&quot; title=&quot;20.5. Bytecode Enhancement&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;bytecode-enhancement&quot;/&gt;20.5. Bytecode Enhancement&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      
      &lt;p&gt;Hibernate internally needs an entry ( &lt;code class=&quot;classname&quot;&gt;org.hibernate.engine.spi.EntityEntry&lt;/code&gt; ) to tell
          the current state of an object with respect to its persistent state, when the object is associated with a
          &lt;code class=&quot;classname&quot;&gt;Session&lt;/code&gt;. However, maintaining this association was kind of heavy operation due to lots of
          other rules must by applied, since 4.2.0, there is a new improvement designed for this purpose, which will reduce
          session-related memory and CPU overloads.
      &lt;/p&gt;
      &lt;p&gt;Basically, the idea is, instead of having a customized ( kind of heavy and which was usually identified as hotspot )
          map to do the look up, we change it to &lt;/p&gt;
      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;EntityEntry entry = (ManagedEntity)entity.$$_hibernate_getEntityEntry();
&lt;/pre&gt;

      &lt;p&gt;There are three ways to get benefits from this new improvement:&lt;/p&gt;

      &lt;div class=&quot;section&quot; title=&quot;20.5.1. Implementing org.hibernate.engine.spi.ManagedEntity interface&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-impl-interface&quot;/&gt;20.5.1. Implementing &lt;code class=&quot;classname&quot;&gt;org.hibernate.engine.spi.ManagedEntity&lt;/code&gt; interface&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
         
         &lt;p&gt;An entity can choose to implement this interface by itself, then it is the entity&apos;s responsibility to maintain
         the bi-association that essentially provides access to information about an instance&apos;s association to a
         Session/EntityManager.
         More info about &lt;code class=&quot;classname&quot;&gt;org.hibernate.engine.spi.ManagedEntity&lt;/code&gt; please find from its javadoc.
         &lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;20.5.2. Runtime instrument&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-impl-interface-by-wrapper&quot;/&gt;20.5.2. Runtime instrument&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          
          &lt;p&gt;Sometimes, you probably don&apos;t want to implement an intrusive interface, maybe due to portable concern,
          which is fine and Hibernate will take care of this internally with a wrapper class which implements that interface,
          and also an internal cache that maps this entity instance and the wrapper together.&lt;/p&gt;

          &lt;p&gt;Obviously, this is the easiest way to choose, since it doesn&apos;t require any change of the project source code,
          but it also cost more memory and CUP usage, comparing to the first one.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div class=&quot;section&quot; title=&quot;20.5.3. Build-time instrument&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-buildtime-instrument&quot;/&gt;20.5.3. Build-time instrument&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          
          &lt;p&gt;Besides the above two approaches, Hibernate also provides a 
          third choice which is build time bytecode enhancement. Applications 
          can use enhanced entity classes, annotated with either &lt;code class=&quot;classname&quot;&gt;javax.persistence.Entity&lt;/code&gt; 
          or composite &lt;code class=&quot;classname&quot;&gt;javax.persistence.Embeddable&lt;/code&gt;.

          &lt;/p&gt;&lt;div class=&quot;section&quot; title=&quot;1. Ant Task&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-buildtime-instrument-ant&quot;/&gt;1. Ant Task&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
             
             &lt;p&gt;To use the task &lt;code class=&quot;classname&quot;&gt;org.hibernate.tool.enhance.EnhancementTask&lt;/code&gt; 
             define a taskdef and call the task, as shown below. This code uses a
             pre-defined classpathref and a property referencing the compiled classes
             directory.
             &lt;/p&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;taskdef name=&quot;enhance&quot; classname=&quot;org.hibernate.tool.enhance.EnhancementTask&quot; classpathref=&quot;enhancement.classpath&quot; /&amp;gt;
&amp;lt;enhance&amp;gt;
    &amp;lt;fileset dir=&quot;${ejb-classes}/org/hibernate/auction/model&quot; includes=&quot;**/*.class&quot;/&amp;gt;
&amp;lt;/enhance&amp;gt;&lt;/pre&gt;&lt;p&gt;
             &lt;/p&gt;
             &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
              &lt;p&gt;The EnhancementTask is intended as a total replacement for &lt;a class=&quot;link&quot; href=&quot;#performance-fetching-lazyproperties&quot; title=&quot;20.1.8. Using lazy property fetching&quot;&gt;InstrumentTask&lt;/a&gt;.
              Further, it is also incompatible with &lt;a class=&quot;link&quot; href=&quot;#performance-fetching-lazyproperties&quot; title=&quot;20.1.8. Using lazy property fetching&quot;&gt;InstrumentTask&lt;/a&gt;, so any existing instrumented classes
              will need to be built from source again.&lt;/p&gt;
             &lt;/div&gt;
          &lt;/div&gt;&lt;p&gt;
          &lt;/p&gt;&lt;div class=&quot;section&quot; title=&quot;2. Maven Plugin&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-buildtime-instrument-maven&quot;/&gt;2. Maven Plugin&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          
          &lt;p&gt;The Maven Plugin uses a Mojo descriptor to attach the Mojo to the compile 
          phase for your project.
          &lt;/p&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;dependencies&amp;gt;
   &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.hibernate.javax.persistence&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;hibernate-jpa-[SPEC-VERSION]-api&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;[IMPL-VERSION]&amp;lt;/version&amp;gt;
      &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt;
   &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;plugins&amp;gt;
&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.hibernate.orm.tooling&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;hibernate-enhance-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;VERSION&amp;lt;/version&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
      &amp;lt;goals&amp;gt;
        &amp;lt;goal&amp;gt;enhance&amp;lt;/goal&amp;gt;
      &amp;lt;/goals&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/pre&gt;&lt;p&gt;
          &lt;/p&gt;
          &lt;/div&gt;&lt;p&gt;
          &lt;/p&gt;&lt;div class=&quot;section&quot; title=&quot;3. Gradle Plugin&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h5 class=&quot;title&quot;&gt;&lt;a id=&quot;entityentry-lookup-buildtime-instrument-gradle&quot;/&gt;3. Gradle Plugin&lt;/h5&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
          
          &lt;p&gt;The Gradle plugin adds an enhance task using the output directory of 
          the compile task as the source location of entity class files to enhance.
          &lt;/p&gt;&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;apply plugin: &apos;java&apos;
apply plugin: &apos;maven&apos;
apply plugin: &apos;enhance&apos;
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath &apos;org.hibernate:hibernate-gradle-plugin:VERSION&apos;
    }
}
dependencies {
   compile group: &apos;org.hibernate.javax.persistence&apos;, name: &apos;hibernate-jpa-[SPEC-VERSION]-api&apos;, version: &apos;[IMPL-VERSION]&apos;
   compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-gradle-plugin&apos;, version: &apos;VERSION&apos;
}
          &lt;/pre&gt;&lt;p&gt;
          &lt;/p&gt;
          &lt;/div&gt;&lt;p&gt;
          &lt;/p&gt;
      &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class=&quot;section&quot; title=&quot;20.6. Understanding Collection performance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-collections&quot;/&gt;20.6. Understanding Collection performance&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;In the previous sections we have covered collections and their
    applications. In this section we explore some more issues in relation to
    collections at runtime.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.6.1. Taxonomy&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-collections-taxonomy&quot;/&gt;20.6.1. Taxonomy&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate defines three basic kinds of collections:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;collections of values&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;one-to-many associations&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;many-to-many associations&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;This classification distinguishes the various table and foreign
      key relationships but does not tell us quite everything we need to know
      about the relational model. To fully understand the relational structure
      and performance characteristics, we must also consider the structure of
      the primary key that is used by Hibernate to update or delete collection
      rows. This suggests the following classification:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;indexed collections&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;sets&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;bags&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;All indexed collections (maps, lists, and arrays) have a primary
      key consisting of the &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;index&amp;gt;&lt;/code&gt; columns. In this case, collection
      updates are extremely efficient. The primary key can be efficiently
      indexed and a particular row can be efficiently located when Hibernate
      tries to update or delete it.&lt;/p&gt;

      &lt;p&gt;Sets have a primary key consisting of
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt; and element columns. This can be less
      efficient for some types of collection element, particularly composite
      elements or large text or binary fields, as the database may not be able
      to index a complex primary key as efficiently. However, for one-to-many
      or many-to-many associations, particularly in the case of synthetic
      identifiers, it is likely to be just as efficient. If you want
      &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; to actually create the primary key of a
      &lt;code class=&quot;literal&quot;&gt;&amp;lt;set&amp;gt;&lt;/code&gt;, you must declare all columns as
      &lt;code class=&quot;literal&quot;&gt;not-null=&quot;true&quot;&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;&amp;lt;idbag&amp;gt;&lt;/code&gt; mappings define a surrogate key,
      so they are efficient to update. In fact, they are the best case.&lt;/p&gt;

      &lt;p&gt;Bags are the worst case since they permit duplicate element values
      and, as they have no index column, no primary key can be defined.
      Hibernate has no way of distinguishing between duplicate rows. Hibernate
      resolves this problem by completely removing in a single
      &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; and recreating the collection whenever it
      changes. This can be inefficient.&lt;/p&gt;

      &lt;p&gt;For a one-to-many association, the &quot;primary key&quot; may not be the
      physical primary key of the database table. Even in this case, the above
      classification is still useful. It reflects how Hibernate &quot;locates&quot;
      individual rows of the collection.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.6.2. Lists, maps, idbags and sets are the most efficient collections to update&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-collections-mostefficientupdate&quot;/&gt;20.6.2. Lists, maps, idbags and sets are the most efficient collections
      to update&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;From the discussion above, it should be clear that indexed
      collections and sets allow the most efficient operation in terms of
      adding, removing and updating elements.&lt;/p&gt;

      &lt;p&gt;There is, arguably, one more advantage that indexed collections
      have over sets for many-to-many associations or collections of values.
      Because of the structure of a &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt;, Hibernate does not
      &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; a row when an element is &quot;changed&quot;. Changes to
      a &lt;code class=&quot;literal&quot;&gt;Set&lt;/code&gt; always work via &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; and
      &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; of individual rows. Once again, this
      consideration does not apply to one-to-many associations.&lt;/p&gt;

      &lt;p&gt;After observing that arrays cannot be lazy, you can conclude that
      lists, maps and idbags are the most performant (non-inverse) collection
      types, with sets not far behind. You can expect sets to be the most
      common kind of collection in Hibernate applications. This is because the
      &quot;set&quot; semantics are most natural in the relational model.&lt;/p&gt;

      &lt;p&gt;However, in well-designed Hibernate domain models, most
      collections are in fact one-to-many associations with
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;. For these associations, the update is
      handled by the many-to-one end of the association, and so considerations
      of collection update performance simply do not apply.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.6.3. Bags and lists are the most efficient inverse collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-collections-mostefficentinverse&quot;/&gt;20.6.3. Bags and lists are the most efficient inverse collections&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;There is a particular case, however, in which bags, and also
      lists, are much more performant than sets. For a collection with
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;, the standard bidirectional
      one-to-many relationship idiom, for example, we can add elements to a
      bag or list without needing to initialize (fetch) the bag elements. This
      is because, unlike a &lt;code class=&quot;literal&quot;&gt;set&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;Collection.add()&lt;/code&gt; or
      &lt;code class=&quot;literal&quot;&gt;Collection.addAll()&lt;/code&gt; must always return true for a bag
      or &lt;code class=&quot;literal&quot;&gt;List&lt;/code&gt;. This can make the following common code much
      faster:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) sess.load(Parent.class, id);
Child c = new Child();
c.setParent(p);
p.getChildren().add(c);  //no need to fetch the collection!
sess.flush();&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.6.4. One shot delete&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-collections-oneshotdelete&quot;/&gt;20.6.4. One shot delete&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Deleting collection elements one by one can sometimes be extremely
      inefficient. Hibernate knows not to do that in the case of an
      newly-empty collection (if you called &lt;code class=&quot;literal&quot;&gt;list.clear()&lt;/code&gt;,
      for example). In this case, Hibernate will issue a single
      &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt;.&lt;/p&gt;

      &lt;p&gt;Suppose you added a single element to a collection of size twenty
      and then remove two elements. Hibernate will issue one
      &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; statement and two &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt;
      statements, unless the collection is a bag. This is certainly
      desirable.&lt;/p&gt;

      &lt;p&gt;However, suppose that we remove eighteen elements, leaving two and
      then add thee new elements. There are two possible ways to
      proceed&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;delete eighteen rows one by one and then insert three
          rows&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;remove the whole collection in one SQL
          &lt;code class=&quot;literal&quot;&gt;DELETE&lt;/code&gt; and insert all five current elements one
          by one&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Hibernate cannot know that the second option is probably quicker.
      It would probably be undesirable for Hibernate to be that intuitive as
      such behavior might confuse database triggers, etc.&lt;/p&gt;

      &lt;p&gt;Fortunately, you can force this behavior (i.e. the second
      strategy) at any time by discarding (i.e. dereferencing) the original
      collection and returning a newly instantiated collection with all the
      current elements.&lt;/p&gt;

      &lt;p&gt;One-shot-delete does not apply to collections mapped
      &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;20.7. Monitoring performance&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-monitoring&quot;/&gt;20.7. Monitoring performance&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Optimization is not much use without monitoring and access to
    performance numbers. Hibernate provides a full range of figures about its
    internal operations. Statistics in Hibernate are available per
    &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.7.1. Monitoring a SessionFactory&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-monitoring-sf&quot;/&gt;20.7.1. Monitoring a SessionFactory&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;You can access &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; metrics in two
      ways. Your first option is to call
      &lt;code class=&quot;literal&quot;&gt;sessionFactory.getStatistics()&lt;/code&gt; and read or display
      the &lt;code class=&quot;literal&quot;&gt;Statistics&lt;/code&gt; yourself.&lt;/p&gt;

      &lt;p&gt;Hibernate can also use JMX to publish metrics if you enable the
      &lt;code class=&quot;literal&quot;&gt;StatisticsService&lt;/code&gt; MBean. You can enable a single
      MBean for all your &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt; or one per factory.
      See the following code for minimalistic configuration examples:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// MBean service registration for a specific SessionFactory
Hashtable tb = new Hashtable();
tb.put(&quot;type&quot;, &quot;statistics&quot;);
tb.put(&quot;sessionFactory&quot;, &quot;myFinancialApp&quot;);
ObjectName on = new ObjectName(&quot;hibernate&quot;, tb); // MBean object name

StatisticsService stats = new StatisticsService(); // MBean implementation
stats.setSessionFactory(sessionFactory); // Bind the stats to a SessionFactory
server.registerMBean(stats, on); // Register the Mbean on the server&lt;/pre&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;// MBean service registration for all SessionFactory&apos;s
Hashtable tb = new Hashtable();
tb.put(&quot;type&quot;, &quot;statistics&quot;);
tb.put(&quot;sessionFactory&quot;, &quot;all&quot;);
ObjectName on = new ObjectName(&quot;hibernate&quot;, tb); // MBean object name

StatisticsService stats = new StatisticsService(); // MBean implementation
server.registerMBean(stats, on); // Register the MBean on the server&lt;/pre&gt;

      &lt;p&gt;You can activate and deactivate the monitoring for a
      &lt;code class=&quot;literal&quot;&gt;SessionFactory&lt;/code&gt;:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;at configuration time, set
          &lt;code class=&quot;literal&quot;&gt;hibernate.generate_statistics&lt;/code&gt; to
          &lt;code class=&quot;literal&quot;&gt;false&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;at runtime:
          &lt;code class=&quot;literal&quot;&gt;sf.getStatistics().setStatisticsEnabled(true)&lt;/code&gt; or
          &lt;code class=&quot;literal&quot;&gt;hibernateStatsBean.setStatisticsEnabled(true)&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Statistics can be reset programmatically using the
      &lt;code class=&quot;literal&quot;&gt;clear()&lt;/code&gt; method. A summary can be sent to a logger
      (info level) using the &lt;code class=&quot;literal&quot;&gt;logSummary()&lt;/code&gt; method.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;20.7.2. Metrics&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;performance-monitoring-metrics&quot;/&gt;20.7.2. Metrics&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate provides a number of metrics, from basic information to
      more specialized information that is only relevant in certain scenarios.
      All available counters are described in the
      &lt;code class=&quot;literal&quot;&gt;Statistics&lt;/code&gt; interface API, in three categories:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Metrics related to the general &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;
          usage, such as number of open sessions, retrieved JDBC connections,
          etc.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Metrics related to the entities, collections, queries, and
          caches as a whole (aka global metrics).&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;Detailed metrics related to a particular entity, collection,
          query or cache region.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;For example, you can check the cache hit, miss, and put ratio of
      entities, collections and queries, and the average time a query needs.
      Be aware that the number of milliseconds is subject to approximation in
      Java. Hibernate is tied to the JVM precision and on some platforms this
      might only be accurate to 10 seconds.&lt;/p&gt;

      &lt;p&gt;Simple getters are used to access the global metrics (i.e. not
      tied to a particular entity, collection, cache region, etc.). You can
      access the metrics of a particular entity, collection or cache region
      through its name, and through its HQL or SQL representation for queries.
      Please refer to the &lt;code class=&quot;literal&quot;&gt;Statistics&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;EntityStatistics&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;CollectionStatistics&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;SecondLevelCacheStatistics&lt;/code&gt;, and
      &lt;code class=&quot;literal&quot;&gt;QueryStatistics&lt;/code&gt; API Javadoc for more information. The
      following code is a simple example:&lt;/p&gt;

      &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Statistics stats = HibernateUtil.sessionFactory.getStatistics();

double queryCacheHitCount  = stats.getQueryCacheHitCount();
double queryCacheMissCount = stats.getQueryCacheMissCount();
double queryCacheHitRatio =
  queryCacheHitCount / (queryCacheHitCount + queryCacheMissCount);

log.info(&quot;Query Hit ratio:&quot; + queryCacheHitRatio);

EntityStatistics entityStats =
  stats.getEntityStatistics( Cat.class.getName() );
long changes =
        entityStats.getInsertCount()
        + entityStats.getUpdateCount()
        + entityStats.getDeleteCount();
log.info(Cat.class.getName() + &quot; changed &quot; + changes + &quot;times&quot;  );&lt;/pre&gt;

      &lt;p&gt;You can work on all entities, collections, queries and region
      caches, by retrieving the list of names of entities, collections,
      queries and region caches using the following methods:
      &lt;code class=&quot;literal&quot;&gt;getQueries()&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;getEntityNames()&lt;/code&gt;,
      &lt;code class=&quot;literal&quot;&gt;getCollectionRoleNames()&lt;/code&gt;, and
      &lt;code class=&quot;literal&quot;&gt;getSecondLevelCacheRegionNames()&lt;/code&gt;.&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 21. Toolset Guide&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide&quot;/&gt;Chapter 21. Toolset Guide&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1&quot;&gt;21.1. Automatic schema generation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-2&quot;&gt;21.1.1. Customizing the schema&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-3&quot;&gt;21.1.2. Running the tool&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-4&quot;&gt;21.1.3. Properties&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-5&quot;&gt;21.1.4. Using Ant&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-6&quot;&gt;21.1.5. Incremental schema updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-7&quot;&gt;21.1.6. Using Ant for incremental schema updates&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-8&quot;&gt;21.1.7. Schema validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#toolsetguide-s1-9&quot;&gt;21.1.8. Using Ant for schema validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        Roundtrip engineering with Hibernate is possible using a set of Eclipse plugins,
        commandline tools, and Ant tasks.
    &lt;/p&gt;

    &lt;p&gt;
        &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate Tools&lt;/em&gt;&lt;/span&gt; currently include plugins for the Eclipse
        IDE as well as Ant tasks for reverse engineering of existing databases:
    &lt;/p&gt;

    &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;&lt;p&gt;
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Mapping Editor:&lt;/em&gt;&lt;/span&gt; an editor for Hibernate XML mapping files that
            supports auto-completion and syntax highlighting. It also supports semantic
            auto-completion for class names and property/field names, making it more versatile than a normal XML editor.
        &lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;&lt;p&gt;
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Console:&lt;/em&gt;&lt;/span&gt; the console is a new view in Eclipse. In addition to
            a tree overview of your console configurations, you are also provided with an interactive view
            of your persistent classes and their relationships. The console allows you to
            execute HQL queries against your database and browse the result directly in
            Eclipse.
        &lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;&lt;p&gt;
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Development Wizards:&lt;/em&gt;&lt;/span&gt; several wizards are provided with the
            Hibernate Eclipse tools. You can use a wizard to quickly generate Hibernate configuration
            (cfg.xml) files, or to reverse engineer an existing database schema
            into POJO source files and Hibernate mapping files. The reverse engineering wizard
            supports customizable templates.
        &lt;/p&gt;&lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;&lt;p&gt;

        &lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

    &lt;p&gt;
        Please refer to the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Hibernate Tools&lt;/em&gt;&lt;/span&gt; package documentation
        for more information.
    &lt;/p&gt;

    &lt;p&gt;
        However, the Hibernate main package comes bundled with an integrated tool : &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;SchemaExport&lt;/em&gt;&lt;/span&gt; aka
        &lt;code class=&quot;literal&quot;&gt;hbm2ddl&lt;/code&gt;.It can even
        be used from &quot;inside&quot; Hibernate.
    &lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;21.1. Automatic schema generation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1&quot;/&gt;21.1. Automatic schema generation&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            DDL can be generated from your mapping files by a Hibernate utility. The generated
            schema includes referential integrity constraints, primary and foreign keys, for
            entity and collection tables. Tables and sequences are also created for mapped
            identifier generators.
        &lt;/p&gt;
        
        &lt;p&gt;
            You &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;must&lt;/em&gt;&lt;/span&gt; specify a SQL &lt;code class=&quot;literal&quot;&gt;Dialect&lt;/code&gt; via the 
            &lt;code class=&quot;literal&quot;&gt;hibernate.dialect&lt;/code&gt; property when using this tool, as DDL
            is highly vendor-specific.
        &lt;/p&gt;

        &lt;p&gt;
            First, you must customize your mapping files to improve the generated schema. The next section covers schema customization.  
        &lt;/p&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.1. Customizing the schema&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-2&quot;/&gt;21.1.1. Customizing the schema&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Many Hibernate mapping elements define optional attributes named &lt;code class=&quot;literal&quot;&gt;length&lt;/code&gt;,
                &lt;code class=&quot;literal&quot;&gt;precision&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;scale&lt;/code&gt;. You can set the length, precision 
                and scale of a column with this attribute. 
                
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;zip&quot; length=&quot;5&quot;/&amp;gt;&lt;/pre&gt;
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;balance&quot; precision=&quot;12&quot; scale=&quot;2&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Some tags also accept a &lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt; attribute for generating a 
                &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint on table columns, and a &lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt; 
                attribute for generating &lt;code class=&quot;literal&quot;&gt;UNIQUE&lt;/code&gt; constraint on table columns.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;bar&quot; column=&quot;barId&quot; not-null=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;element column=&quot;serialNumber&quot; type=&quot;long&quot; not-null=&quot;true&quot; unique=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                A &lt;code class=&quot;literal&quot;&gt;unique-key&lt;/code&gt; attribute can be used to group columns in
                a single, unique key constraint.  The attribute overrides
            	the name of any generated unique key constraint.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;org&quot; column=&quot;orgId&quot; unique-key=&quot;OrgEmployeeId&quot;/&amp;gt;
&amp;lt;property name=&quot;employeeId&quot; unique-key=&quot;OrgEmployee&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                An &lt;code class=&quot;literal&quot;&gt;index&lt;/code&gt; attribute specifies the name of an index that
                will be created using the mapped column or columns. Multiple columns can be 
                grouped into the same index by simply specifying the same index name. 
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;lastName&quot; index=&quot;CustName&quot;/&amp;gt;
&amp;lt;property name=&quot;firstName&quot; index=&quot;CustName&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                A &lt;code class=&quot;literal&quot;&gt;foreign-key&lt;/code&gt; attribute can be used to override the name 
                of any generated foreign key constraint.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;bar&quot; column=&quot;barId&quot; foreign-key=&quot;FKFooBar&quot;/&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                Many mapping elements also accept a child &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element. 
                This is particularly useful for mapping multi-column types:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;name&quot; type=&quot;my.customtypes.Name&quot;/&amp;gt;
    &amp;lt;column name=&quot;last&quot; not-null=&quot;true&quot; index=&quot;bar_idx&quot; length=&quot;30&quot;/&amp;gt;
    &amp;lt;column name=&quot;first&quot; not-null=&quot;true&quot; index=&quot;bar_idx&quot; length=&quot;20&quot;/&amp;gt;
    &amp;lt;column name=&quot;initial&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;default&lt;/code&gt; attribute allows you to specify a default value for
                a column.You should assign the same value to the mapped property before
                saving a new instance of the mapped class.
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;credits&quot; type=&quot;integer&quot; insert=&quot;false&quot;&amp;gt;
    &amp;lt;column name=&quot;credits&quot; default=&quot;10&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;version name=&quot;version&quot; type=&quot;integer&quot; insert=&quot;false&quot;&amp;gt;
    &amp;lt;column name=&quot;version&quot; default=&quot;0&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;sql-type&lt;/code&gt; attribute allows the user to override the default 
                mapping of a Hibernate type to SQL datatype.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;balance&quot; type=&quot;float&quot;&amp;gt;
    &amp;lt;column name=&quot;balance&quot; sql-type=&quot;decimal(13,3)&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;
            
            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;check&lt;/code&gt; attribute allows you to specify a check constraint.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;foo&quot; type=&quot;integer&quot;&amp;gt;
    &amp;lt;column name=&quot;foo&quot; check=&quot;foo &amp;gt; 10&quot;/&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Foo&quot; table=&quot;foos&quot; check=&quot;bar &amp;lt; 100.0&quot;&amp;gt;
    ...
    &amp;lt;property name=&quot;bar&quot; type=&quot;float&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
            

	&lt;p&gt;The following table summarizes these optional attributes.&lt;/p&gt;

            &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;schemattributes-summary&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 21.1. Summary&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
                
                &lt;table summary=&quot;Summary&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;1*&quot;/&gt;&lt;col width=&quot;2.5*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Values&lt;/th&gt;&lt;th&gt;Interpretation&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;length&lt;/code&gt;&lt;/td&gt;&lt;td&gt;number&lt;/td&gt;&lt;td&gt;column length&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;precision&lt;/code&gt;&lt;/td&gt;&lt;td&gt;number&lt;/td&gt;&lt;td&gt;column decimal precision&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;scale&lt;/code&gt;&lt;/td&gt;&lt;td&gt;number&lt;/td&gt;&lt;td&gt;column decimal scale&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;not-null&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specifies that the column should be non-nullable&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;unique&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;true|false&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specifies that the column should have a unique constraint&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;index&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;index_name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specifies the name of a (multi-column) index&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;unique-key&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;unique_key_name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specifies the name of a multi-column unique constraint&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;foreign-key&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;foreign_key_name&lt;/code&gt;&lt;/td&gt;&lt;td&gt;
                                specifies the name of the foreign key constraint generated
                                for an association, for a &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-one&amp;gt;&lt;/code&gt;, 
                                &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-one&amp;gt;&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;&amp;lt;key&amp;gt;&lt;/code&gt;, 
                                or &lt;code class=&quot;literal&quot;&gt;&amp;lt;many-to-many&amp;gt;&lt;/code&gt; mapping element. Note that
                                &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt; sides will not be considered
                                by &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt;.
                            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;sql-type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;SQL column type&lt;/code&gt;&lt;/td&gt;&lt;td&gt;
                                overrides the default column type (attribute of 
                                &lt;code class=&quot;literal&quot;&gt;&amp;lt;column&amp;gt;&lt;/code&gt; element only)
                            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;default&lt;/code&gt;&lt;/td&gt;&lt;td&gt;SQL expression&lt;/td&gt;&lt;td&gt;
                                specify a default value for the column
                            &lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;check&lt;/code&gt;&lt;/td&gt;&lt;td&gt;SQL expression&lt;/td&gt;&lt;td&gt;
                                create an SQL check constraint on either column or table
                            &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;
            
            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;&amp;lt;comment&amp;gt;&lt;/code&gt; element allows you to specify comments
                for the generated schema.
            &lt;/p&gt;
            
            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot; table=&quot;CurCust&quot;&amp;gt;
    &amp;lt;comment&amp;gt;Current customers only&amp;lt;/comment&amp;gt;
    ...
&amp;lt;/class&amp;gt;&lt;/pre&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;property name=&quot;balance&quot;&amp;gt;
    &amp;lt;column name=&quot;bal&quot;&amp;gt;
        &amp;lt;comment&amp;gt;Balance in USD&amp;lt;/comment&amp;gt;
    &amp;lt;/column&amp;gt;
&amp;lt;/property&amp;gt;&lt;/pre&gt;
            
            &lt;p&gt;
                This results in a &lt;code class=&quot;literal&quot;&gt;comment on table&lt;/code&gt; or 
                &lt;code class=&quot;literal&quot;&gt;comment on column&lt;/code&gt; statement in the generated
                DDL where supported.
            &lt;/p&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.2. Running the tool&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-3&quot;/&gt;21.1.2. Running the tool&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; tool writes a DDL script to standard out and/or
                executes the DDL statements.
            &lt;/p&gt;
		
	&lt;p&gt;The following table displays the &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; command line options&lt;/p&gt;
        
    	&lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;java -cp &lt;/code&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;hibernate_classpaths&lt;/em&gt;&lt;/span&gt;
                &lt;code class=&quot;literal&quot;&gt;org.hibernate.tool.hbm2ddl.SchemaExport&lt;/code&gt; &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;options mapping_files&lt;/em&gt;&lt;/span&gt;
            &lt;/p&gt;

            &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e9691&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 21.2. &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; Command Line Options&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
                
                &lt;table summary=&quot;SchemaExport Command Line Options&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1.5*&quot;/&gt;&lt;col width=&quot;2*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--quiet&lt;/code&gt;&lt;/td&gt;&lt;td&gt;do not output the script to stdout&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--drop&lt;/code&gt;&lt;/td&gt;&lt;td&gt;only drop the tables&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--create&lt;/code&gt;&lt;/td&gt;&lt;td&gt;only create the tables&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--text&lt;/code&gt;&lt;/td&gt;&lt;td&gt;do not export to the database&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--output=my_schema.ddl&lt;/code&gt;&lt;/td&gt;&lt;td&gt;output the ddl script to a file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--naming=eg.MyNamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;td&gt;select a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--config=hibernate.cfg.xml&lt;/code&gt;&lt;/td&gt;&lt;td&gt;read Hibernate configuration from an XML file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--properties=hibernate.properties&lt;/code&gt;&lt;/td&gt;&lt;td&gt;read database properties from a file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--format&lt;/code&gt;&lt;/td&gt;&lt;td&gt;format the generated SQL nicely in the script&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--delimiter=;&lt;/code&gt;&lt;/td&gt;&lt;td&gt;set an end of line delimiter for the script&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

            &lt;p&gt;
                You can even embed &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; in your application:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = ....;
new SchemaExport(cfg).create(false, true);&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.3. Properties&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-4&quot;/&gt;21.1.3. Properties&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                Database properties can be specified:
            &lt;/p&gt;

            &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot; compact=&quot;compact&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;as system properties with &lt;code class=&quot;literal&quot;&gt;-D&lt;/code&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;&amp;lt;property&amp;gt;&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;in &lt;code class=&quot;literal&quot;&gt;hibernate.properties&lt;/code&gt;&lt;/p&gt;
                &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                    &lt;p&gt;in a named properties file with &lt;code class=&quot;literal&quot;&gt;--properties&lt;/code&gt;&lt;/p&gt;
                &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

            &lt;p&gt;
                The needed properties are:
            &lt;/p&gt;

            &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e9761&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 21.3. SchemaExport Connection Properties&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
                
                &lt;table summary=&quot;SchemaExport Connection Properties&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1.5*&quot;/&gt;&lt;col width=&quot;2*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Property Name&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.connection.driver_class&lt;/code&gt;&lt;/td&gt;&lt;td&gt;jdbc driver class&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.connection.url&lt;/code&gt;&lt;/td&gt;&lt;td&gt;jdbc url&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.connection.username&lt;/code&gt;&lt;/td&gt;&lt;td&gt;database user&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.connection.password&lt;/code&gt;&lt;/td&gt;&lt;td&gt;user password&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;hibernate.dialect&lt;/code&gt;&lt;/td&gt;&lt;td&gt;dialect&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.4. Using Ant&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-5&quot;/&gt;21.1.4. Using Ant&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                You can call &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt; from your Ant build script:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;target name=&quot;schemaexport&quot;&amp;gt;
    &amp;lt;taskdef name=&quot;schemaexport&quot;
        classname=&quot;org.hibernate.tool.hbm2ddl.SchemaExportTask&quot;
        classpathref=&quot;class.path&quot;/&amp;gt;
    
    &amp;lt;schemaexport
        properties=&quot;hibernate.properties&quot;
        quiet=&quot;no&quot;
        text=&quot;no&quot;
        drop=&quot;no&quot;
        delimiter=&quot;;&quot;
        output=&quot;schema-export.sql&quot;&amp;gt;
        &amp;lt;fileset dir=&quot;src&quot;&amp;gt;
            &amp;lt;include name=&quot;**/*.hbm.xml&quot;/&amp;gt;
        &amp;lt;/fileset&amp;gt;
    &amp;lt;/schemaexport&amp;gt;
&amp;lt;/target&amp;gt;&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.5. Incremental schema updates&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-6&quot;/&gt;21.1.5. Incremental schema updates&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; tool will update an existing schema with &quot;incremental&quot; changes.
                The &lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; depends upon the JDBC metadata API and, as such, will
                not work with all JDBC drivers.
            &lt;/p&gt;

            &lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;java -cp &lt;/code&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;hibernate_classpaths&lt;/em&gt;&lt;/span&gt;
                &lt;code class=&quot;literal&quot;&gt;org.hibernate.tool.hbm2ddl.SchemaUpdate&lt;/code&gt; &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;options mapping_files&lt;/em&gt;&lt;/span&gt;
            &lt;/p&gt;

            &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e9806&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 21.4. &lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; Command Line Options&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
                
                &lt;table summary=&quot;SchemaUpdate Command Line Options&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1.5*&quot;/&gt;&lt;col width=&quot;2*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--quiet&lt;/code&gt;&lt;/td&gt;&lt;td&gt;do not output the script to stdout&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--text&lt;/code&gt;&lt;/td&gt;&lt;td&gt;do not export the script to the database&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--naming=eg.MyNamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;td&gt;select a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--properties=hibernate.properties&lt;/code&gt;&lt;/td&gt;&lt;td&gt;read database properties from a file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--config=hibernate.cfg.xml&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specify a &lt;code class=&quot;literal&quot;&gt;.cfg.xml&lt;/code&gt; file&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

            &lt;p&gt;
                You can embed &lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; in your application:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = ....;
new SchemaUpdate(cfg).execute(false);&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.6. Using Ant for incremental schema updates&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-7&quot;/&gt;21.1.6. Using Ant for incremental schema updates&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                You can call &lt;code class=&quot;literal&quot;&gt;SchemaUpdate&lt;/code&gt; from the Ant script:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;target name=&quot;schemaupdate&quot;&amp;gt;
    &amp;lt;taskdef name=&quot;schemaupdate&quot;
        classname=&quot;org.hibernate.tool.hbm2ddl.SchemaUpdateTask&quot;
        classpathref=&quot;class.path&quot;/&amp;gt;
    
    &amp;lt;schemaupdate
        properties=&quot;hibernate.properties&quot;
        quiet=&quot;no&quot;&amp;gt;
        &amp;lt;fileset dir=&quot;src&quot;&amp;gt;
            &amp;lt;include name=&quot;**/*.hbm.xml&quot;/&amp;gt;
        &amp;lt;/fileset&amp;gt;
    &amp;lt;/schemaupdate&amp;gt;
&amp;lt;/target&amp;gt;&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.7. Schema validation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-8&quot;/&gt;21.1.7. Schema validation&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                The &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; tool will validate that the existing database schema &quot;matches&quot;
                your mapping documents. The &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; depends heavily upon the JDBC 
                metadata API and, as such, will not work with all JDBC drivers. This tool is extremely useful for testing.
            &lt;/p&gt;

            &lt;p&gt;
                &lt;code class=&quot;literal&quot;&gt;java -cp &lt;/code&gt;&lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;hibernate_classpaths&lt;/em&gt;&lt;/span&gt;
                &lt;code class=&quot;literal&quot;&gt;org.hibernate.tool.hbm2ddl.SchemaValidator&lt;/code&gt; &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;options mapping_files&lt;/em&gt;&lt;/span&gt;
            &lt;/p&gt;
			&lt;p&gt;The following table displays the &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; command line options:
			&lt;/p&gt;
            &lt;div class=&quot;table&quot;&gt;&lt;a id=&quot;d5e9859&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Table 21.5. &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; Command Line Options&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;table-contents&quot;&gt;
                
                &lt;table summary=&quot;SchemaValidator Command Line Options&quot; border=&quot;1&quot;&gt;&lt;colgroup&gt;&lt;col width=&quot;1.5*&quot;/&gt;&lt;col width=&quot;2*&quot;/&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Option&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--naming=eg.MyNamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;td&gt;select a &lt;code class=&quot;literal&quot;&gt;NamingStrategy&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--properties=hibernate.properties&lt;/code&gt;&lt;/td&gt;&lt;td&gt;read database properties from a file&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code class=&quot;literal&quot;&gt;--config=hibernate.cfg.xml&lt;/code&gt;&lt;/td&gt;&lt;td&gt;specify a &lt;code class=&quot;literal&quot;&gt;.cfg.xml&lt;/code&gt; file&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
            &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;table-break&quot;/&gt;

            &lt;p&gt;
                You can embed &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; in your application:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Configuration cfg = ....;
new SchemaValidator(cfg).validate();&lt;/pre&gt;

        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;21.1.8. Using Ant for schema validation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;toolsetguide-s1-9&quot;/&gt;21.1.8. Using Ant for schema validation&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            

            &lt;p&gt;
                You can call &lt;code class=&quot;literal&quot;&gt;SchemaValidator&lt;/code&gt; from the Ant script:
            &lt;/p&gt;

            &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;target name=&quot;schemavalidate&quot;&amp;gt;
    &amp;lt;taskdef name=&quot;schemavalidator&quot;
        classname=&quot;org.hibernate.tool.hbm2ddl.SchemaValidatorTask&quot;
        classpathref=&quot;class.path&quot;/&amp;gt;
    
    &amp;lt;schemavalidator
        properties=&quot;hibernate.properties&quot;&amp;gt;
        &amp;lt;fileset dir=&quot;src&quot;&amp;gt;
            &amp;lt;include name=&quot;**/*.hbm.xml&quot;/&amp;gt;
        &amp;lt;/fileset&amp;gt;
    &amp;lt;/schemavalidator&amp;gt;
&amp;lt;/target&amp;gt;&lt;/pre&gt;

        &lt;/div&gt;

    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 22. Additional modules&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;additionalmodules&quot;/&gt;Chapter 22. Additional modules&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9895&quot;&gt;22.1. Bean Validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9904&quot;&gt;22.1.1. Adding Bean Validation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9907&quot;&gt;22.1.2. Configuration&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9963&quot;&gt;22.1.3. Catching violations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9976&quot;&gt;22.1.4. Database schema&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e9999&quot;&gt;22.2. Hibernate Search&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e10001&quot;&gt;22.2.1. Description&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#d5e10006&quot;&gt;22.2.2. Integration with Hibernate Annotations&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
  

  &lt;p&gt;Hibernate Core also offers integration with some external
  modules/projects. This includes Hibernate Validator the reference
  implementation of Bean Validation (JSR 303) and Hibernate Search. &lt;/p&gt;

  &lt;div class=&quot;section&quot; title=&quot;22.1. Bean Validation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9895&quot;/&gt;22.1. Bean Validation&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;p&gt;Bean Validation standardizes how to define and declare domain model
    level constraints. You can, for example, express that a property should
    never be null, that the account balance should be strictly positive, etc.
    These domain model constraints are declared in the bean itself by
    annotating its properties. Bean Validation can then read them and check
    for constraint violations. The validation mechanism can be executed in
    different layers in your application without having to duplicate any of
    these rules (presentation layer, data access layer). Following the DRY
    principle, Bean Validation and its reference implementation Hibernate
    Validator has been designed for that purpose.&lt;/p&gt;

    &lt;p&gt;The integration between Hibernate and Bean Validation works at two
    levels. First, it is able to check in-memory instances of a class for
    constraint violations. Second, it can apply the constraints to the
    Hibernate metamodel and incorporate them into the generated database
    schema.&lt;/p&gt;

    &lt;p&gt;Each constraint annotation is associated to a validator
    implementation responsible for checking the constraint on the entity
    instance. A validator can also (optionally) apply the constraint to the
    Hibernate metamodel, allowing Hibernate to generate DDL that expresses the
    constraint. With the appropriate event listener, you can execute the
    checking operation on inserts, updates and deletes done by
    Hibernate.&lt;/p&gt;

    &lt;p&gt;When checking instances at runtime, Hibernate Validator returns
    information about constraint violations in a set of
    &lt;code class=&quot;classname&quot;&gt;ConstraintViolation&lt;/code&gt;s. Among other information, the
    &lt;code class=&quot;classname&quot;&gt;ConstraintViolation&lt;/code&gt; contains an error description
    message that can embed the parameter values bundle with the annotation
    (eg. size limit), and message strings that may be externalized to a
    &lt;code class=&quot;classname&quot;&gt;ResourceBundle&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;section&quot; title=&quot;22.1.1. Adding Bean Validation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9904&quot;/&gt;22.1.1. Adding Bean Validation&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;To enable Hibernate&apos;s Bean Validation integration, simply add a
      Bean Validation provider (preferably Hibernate Validation 4) on your
      classpath.&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;22.1.2. Configuration&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9907&quot;/&gt;22.1.2. Configuration&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;By default, no configuration is necessary.&lt;/p&gt;

      &lt;p&gt;The &lt;code class=&quot;classname&quot;&gt;Default&lt;/code&gt; group is validated on entity
      insert and update and the database model is updated accordingly based on
      the &lt;code class=&quot;classname&quot;&gt;Default&lt;/code&gt; group as well.&lt;/p&gt;

      &lt;p&gt;You can customize the Bean Validation integration by setting the
      validation mode. Use the
      &lt;code class=&quot;literal&quot;&gt;javax.persistence.validation.mode&lt;/code&gt; property and set it
      up for example in your &lt;code class=&quot;filename&quot;&gt;persistence.xml&lt;/code&gt; file or your
      &lt;code class=&quot;filename&quot;&gt;hibernate.cfg.xml&lt;/code&gt; file. Several options are
      possible:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;auto&lt;/code&gt; (default): enable integration between
          Bean Validation and Hibernate (callback and ddl generation) only if
          Bean Validation is present in the classpath.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;none&lt;/code&gt;: disable all integration between Bean
          Validation and Hibernate&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;callback&lt;/code&gt;: only validate entities when they
          are either inserted, updated or deleted. An exception is raised if
          no Bean Validation provider is present in the classpath.&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;ddl&lt;/code&gt;: only apply constraints to the database
          schema when generated by Hibernate. An exception is raised if no
          Bean Validation provider is present in the classpath. This value is
          not defined by the Java Persistence spec and is specific to
          Hibernate.&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;You can use both &lt;code class=&quot;literal&quot;&gt;callback&lt;/code&gt; and
        &lt;code class=&quot;literal&quot;&gt;ddl&lt;/code&gt; together by setting the property to
        &lt;code class=&quot;literal&quot;&gt;callback, dll&lt;/code&gt;&lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; class=&quot;XML&quot;&gt;&lt;!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) --&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;...&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence-unit&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;...&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;javax.persistence.validation.mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;callback,&amp;nbsp;ddl&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence-unit&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/pre&gt;

        &lt;p&gt;This is equivalent to &lt;code class=&quot;literal&quot;&gt;auto&lt;/code&gt; except that if no
        Bean Validation provider is present, an exception is raised.&lt;/p&gt;
      &lt;/div&gt;

      &lt;p&gt;If you want to validate different groups during insertion, update
      and deletion, use:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;javax.persistence.validation.group.pre-persist&lt;/code&gt;:
          groups validated when an entity is about to be persisted (default to
          &lt;code class=&quot;classname&quot;&gt;Default&lt;/code&gt;)&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;javax.persistence.validation.group.pre-update&lt;/code&gt;:
          groups validated when an entity is about to be updated (default to
          &lt;code class=&quot;classname&quot;&gt;Default&lt;/code&gt;)&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;javax.persistence.validation.group.pre-remove&lt;/code&gt;:
          groups validated when an entity is about to be deleted (default to
          no group)&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;literal&quot;&gt;org.hibernate.validator.group.ddl&lt;/code&gt;: groups
          considered when applying constraints on the database schema (default
          to &lt;code class=&quot;classname&quot;&gt;Default&lt;/code&gt;)&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;Each property accepts the fully qualified class names of the
      groups validated separated by a comma (,)&lt;/p&gt;

      &lt;div class=&quot;example&quot;&gt;&lt;a id=&quot;d5e9956&quot;/&gt;&lt;p class=&quot;title&quot;&gt;&lt;strong&gt;Example 22.1. Using custom groups for validation&lt;/strong&gt;&lt;/p&gt;&lt;div class=&quot;example-contents&quot;&gt;
        

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;XML&quot;&gt;&lt;!-- XML : generated by JHighlight v1.0 (http://jhighlight.dev.java.net) --&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;...&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence-unit&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;...&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;...&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;javax.persistence.validation.group.pre-update&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;javax.validation.group.Default,&amp;nbsp;com.acme.group.Strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;javax.persistence.validation.group.pre-remove&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;com.acme.group.OnDelete&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;org.hibernate.validator.group.ddl&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_attribute_name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;xml_attribute_value&quot;&gt;&amp;quot;com.acme.group.DDL&amp;quot;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_plain&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence-unit&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;xml_tag_name&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;xml_tag_symbols&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;xml_plain&quot;&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/pre&gt;
      &lt;/div&gt;&lt;/div&gt;&lt;br class=&quot;example-break&quot;/&gt;

      &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
        &lt;p&gt;You can set these properties in
        &lt;code class=&quot;filename&quot;&gt;hibernate.cfg.xml&lt;/code&gt;,
        &lt;code class=&quot;filename&quot;&gt;hibernate.properties&lt;/code&gt; or programmatically.&lt;/p&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;22.1.3. Catching violations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9963&quot;/&gt;22.1.3. Catching violations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;If an entity is found to be invalid, the list of constraint
      violations is propagated by the
      &lt;code class=&quot;classname&quot;&gt;ConstraintViolationException&lt;/code&gt; which exposes the
      set of &lt;code class=&quot;classname&quot;&gt;ConstraintViolation&lt;/code&gt;s.&lt;/p&gt;

      &lt;p&gt;This exception is wrapped in a
      &lt;code class=&quot;classname&quot;&gt;RollbackException&lt;/code&gt; when the violation happens at
      commit time. Otherwise the
      &lt;code class=&quot;classname&quot;&gt;ConstraintViolationException&lt;/code&gt; is returned (for
      example when calling &lt;code class=&quot;methodname&quot;&gt;flush()&lt;/code&gt;. Note that
      generally, catchable violations are validated at a higher level (for
      example in Seam / JSF 2 via the JSF - Bean Validation integration or in
      your business layer by explicitly calling Bean Validation).&lt;/p&gt;

      &lt;p&gt;An application code will rarely be looking for a
      &lt;code class=&quot;classname&quot;&gt;ConstraintViolationException&lt;/code&gt; raised by Hibernate.
      This exception should be treated as fatal and the persistence context
      should be discarded (&lt;code class=&quot;classname&quot;&gt;EntityManager&lt;/code&gt; or
      &lt;code class=&quot;classname&quot;&gt;Session&lt;/code&gt;).&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;22.1.4. Database schema&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9976&quot;/&gt;22.1.4. Database schema&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate uses Bean Validation constraints to generate an accurate
      database schema:&lt;/p&gt;

      &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@NotNull&lt;/code&gt; leads to a not null column
          (unless it conflicts with components or table inheritance)&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@Size.max&lt;/code&gt; leads to a
          &lt;code class=&quot;literal&quot;&gt;varchar(max)&lt;/code&gt; definition for Strings&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@Min&lt;/code&gt;, &lt;code class=&quot;classname&quot;&gt;@Max&lt;/code&gt; lead
          to column checks (like &lt;code class=&quot;code&quot;&gt;value &amp;lt;= max&lt;/code&gt;)&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
          &lt;p&gt;&lt;code class=&quot;classname&quot;&gt;@Digits&lt;/code&gt; leads to the definition of
          precision and scale (ever wondered which is which? It&apos;s easy now
          with &lt;code class=&quot;classname&quot;&gt;@Digits&lt;/code&gt; :) )&lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

      &lt;p&gt;These constraints can be declared directly on the entity
      properties or indirectly by using constraint composition.&lt;/p&gt;

      &lt;p&gt;
          For more information check the Hibernate Validator reference documentation at
          &lt;a class=&quot;ulink&quot; href=&quot;http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html/&quot;&gt;http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html/&lt;/a&gt;
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class=&quot;section&quot; title=&quot;22.2. Hibernate Search&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e9999&quot;/&gt;22.2. Hibernate Search&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;22.2.1. Description&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e10001&quot;/&gt;22.2.1. Description&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;
          Full text search engines like &lt;span class=&quot;productname&quot;&gt;Apache Lucene&lt;/span&gt; are a very powerful technology to
          bring free text/efficient queries to applications. If suffers several mismatches when dealing with a
          object domain model (keeping the index up to date, mismatch between the index structure and the domain
          model, querying mismatch...) Hibernate Search indexes your domain model thanks to a few annotations,
          takes care of the database / index synchronization and brings you back regular managed objects from
          free text queries. Hibernate Search is using
          &lt;a class=&quot;ulink&quot; href=&quot;http://lucene.apache.org&quot;&gt;Apache Lucene&lt;/a&gt;
          under the covers.
      &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;22.2.2. Integration with Hibernate Annotations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e10006&quot;/&gt;22.2.2. Integration with Hibernate Annotations&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
      

      &lt;p&gt;Hibernate Search integrates with Hibernate Core transparently
      provided that the Hibernate Search jar is present on the classpath. If
      you do not wish to automatically register Hibernate Search event
      listeners, you can set
      &lt;code class=&quot;literal&quot;&gt;hibernate.search.autoregister_listeners&lt;/code&gt; to false.
      Such a need is very uncommon and not recommended.&lt;/p&gt;

      &lt;p&gt;
          Check the Hibernate Search reference documentation (
          &lt;a class=&quot;ulink&quot; href=&quot;http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html/&quot;&gt;http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html/&lt;/a&gt;
          ) for more information.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 23. Example: Parent/Child&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild&quot;/&gt;Chapter 23. Example: Parent/Child&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-collections&quot;&gt;23.1. A note about collections&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-bidir&quot;&gt;23.2. Bidirectional one-to-many&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-cascades&quot;&gt;23.3. Cascading life cycle&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-update&quot;&gt;23.4. Cascades and &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt;&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-parentchild-conclusion&quot;&gt;23.5. Conclusion&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;p&gt;
        One of the first things that new users want to do with Hibernate is to model a parent/child type 
        relationship. There are two different approaches to this. The most convenient 
        approach, especially for new users, is to model both &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; 
        as entity classes with a &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; association from &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; 
        to &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt;. The alternative approach is to declare the &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; as a 
        &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-element&amp;gt;&lt;/code&gt;. The default semantics of a one-to-many 
        association in Hibernate are much less close to the usual semantics of a parent/child relationship than 
        those of a composite element mapping. We will explain how to use a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;bidirectional one-to-many 
        association with cascades&lt;/em&gt;&lt;/span&gt; to model a parent/child relationship efficiently and elegantly. 
        
    &lt;/p&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;23.1. A note about collections&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild-collections&quot;/&gt;23.1. A note about collections&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Hibernate collections are considered to be a logical part of their owning entity and not of the
            contained entities. Be aware that this is a critical distinction that has the following consequences:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                When you remove/add an object from/to a collection, the version number of the collection owner
                is incremented.
            &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                If an object that was removed from a collection is an instance of a value type (e.g. a composite
                element), that object will cease to be persistent and its state will be completely removed from
                the database. Likewise, adding a value type instance to the collection will cause its state to be
                immediately persistent.
            &lt;/p&gt;
            &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                Conversely, if an entity is removed from a collection (a one-to-many or many-to-many
                association), it will not be deleted by default. This behavior is completely consistent; a
                change to the internal state of another entity should not cause the associated entity to vanish.
                Likewise, adding an entity to a collection does not cause that entity to become persistent, by
                default.
            &lt;/p&gt;
            &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;

        &lt;p&gt;
            Adding an entity to a collection, by default, merely creates a link between
            the two entities. Removing the entity will remove the link. This is appropriate for all sorts of cases.
            However, it is not appropriate in the case of a parent/child relationship. In this case, the life of the
            child is bound to the life cycle of the parent.
        &lt;/p&gt;
    
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;23.2. Bidirectional one-to-many&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild-bidir&quot;/&gt;23.2. Bidirectional one-to-many&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Suppose we start with a simple &lt;code class=&quot;literal&quot;&gt;&amp;lt;one-to-many&amp;gt;&lt;/code&gt; association from
            &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;children&quot;&amp;gt;
    &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;
    
        &lt;p&gt;
            If we were to execute the following code:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = .....;
Child c = new Child();
p.getChildren().add(c);
session.save(c);
session.flush();&lt;/pre&gt;
    
        &lt;p&gt;
            Hibernate would issue two SQL statements:
        &lt;/p&gt;

        &lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;an &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; to create the record for &lt;code class=&quot;literal&quot;&gt;c&lt;/code&gt;&lt;/p&gt;
        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
            &lt;p&gt;
                an &lt;code class=&quot;literal&quot;&gt;UPDATE&lt;/code&gt; to create the link from &lt;code class=&quot;literal&quot;&gt;p&lt;/code&gt; to
                &lt;code class=&quot;literal&quot;&gt;c&lt;/code&gt;
            &lt;/p&gt;
        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;
    
        &lt;p&gt;
            This is not only inefficient, but also violates any &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint on the
            &lt;code class=&quot;literal&quot;&gt;parent_id&lt;/code&gt; column. You can fix the nullability constraint violation by specifying
            &lt;code class=&quot;literal&quot;&gt;not-null=&quot;true&quot;&lt;/code&gt; in the collection mapping:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;children&quot;&amp;gt;
    &amp;lt;key column=&quot;parent_id&quot; not-null=&quot;true&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;
    
        &lt;p&gt;
        	However, this is not the recommended solution.
       	&lt;/p&gt;
       	&lt;p&gt;
            The underlying cause of this behavior is that the link (the foreign key &lt;code class=&quot;literal&quot;&gt;parent_id&lt;/code&gt;) 
            from &lt;code class=&quot;literal&quot;&gt;p&lt;/code&gt; to &lt;code class=&quot;literal&quot;&gt;c&lt;/code&gt; is not considered part of the state of the 
            &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; object and is therefore not created in the &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt;. The 
            solution is to make the link part of the &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; mapping.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;many-to-one name=&quot;parent&quot; column=&quot;parent_id&quot; not-null=&quot;true&quot;/&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            You also need to add the &lt;code class=&quot;literal&quot;&gt;parent&lt;/code&gt; property to the &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; class.
        &lt;/p&gt;

        &lt;p&gt;
            Now that the &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; entity is managing the state of the link, we tell the collection 
            not to update the link. We use the &lt;code class=&quot;literal&quot;&gt;inverse&lt;/code&gt; attribute to do this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;children&quot; inverse=&quot;true&quot;&amp;gt;
    &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

        &lt;p&gt;
            The following code would be used to add a new &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt;:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
Child c = new Child();
c.setParent(p);
p.getChildren().add(c);
session.save(c);
session.flush();&lt;/pre&gt;

        &lt;p&gt;
            Only one SQL &lt;code class=&quot;literal&quot;&gt;INSERT&lt;/code&gt; would now be issued.
        &lt;/p&gt;

        &lt;p&gt;
            You could also create an &lt;code class=&quot;literal&quot;&gt;addChild()&lt;/code&gt; method of
            &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt;.
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public void addChild(Child c) {
    c.setParent(this);
    children.add(c);
}&lt;/pre&gt;

        &lt;p&gt;
            The code to add a &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; looks like this:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
Child c = new Child();
p.addChild(c);
session.save(c);
session.flush();&lt;/pre&gt;

     &lt;/div&gt;
     
     &lt;div class=&quot;section&quot; title=&quot;23.3. Cascading life cycle&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild-cascades&quot;/&gt;23.3. Cascading life cycle&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
         
     
         &lt;p&gt;
             You can address the frustrations of the explicit call to &lt;code class=&quot;literal&quot;&gt;save()&lt;/code&gt; by
             using cascades.
         &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;children&quot; inverse=&quot;true&quot; cascade=&quot;all&quot;&amp;gt;
    &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;
     
         &lt;p&gt;
             This simplifies the code above to:
         &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
Child c = new Child();
p.addChild(c);
session.flush();&lt;/pre&gt;
     
         &lt;p&gt;
             Similarly, we do not need to iterate over the children when saving or deleting a &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt;.
             The following removes &lt;code class=&quot;literal&quot;&gt;p&lt;/code&gt; and all its children from the database.
         &lt;/p&gt;

         &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
session.delete(p);
session.flush();&lt;/pre&gt;
     
         &lt;p&gt;
             However, the following code:
         &lt;/p&gt;

         &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
Child c = (Child) p.getChildren().iterator().next();
p.getChildren().remove(c);
c.setParent(null);
session.flush();&lt;/pre&gt;
     
         &lt;p&gt;
             will not remove &lt;code class=&quot;literal&quot;&gt;c&lt;/code&gt; from the database. In this case, it will only remove the link to &lt;code class=&quot;literal&quot;&gt;p&lt;/code&gt;
             and cause a &lt;code class=&quot;literal&quot;&gt;NOT NULL&lt;/code&gt; constraint violation. You need to explicitly
             &lt;code class=&quot;literal&quot;&gt;delete()&lt;/code&gt; the &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt;.
         &lt;/p&gt;

         &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;Parent p = (Parent) session.load(Parent.class, pid);
Child c = (Child) p.getChildren().iterator().next();
p.getChildren().remove(c);
session.delete(c);
session.flush();&lt;/pre&gt;

         &lt;p&gt;
             In our case, a &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; cannot exist without its parent. So if we remove
             a &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; from the collection, we do want it to be deleted. To do this, we must
             use &lt;code class=&quot;literal&quot;&gt;cascade=&quot;all-delete-orphan&quot;&lt;/code&gt;.
         &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;set name=&quot;children&quot; inverse=&quot;true&quot; cascade=&quot;all-delete-orphan&quot;&amp;gt;
    &amp;lt;key column=&quot;parent_id&quot;/&amp;gt;
    &amp;lt;one-to-many class=&quot;Child&quot;/&amp;gt;
&amp;lt;/set&amp;gt;&lt;/pre&gt;

         &lt;p&gt;
             Even though the collection mapping specifies &lt;code class=&quot;literal&quot;&gt;inverse=&quot;true&quot;&lt;/code&gt;, cascades are 
             still processed by iterating the collection elements. If you need an object be saved, 
             deleted or updated by cascade, you must add it to the collection. It is not enough to simply call
             &lt;code class=&quot;literal&quot;&gt;setParent()&lt;/code&gt;.
         &lt;/p&gt;
               
     &lt;/div&gt;
     
     &lt;div class=&quot;section&quot; title=&quot;23.4. Cascades and unsaved-value&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild-update&quot;/&gt;23.4. Cascades and &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt;&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
         
     
         &lt;p&gt;
             Suppose we loaded up a &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; in one &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, made some changes 
             in a UI action and wanted to persist these changes in a new session by calling &lt;code class=&quot;literal&quot;&gt;update()&lt;/code&gt;. 
             The &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; will contain a collection of children and, since the cascading update is enabled, 
             Hibernate needs to know which children are newly instantiated and which represent existing rows in the 
             database. We will also assume that both &lt;code class=&quot;literal&quot;&gt;Parent&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Child&lt;/code&gt; have generated
             identifier properties of type &lt;code class=&quot;literal&quot;&gt;Long&lt;/code&gt;. Hibernate will use the identifier and 
             version/timestamp property value to determine which of the children are new. (See
             &lt;a class=&quot;xref&quot; href=&quot;#objectstate-saveorupdate&quot; title=&quot;11.7. Automatic state detection&quot;&gt;Section 11.7, âAutomatic state detectionâ&lt;/a&gt;.) &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;In Hibernate, it is no longer necessary to specify
             an &lt;code class=&quot;literal&quot;&gt;unsaved-value&lt;/code&gt; explicitly.&lt;/em&gt;&lt;/span&gt;
         &lt;/p&gt;

         &lt;p&gt;
             The following code will update &lt;code class=&quot;literal&quot;&gt;parent&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;child&lt;/code&gt; and insert 
             &lt;code class=&quot;literal&quot;&gt;newChild&lt;/code&gt;:
         &lt;/p&gt;

         &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;//parent and child were both loaded in a previous session
parent.addChild(child);
Child newChild = new Child();
parent.addChild(newChild);
session.update(parent);
session.flush();&lt;/pre&gt;
     
         &lt;p&gt;
             This may be suitable for the case of a generated identifier, but what about assigned identifiers
             and composite identifiers? This is more difficult, since Hibernate cannot use the identifier property to
             distinguish between a newly instantiated object, with an identifier assigned by the user, and an 
             object loaded in a previous session. In this case, Hibernate will either use the timestamp or version 
             property, or will actually query the second-level cache or, worst case, the database, to see if the 
             row exists.
         &lt;/p&gt;

     &lt;/div&gt;

     &lt;div class=&quot;section&quot; title=&quot;23.5. Conclusion&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-parentchild-conclusion&quot;/&gt;23.5. Conclusion&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
         

         &lt;p&gt;
             The sections we have just covered can be a bit confusing. However, in practice, 
             it all works out nicely. Most Hibernate applications use the parent/child pattern in many places.
         &lt;/p&gt;

         &lt;p&gt;
             We mentioned an alternative in the first paragraph. None of the above issues exist in the case of
             &lt;code class=&quot;literal&quot;&gt;&amp;lt;composite-element&amp;gt;&lt;/code&gt; mappings, which have exactly the semantics of a parent/child
             relationship. Unfortunately, there are two big limitations with composite element classes: composite elements 
             cannot own collections and they should not be the child of any entity other than the unique parent.
         &lt;/p&gt;
     
     &lt;/div&gt;
     
&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 24. Example: Weblog Application&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-weblog&quot;/&gt;Chapter 24. Example: Weblog Application&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-classes&quot;&gt;24.1. Persistent Classes&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-mappings&quot;&gt;24.2. Hibernate Mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-weblog-code&quot;&gt;24.3. Hibernate Code&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;24.1. Persistent Classes&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-weblog-classes&quot;/&gt;24.1. Persistent Classes&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The persistent classes here represent a weblog and an item posted
            in a weblog. They are to be modelled as a standard parent/child
            relationship, but we will use an ordered bag, instead of a set:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;

import java.util.List;

public class Blog {
    private Long _id;
    private String _name;
    private List _items;

    public Long getId() {
        return _id;
    }
    public List getItems() {
        return _items;
    }
    public String getName() {
        return _name;
    }
    public void setId(Long long1) {
        _id = long1;
    }
    public void setItems(List list) {
        _items = list;
    }
    public void setName(String string) {
        _name = string;
    }
}&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;

import java.text.DateFormat;
import java.util.Calendar;

public class BlogItem {
    private Long _id;
    private Calendar _datetime;
    private String _text;
    private String _title;
    private Blog _blog;

    public Blog getBlog() {
        return _blog;
    }
    public Calendar getDatetime() {
        return _datetime;
    }
    public Long getId() {
        return _id;
    }
    public String getText() {
        return _text;
    }
    public String getTitle() {
        return _title;
    }
    public void setBlog(Blog blog) {
        _blog = blog;
    }
    public void setDatetime(Calendar calendar) {
        _datetime = calendar;
    }
    public void setId(Long long1) {
        _id = long1;
    }
    public void setText(String string) {
        _text = string;
    }
    public void setTitle(String string) {
        _title = string;
    }
}&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;24.2. Hibernate Mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-weblog-mappings&quot;/&gt;24.2. Hibernate Mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The XML mappings are now straightforward. For example:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-mapping PUBLIC
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-mapping package=&quot;eg&quot;&amp;gt;

    &amp;lt;class
        name=&quot;Blog&quot;
        table=&quot;BLOGS&quot;&amp;gt;

        &amp;lt;id
            name=&quot;id&quot;
            column=&quot;BLOG_ID&quot;&amp;gt;

            &amp;lt;generator class=&quot;native&quot;/&amp;gt;

        &amp;lt;/id&amp;gt;

        &amp;lt;property
            name=&quot;name&quot;
            column=&quot;NAME&quot;
            not-null=&quot;true&quot;
            unique=&quot;true&quot;/&amp;gt;

        &amp;lt;bag
            name=&quot;items&quot;
            inverse=&quot;true&quot;
            order-by=&quot;DATE_TIME&quot;
            cascade=&quot;all&quot;&amp;gt;

            &amp;lt;key column=&quot;BLOG_ID&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;BlogItem&quot;/&amp;gt;

        &amp;lt;/bag&amp;gt;

    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;
&amp;lt;!DOCTYPE hibernate-mapping PUBLIC
    &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
    &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&amp;gt;

&amp;lt;hibernate-mapping package=&quot;eg&quot;&amp;gt;

    &amp;lt;class
        name=&quot;BlogItem&quot;
        table=&quot;BLOG_ITEMS&quot;
        dynamic-update=&quot;true&quot;&amp;gt;

        &amp;lt;id
            name=&quot;id&quot;
            column=&quot;BLOG_ITEM_ID&quot;&amp;gt;

            &amp;lt;generator class=&quot;native&quot;/&amp;gt;

        &amp;lt;/id&amp;gt;

        &amp;lt;property
            name=&quot;title&quot;
            column=&quot;TITLE&quot;
            not-null=&quot;true&quot;/&amp;gt;

        &amp;lt;property
            name=&quot;text&quot;
            column=&quot;TEXT&quot;
            not-null=&quot;true&quot;/&amp;gt;

        &amp;lt;property
            name=&quot;datetime&quot;
            column=&quot;DATE_TIME&quot;
            not-null=&quot;true&quot;/&amp;gt;

        &amp;lt;many-to-one
            name=&quot;blog&quot;
            column=&quot;BLOG_ID&quot;
            not-null=&quot;true&quot;/&amp;gt;

    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;24.3. Hibernate Code&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-weblog-code&quot;/&gt;24.3. Hibernate Code&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The following class demonstrates some of the kinds of things
            we can do with these classes using Hibernate:
        &lt;/p&gt;

        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;package eg;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.tool.hbm2ddl.SchemaExport;

public class BlogMain {
    
    private SessionFactory _sessions;
    
    public void configure() throws HibernateException {
        _sessions = new Configuration()
            .addClass(Blog.class)
            .addClass(BlogItem.class)
            .buildSessionFactory();
    }
    
    public void exportTables() throws HibernateException {
        Configuration cfg = new Configuration()
            .addClass(Blog.class)
            .addClass(BlogItem.class);
        new SchemaExport(cfg).create(true, true);
    }
    
    public Blog createBlog(String name) throws HibernateException {
        
        Blog blog = new Blog();
        blog.setName(name);
        blog.setItems( new ArrayList() );
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            session.persist(blog);
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return blog;
    }
    
    public BlogItem createBlogItem(Blog blog, String title, String text)
                        throws HibernateException {
        
        BlogItem item = new BlogItem();
        item.setTitle(title);
        item.setText(text);
        item.setBlog(blog);
        item.setDatetime( Calendar.getInstance() );
        blog.getItems().add(item);
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            session.update(blog);
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return item;
    }
    
    public BlogItem createBlogItem(Long blogid, String title, String text)
                        throws HibernateException {
        
        BlogItem item = new BlogItem();
        item.setTitle(title);
        item.setText(text);
        item.setDatetime( Calendar.getInstance() );
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            Blog blog = (Blog) session.load(Blog.class, blogid);
            item.setBlog(blog);
            blog.getItems().add(item);
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return item;
    }
    
    public void updateBlogItem(BlogItem item, String text)
                    throws HibernateException {
        
        item.setText(text);
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            session.update(item);
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
    }
    
    public void updateBlogItem(Long itemid, String text)
                    throws HibernateException {
    
        Session session = _sessions.openSession();
        Transaction tx = null;
        try {
            tx = session.beginTransaction();
            BlogItem item = (BlogItem) session.load(BlogItem.class, itemid);
            item.setText(text);
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
    }
    
    public List listAllBlogNamesAndItemCounts(int max)
                    throws HibernateException {
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        List result = null;
        try {
            tx = session.beginTransaction();
            Query q = session.createQuery(
                &quot;select blog.id, blog.name, count(blogItem) &quot; +
                &quot;from Blog as blog &quot; +
                &quot;left outer join blog.items as blogItem &quot; +
                &quot;group by blog.name, blog.id &quot; +
                &quot;order by max(blogItem.datetime)&quot;
            );
            q.setMaxResults(max);
            result = q.list();
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return result;
    }
    
    public Blog getBlogAndAllItems(Long blogid)
                    throws HibernateException {
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        Blog blog = null;
        try {
            tx = session.beginTransaction();
            Query q = session.createQuery(
                &quot;from Blog as blog &quot; +
                &quot;left outer join fetch blog.items &quot; +
                &quot;where blog.id = :blogid&quot;
            );
            q.setParameter(&quot;blogid&quot;, blogid);
            blog  = (Blog) q.uniqueResult();
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return blog;
    }
    
    public List listBlogsAndRecentItems() throws HibernateException {
        
        Session session = _sessions.openSession();
        Transaction tx = null;
        List result = null;
        try {
            tx = session.beginTransaction();
            Query q = session.createQuery(
                &quot;from Blog as blog &quot; +
                &quot;inner join blog.items as blogItem &quot; +
                &quot;where blogItem.datetime &amp;gt; :minDate&quot;
            );

            Calendar cal = Calendar.getInstance();
            cal.roll(Calendar.MONTH, false);
            q.setCalendar(&quot;minDate&quot;, cal);
            
            result = q.list();
            tx.commit();
        }
        catch (HibernateException he) {
            if (tx!=null) tx.rollback();
            throw he;
        }
        finally {
            session.close();
        }
        return result;
    }
}&lt;/pre&gt;

    &lt;/div&gt;

&lt;/div&gt;
    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 25. Example: Various Mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings&quot;/&gt;Chapter 25. Example: Various Mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-emp&quot;&gt;25.1. Employer/Employee&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-authorwork&quot;&gt;25.2. Author/Work&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-customerorderproduct&quot;&gt;25.3. Customer/Order/Product&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#misc&quot;&gt;25.4. Miscellaneous example mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-typed-onetone&quot;&gt;25.4.1. &quot;Typed&quot; one-to-one association&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-composite-key&quot;&gt;25.4.2. Composite key example&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-composite-key-manytomany&quot;&gt;25.4.3. Many-to-many with shared composite key attribute&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-content-discrimination&quot;&gt;25.4.4. Content based discrimination&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#example-mappings-association-alternatekeys&quot;&gt;25.4.5. Associations on alternate keys&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;
    
   

    &lt;p&gt;
        This chapters explores some more complex association mappings.
    &lt;/p&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;25.1. Employer/Employee&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-emp&quot;/&gt;25.1. Employer/Employee&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The following model of the relationship between &lt;code class=&quot;literal&quot;&gt;Employer&lt;/code&gt; and 
            &lt;code class=&quot;literal&quot;&gt;Employee&lt;/code&gt; uses an entity class (&lt;code class=&quot;literal&quot;&gt;Employment&lt;/code&gt;) 
            to represent the association. You can do this when there might be more than one
            period of employment for the same two parties. Components are used to model monetary 
            values and employee names.
        &lt;/p&gt;

        &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/EmployerEmployee.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;
        
        &lt;p&gt;
            Here is a possible mapping document:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;
        
    &amp;lt;class name=&quot;Employer&quot; table=&quot;employers&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;&amp;gt;
                &amp;lt;param name=&quot;sequence&quot;&amp;gt;employer_id_seq&amp;lt;/param&amp;gt;
            &amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Employment&quot; table=&quot;employment_periods&quot;&amp;gt;

        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;&amp;gt;
                &amp;lt;param name=&quot;sequence&quot;&amp;gt;employment_id_seq&amp;lt;/param&amp;gt;
            &amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;startDate&quot; column=&quot;start_date&quot;/&amp;gt;
        &amp;lt;property name=&quot;endDate&quot; column=&quot;end_date&quot;/&amp;gt;

        &amp;lt;component name=&quot;hourlyRate&quot; class=&quot;MonetaryAmount&quot;&amp;gt;
            &amp;lt;property name=&quot;amount&quot;&amp;gt;
                &amp;lt;column name=&quot;hourly_rate&quot; sql-type=&quot;NUMERIC(12, 2)&quot;/&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property name=&quot;currency&quot; length=&quot;12&quot;/&amp;gt;
        &amp;lt;/component&amp;gt;

        &amp;lt;many-to-one name=&quot;employer&quot; column=&quot;employer_id&quot; not-null=&quot;true&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;employee&quot; column=&quot;employee_id&quot; not-null=&quot;true&quot;/&amp;gt;

    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Employee&quot; table=&quot;employees&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;sequence&quot;&amp;gt;
                &amp;lt;param name=&quot;sequence&quot;&amp;gt;employee_id_seq&amp;lt;/param&amp;gt;
            &amp;lt;/generator&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;taxfileNumber&quot;/&amp;gt;
        &amp;lt;component name=&quot;name&quot; class=&quot;Name&quot;&amp;gt;
            &amp;lt;property name=&quot;firstName&quot;/&amp;gt;
            &amp;lt;property name=&quot;initial&quot;/&amp;gt;
            &amp;lt;property name=&quot;lastName&quot;/&amp;gt;
        &amp;lt;/component&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;
        Here is the table schema generated by &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt;.
    &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table employers (
    id BIGINT not null, 
    name VARCHAR(255), 
    primary key (id)
)

create table employment_periods (
    id BIGINT not null,
    hourly_rate NUMERIC(12, 2),
    currency VARCHAR(12), 
    employee_id BIGINT not null, 
    employer_id BIGINT not null, 
    end_date TIMESTAMP, 
    start_date TIMESTAMP, 
    primary key (id)
)

create table employees (
    id BIGINT not null, 
    firstName VARCHAR(255), 
    initial CHAR(1), 
    lastName VARCHAR(255), 
    taxfileNumber VARCHAR(255), 
    primary key (id)
)

alter table employment_periods 
    add constraint employment_periodsFK0 foreign key (employer_id) references employers
alter table employment_periods 
    add constraint employment_periodsFK1 foreign key (employee_id) references employees
create sequence employee_id_seq
create sequence employment_id_seq
create sequence employer_id_seq&lt;/pre&gt;

    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;25.2. Author/Work&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-authorwork&quot;/&gt;25.2. Author/Work&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Consider the following model of the relationships between &lt;code class=&quot;literal&quot;&gt;Work&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;Author&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;. In the example, the relationship
            between &lt;code class=&quot;literal&quot;&gt;Work&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Author&lt;/code&gt; is represented as a many-to-many
            association and the relationship between &lt;code class=&quot;literal&quot;&gt;Author&lt;/code&gt; 
            and &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt; is represented as one-to-one association. Another possibility would be to 
            have &lt;code class=&quot;literal&quot;&gt;Author&lt;/code&gt; extend &lt;code class=&quot;literal&quot;&gt;Person&lt;/code&gt;.  
        &lt;/p&gt;

        &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/AuthorWork.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;
        
        &lt;p&gt;
            The following mapping document correctly represents these relationships:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Work&quot; table=&quot;works&quot; discriminator-value=&quot;W&quot;&amp;gt;

        &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;discriminator column=&quot;type&quot; type=&quot;character&quot;/&amp;gt;

        &amp;lt;property name=&quot;title&quot;/&amp;gt;
        &amp;lt;set name=&quot;authors&quot; table=&quot;author_work&quot;&amp;gt;
            &amp;lt;key column name=&quot;work_id&quot;/&amp;gt;
            &amp;lt;many-to-many class=&quot;Author&quot; column name=&quot;author_id&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;

        &amp;lt;subclass name=&quot;Book&quot; discriminator-value=&quot;B&quot;&amp;gt;
            &amp;lt;property name=&quot;text&quot;/&amp;gt;
        &amp;lt;/subclass&amp;gt;

        &amp;lt;subclass name=&quot;Song&quot; discriminator-value=&quot;S&quot;&amp;gt;
            &amp;lt;property name=&quot;tempo&quot;/&amp;gt;
            &amp;lt;property name=&quot;genre&quot;/&amp;gt;
        &amp;lt;/subclass&amp;gt;

    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Author&quot; table=&quot;authors&quot;&amp;gt;

        &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
            &amp;lt;!-- The Author must have the same identifier as the Person --&amp;gt;
            &amp;lt;generator class=&quot;assigned&quot;/&amp;gt; 
        &amp;lt;/id&amp;gt;

        &amp;lt;property name=&quot;alias&quot;/&amp;gt;
        &amp;lt;one-to-one name=&quot;person&quot; constrained=&quot;true&quot;/&amp;gt;

        &amp;lt;set name=&quot;works&quot; table=&quot;author_work&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;author_id&quot;/&amp;gt;
            &amp;lt;many-to-many class=&quot;Work&quot; column=&quot;work_id&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;

    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Person&quot; table=&quot;persons&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot; column=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;
        There are four tables in this mapping: &lt;code class=&quot;literal&quot;&gt;works&lt;/code&gt;,
        &lt;code class=&quot;literal&quot;&gt;authors&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;persons&lt;/code&gt; hold work, author
        and person data respectively. &lt;code class=&quot;literal&quot;&gt;author_work&lt;/code&gt; is an association
        table linking authors to works. Here is the table schema, as generated by
        &lt;code class=&quot;literal&quot;&gt;SchemaExport&lt;/code&gt;:
    &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table works (
    id BIGINT not null generated by default as identity, 
    tempo FLOAT, 
    genre VARCHAR(255), 
    text INTEGER, 
    title VARCHAR(255), 
    type CHAR(1) not null, 
    primary key (id)
)

create table author_work (
    author_id BIGINT not null, 
    work_id BIGINT not null, 
    primary key (work_id, author_id)
)

create table authors (
    id BIGINT not null generated by default as identity, 
    alias VARCHAR(255), 
    primary key (id)
)

create table persons (
    id BIGINT not null generated by default as identity, 
    name VARCHAR(255), 
    primary key (id)
)

alter table authors 
    add constraint authorsFK0 foreign key (id) references persons
alter table author_work 
    add constraint author_workFK0 foreign key (author_id) references authors
alter table author_work
    add constraint author_workFK1 foreign key (work_id) references works&lt;/pre&gt;

    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;25.3. Customer/Order/Product&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-customerorderproduct&quot;/&gt;25.3. Customer/Order/Product&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            In this section we consider a model of the relationships between &lt;code class=&quot;literal&quot;&gt;Customer&lt;/code&gt;,
            &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;Line Item&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Product&lt;/code&gt;.
            There is a one-to-many association between &lt;code class=&quot;literal&quot;&gt;Customer&lt;/code&gt; and
            &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt;, but how can you represent &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt; / 
            &lt;code class=&quot;literal&quot;&gt;LineItem&lt;/code&gt; / &lt;code class=&quot;literal&quot;&gt;Product&lt;/code&gt;? In the example, 
            &lt;code class=&quot;literal&quot;&gt;LineItem&lt;/code&gt; is mapped as an association class representing the many-to-many
            association between &lt;code class=&quot;literal&quot;&gt;Order&lt;/code&gt; and &lt;code class=&quot;literal&quot;&gt;Product&lt;/code&gt;. In
            Hibernate this is called a composite element.
        &lt;/p&gt;

        &lt;div class=&quot;mediaobject&quot; align=&quot;center&quot;&gt;&lt;img src=&quot;images/CustomerOrderProduct.png&quot; align=&quot;middle&quot;/&gt;&lt;/div&gt;
        
        &lt;p&gt;
            The mapping document will look like this:
        &lt;/p&gt;
        
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;hibernate-mapping&amp;gt;

    &amp;lt;class name=&quot;Customer&quot; table=&quot;customers&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;name&quot;/&amp;gt;
        &amp;lt;set name=&quot;orders&quot; inverse=&quot;true&quot;&amp;gt;
            &amp;lt;key column=&quot;customer_id&quot;/&amp;gt;
            &amp;lt;one-to-many class=&quot;Order&quot;/&amp;gt;
        &amp;lt;/set&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Order&quot; table=&quot;orders&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;date&quot;/&amp;gt;
        &amp;lt;many-to-one name=&quot;customer&quot; column=&quot;customer_id&quot;/&amp;gt;
        &amp;lt;list name=&quot;lineItems&quot; table=&quot;line_items&quot;&amp;gt;
            &amp;lt;key column=&quot;order_id&quot;/&amp;gt;
            &amp;lt;list-index column=&quot;line_number&quot;/&amp;gt;
            &amp;lt;composite-element class=&quot;LineItem&quot;&amp;gt;
                &amp;lt;property name=&quot;quantity&quot;/&amp;gt;
                &amp;lt;many-to-one name=&quot;product&quot; column=&quot;product_id&quot;/&amp;gt;
            &amp;lt;/composite-element&amp;gt;
        &amp;lt;/list&amp;gt;
    &amp;lt;/class&amp;gt;

    &amp;lt;class name=&quot;Product&quot; table=&quot;products&quot;&amp;gt;
        &amp;lt;id name=&quot;id&quot;&amp;gt;
            &amp;lt;generator class=&quot;native&quot;/&amp;gt;
        &amp;lt;/id&amp;gt;
        &amp;lt;property name=&quot;serialNumber&quot;/&amp;gt;
    &amp;lt;/class&amp;gt;

&amp;lt;/hibernate-mapping&amp;gt;&lt;/pre&gt;

    &lt;p&gt;
        &lt;code class=&quot;literal&quot;&gt;customers&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;orders&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;line_items&lt;/code&gt; and 
        &lt;code class=&quot;literal&quot;&gt;products&lt;/code&gt; hold customer, order, order line item and product data
        respectively. &lt;code class=&quot;literal&quot;&gt;line_items&lt;/code&gt; also acts as an association table linking
        orders with products.
    &lt;/p&gt;

    &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;create table customers (
    id BIGINT not null generated by default as identity, 
    name VARCHAR(255), 
    primary key (id)
)

create table orders (
    id BIGINT not null generated by default as identity, 
    customer_id BIGINT, 
    date TIMESTAMP, 
    primary key (id)
)

create table line_items (
    line_number INTEGER not null, 
    order_id BIGINT not null, 
    product_id BIGINT, 
    quantity INTEGER, 
    primary key (order_id, line_number)
)

create table products (
    id BIGINT not null generated by default as identity, 
    serialNumber VARCHAR(255), 
    primary key (id)
)

alter table orders 
    add constraint ordersFK0 foreign key (customer_id) references customers
alter table line_items
    add constraint line_itemsFK0 foreign key (product_id) references products
alter table line_items
    add constraint line_itemsFK1 foreign key (order_id) references orders&lt;/pre&gt;

    &lt;/div&gt;
    
    &lt;div class=&quot;section&quot; title=&quot;25.4. Miscellaneous example mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;misc&quot;/&gt;25.4. Miscellaneous example mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        
        
        &lt;p&gt;
            These examples are available from the Hibernate test suite. You
            will find many other useful example mappings there by searching in the
            &lt;code class=&quot;literal&quot;&gt;test&lt;/code&gt; folder of the Hibernate distribution.
        &lt;/p&gt;
        
      
        
        &lt;div class=&quot;section&quot; title=&quot;25.4.1. &amp;#34;Typed&amp;#34; one-to-one association&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-typed-onetone&quot;/&gt;25.4.1. &quot;Typed&quot; one-to-one association&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    &amp;lt;id name=&quot;name&quot;/&amp;gt;
    &amp;lt;one-to-one name=&quot;address&quot; 
            cascade=&quot;all&quot;&amp;gt;
        &amp;lt;formula&amp;gt;name&amp;lt;/formula&amp;gt;
        &amp;lt;formula&amp;gt;&apos;HOME&apos;&amp;lt;/formula&amp;gt;
    &amp;lt;/one-to-one&amp;gt;
    &amp;lt;one-to-one name=&quot;mailingAddress&quot; 
            cascade=&quot;all&quot;&amp;gt;
        &amp;lt;formula&amp;gt;name&amp;lt;/formula&amp;gt;
        &amp;lt;formula&amp;gt;&apos;MAILING&apos;&amp;lt;/formula&amp;gt;
    &amp;lt;/one-to-one&amp;gt;
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot; batch-size=&quot;2&quot; 
        check=&quot;addressType in (&apos;MAILING&apos;, &apos;HOME&apos;, &apos;BUSINESS&apos;)&quot;&amp;gt;
    &amp;lt;composite-id&amp;gt;
        &amp;lt;key-many-to-one name=&quot;person&quot; 
                column=&quot;personName&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;type&quot; 
                column=&quot;addressType&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    &amp;lt;property name=&quot;street&quot; type=&quot;text&quot;/&amp;gt;
    &amp;lt;property name=&quot;state&quot;/&amp;gt;
    &amp;lt;property name=&quot;zip&quot;/&amp;gt;
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;
        
        &lt;div class=&quot;section&quot; title=&quot;25.4.2. Composite key example&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-composite-key&quot;/&gt;25.4.2. Composite key example&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Customer&quot;&amp;gt;

    &amp;lt;id name=&quot;customerId&quot;
        length=&quot;10&quot;&amp;gt;
        &amp;lt;generator class=&quot;assigned&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;

    &amp;lt;property name=&quot;name&quot; not-null=&quot;true&quot; length=&quot;100&quot;/&amp;gt;
    &amp;lt;property name=&quot;address&quot; not-null=&quot;true&quot; length=&quot;200&quot;/&amp;gt;

    &amp;lt;list name=&quot;orders&quot;
            inverse=&quot;true&quot;
            cascade=&quot;save-update&quot;&amp;gt;
        &amp;lt;key column=&quot;customerId&quot;/&amp;gt;
        &amp;lt;index column=&quot;orderNumber&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Order&quot;/&amp;gt;
    &amp;lt;/list&amp;gt;

&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Order&quot; table=&quot;CustomerOrder&quot; lazy=&quot;true&quot;&amp;gt;
    &amp;lt;synchronize table=&quot;LineItem&quot;/&amp;gt;
    &amp;lt;synchronize table=&quot;Product&quot;/&amp;gt;
    
    &amp;lt;composite-id name=&quot;id&quot; 
            class=&quot;Order$Id&quot;&amp;gt;
        &amp;lt;key-property name=&quot;customerId&quot; length=&quot;10&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;orderNumber&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    
    &amp;lt;property name=&quot;orderDate&quot; 
            type=&quot;calendar_date&quot;
            not-null=&quot;true&quot;/&amp;gt;
    
    &amp;lt;property name=&quot;total&quot;&amp;gt;
        &amp;lt;formula&amp;gt;
            ( select sum(li.quantity*p.price) 
            from LineItem li, Product p 
            where li.productId = p.productId 
                and li.customerId = customerId 
                and li.orderNumber = orderNumber )
        &amp;lt;/formula&amp;gt;
    &amp;lt;/property&amp;gt;
    
    &amp;lt;many-to-one name=&quot;customer&quot;
            column=&quot;customerId&quot;
            insert=&quot;false&quot;
            update=&quot;false&quot; 
            not-null=&quot;true&quot;/&amp;gt;
        
    &amp;lt;bag name=&quot;lineItems&quot;
            fetch=&quot;join&quot; 
            inverse=&quot;true&quot;
            cascade=&quot;save-update&quot;&amp;gt;
        &amp;lt;key&amp;gt;
            &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
            &amp;lt;column name=&quot;orderNumber&quot;/&amp;gt;
        &amp;lt;/key&amp;gt;
        &amp;lt;one-to-many class=&quot;LineItem&quot;/&amp;gt;
    &amp;lt;/bag&amp;gt;
    
&amp;lt;/class&amp;gt;
    
&amp;lt;class name=&quot;LineItem&quot;&amp;gt;
    
    &amp;lt;composite-id name=&quot;id&quot; 
            class=&quot;LineItem$Id&quot;&amp;gt;
        &amp;lt;key-property name=&quot;customerId&quot; length=&quot;10&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;orderNumber&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;productId&quot; length=&quot;10&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    
    &amp;lt;property name=&quot;quantity&quot;/&amp;gt;
    
    &amp;lt;many-to-one name=&quot;order&quot;
            insert=&quot;false&quot;
            update=&quot;false&quot; 
            not-null=&quot;true&quot;&amp;gt;
        &amp;lt;column name=&quot;customerId&quot;/&amp;gt;
        &amp;lt;column name=&quot;orderNumber&quot;/&amp;gt;
    &amp;lt;/many-to-one&amp;gt;
    
    &amp;lt;many-to-one name=&quot;product&quot;
            insert=&quot;false&quot;
            update=&quot;false&quot; 
            not-null=&quot;true&quot;
            column=&quot;productId&quot;/&amp;gt;
        
&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Product&quot;&amp;gt;
    &amp;lt;synchronize table=&quot;LineItem&quot;/&amp;gt;

    &amp;lt;id name=&quot;productId&quot;
        length=&quot;10&quot;&amp;gt;
        &amp;lt;generator class=&quot;assigned&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    
    &amp;lt;property name=&quot;description&quot; 
        not-null=&quot;true&quot; 
        length=&quot;200&quot;/&amp;gt;
    &amp;lt;property name=&quot;price&quot; length=&quot;3&quot;/&amp;gt;
    &amp;lt;property name=&quot;numberAvailable&quot;/&amp;gt;
    
    &amp;lt;property name=&quot;numberOrdered&quot;&amp;gt;
        &amp;lt;formula&amp;gt;
            ( select sum(li.quantity) 
            from LineItem li 
            where li.productId = productId )
        &amp;lt;/formula&amp;gt;
    &amp;lt;/property&amp;gt;
    
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;
        
        &lt;div class=&quot;section&quot; title=&quot;25.4.3. Many-to-many with shared composite key attribute&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-composite-key-manytomany&quot;/&gt;25.4.3. Many-to-many with shared composite key attribute&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;User&quot; table=&quot;`User`&quot;&amp;gt;
    &amp;lt;composite-id&amp;gt;
        &amp;lt;key-property name=&quot;name&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;org&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    &amp;lt;set name=&quot;groups&quot; table=&quot;UserGroup&quot;&amp;gt;
        &amp;lt;key&amp;gt;
            &amp;lt;column name=&quot;userName&quot;/&amp;gt;
            &amp;lt;column name=&quot;org&quot;/&amp;gt;
        &amp;lt;/key&amp;gt;
        &amp;lt;many-to-many class=&quot;Group&quot;&amp;gt;
            &amp;lt;column name=&quot;groupName&quot;/&amp;gt;
            &amp;lt;formula&amp;gt;org&amp;lt;/formula&amp;gt;
        &amp;lt;/many-to-many&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;
    
&amp;lt;class name=&quot;Group&quot; table=&quot;`Group`&quot;&amp;gt;
    &amp;lt;composite-id&amp;gt;
        &amp;lt;key-property name=&quot;name&quot;/&amp;gt;
        &amp;lt;key-property name=&quot;org&quot;/&amp;gt;
    &amp;lt;/composite-id&amp;gt;
    &amp;lt;property name=&quot;description&quot;/&amp;gt;
    &amp;lt;set name=&quot;users&quot; table=&quot;UserGroup&quot; inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key&amp;gt;
            &amp;lt;column name=&quot;groupName&quot;/&amp;gt;
            &amp;lt;column name=&quot;org&quot;/&amp;gt;
        &amp;lt;/key&amp;gt;
        &amp;lt;many-to-many class=&quot;User&quot;&amp;gt;
            &amp;lt;column name=&quot;userName&quot;/&amp;gt;
            &amp;lt;formula&amp;gt;org&amp;lt;/formula&amp;gt;
        &amp;lt;/many-to-many&amp;gt;
    &amp;lt;/set&amp;gt;
&amp;lt;/class&amp;gt;
&lt;/pre&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;25.4.4. Content based discrimination&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-content-discrimination&quot;/&gt;25.4.4. Content based discrimination&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;
    discriminator-value=&quot;P&quot;&amp;gt;
    
    &amp;lt;id name=&quot;id&quot; 
        column=&quot;person_id&quot; 
        unsaved-value=&quot;0&quot;&amp;gt;
        &amp;lt;generator class=&quot;native&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    
            
    &amp;lt;discriminator 
        type=&quot;character&quot;&amp;gt;
        &amp;lt;formula&amp;gt;
            case 
                when title is not null then &apos;E&apos; 
                when salesperson is not null then &apos;C&apos; 
                else &apos;P&apos; 
            end
        &amp;lt;/formula&amp;gt;
    &amp;lt;/discriminator&amp;gt;

    &amp;lt;property name=&quot;name&quot; 
        not-null=&quot;true&quot;
        length=&quot;80&quot;/&amp;gt;
        
    &amp;lt;property name=&quot;sex&quot; 
        not-null=&quot;true&quot;
        update=&quot;false&quot;/&amp;gt;
    
    &amp;lt;component name=&quot;address&quot;&amp;gt;
        &amp;lt;property name=&quot;address&quot;/&amp;gt;
        &amp;lt;property name=&quot;zip&quot;/&amp;gt;
        &amp;lt;property name=&quot;country&quot;/&amp;gt;
    &amp;lt;/component&amp;gt;
    
    &amp;lt;subclass name=&quot;Employee&quot; 
        discriminator-value=&quot;E&quot;&amp;gt;
            &amp;lt;property name=&quot;title&quot;
                length=&quot;20&quot;/&amp;gt;
            &amp;lt;property name=&quot;salary&quot;/&amp;gt;
            &amp;lt;many-to-one name=&quot;manager&quot;/&amp;gt;
    &amp;lt;/subclass&amp;gt;
    
    &amp;lt;subclass name=&quot;Customer&quot; 
        discriminator-value=&quot;C&quot;&amp;gt;
            &amp;lt;property name=&quot;comments&quot;/&amp;gt;
            &amp;lt;many-to-one name=&quot;salesperson&quot;/&amp;gt;
    &amp;lt;/subclass&amp;gt;
    
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;

        &lt;div class=&quot;section&quot; title=&quot;25.4.5. Associations on alternate keys&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h3 class=&quot;title&quot;&gt;&lt;a id=&quot;example-mappings-association-alternatekeys&quot;/&gt;25.4.5. Associations on alternate keys&lt;/h3&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
            
&lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;&amp;lt;class name=&quot;Person&quot;&amp;gt;
    
    &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;hilo&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    
    &amp;lt;property name=&quot;name&quot; length=&quot;100&quot;/&amp;gt;
    
    &amp;lt;one-to-one name=&quot;address&quot; 
        property-ref=&quot;person&quot;
        cascade=&quot;all&quot;
        fetch=&quot;join&quot;/&amp;gt;
    
    &amp;lt;set name=&quot;accounts&quot; 
        inverse=&quot;true&quot;&amp;gt;
        &amp;lt;key column=&quot;userId&quot;
            property-ref=&quot;userId&quot;/&amp;gt;
        &amp;lt;one-to-many class=&quot;Account&quot;/&amp;gt;
    &amp;lt;/set&amp;gt;
    
    &amp;lt;property name=&quot;userId&quot; length=&quot;8&quot;/&amp;gt;

&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Address&quot;&amp;gt;

    &amp;lt;id name=&quot;id&quot;&amp;gt;
        &amp;lt;generator class=&quot;hilo&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;

    &amp;lt;property name=&quot;address&quot; length=&quot;300&quot;/&amp;gt;
    &amp;lt;property name=&quot;zip&quot; length=&quot;5&quot;/&amp;gt;
    &amp;lt;property name=&quot;country&quot; length=&quot;25&quot;/&amp;gt;
    &amp;lt;many-to-one name=&quot;person&quot; unique=&quot;true&quot; not-null=&quot;true&quot;/&amp;gt;

&amp;lt;/class&amp;gt;

&amp;lt;class name=&quot;Account&quot;&amp;gt;
    &amp;lt;id name=&quot;accountId&quot; length=&quot;32&quot;&amp;gt;
        &amp;lt;generator class=&quot;uuid&quot;/&amp;gt;
    &amp;lt;/id&amp;gt;
    
    &amp;lt;many-to-one name=&quot;user&quot;
        column=&quot;userId&quot;
        property-ref=&quot;userId&quot;/&amp;gt;
    
    &amp;lt;property name=&quot;type&quot; not-null=&quot;true&quot;/&amp;gt;
    
&amp;lt;/class&amp;gt;&lt;/pre&gt;
        &lt;/div&gt;

    &lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 26. Best Practices&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;best-practices&quot;/&gt;Chapter 26. Best Practices&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div class=&quot;variablelist&quot;&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Write fine-grained classes and map them using &lt;code class=&quot;literal&quot;&gt;&amp;lt;component&amp;gt;&lt;/code&gt;:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Use an &lt;code class=&quot;literal&quot;&gt;Address&lt;/code&gt; class to encapsulate &lt;code class=&quot;literal&quot;&gt;street&lt;/code&gt;,
                    &lt;code class=&quot;literal&quot;&gt;suburb&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;state&lt;/code&gt;, &lt;code class=&quot;literal&quot;&gt;postcode&lt;/code&gt;.
                    This encourages code reuse and simplifies refactoring.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Declare identifier properties on persistent classes:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Hibernate makes identifier properties optional. There are a range of reasons why
                    you should use them. We recommend that identifiers be &apos;synthetic&apos;, that is, generated with
                    no business meaning.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Identify natural keys:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Identify natural keys for all entities, and map them using 
                    &lt;code class=&quot;literal&quot;&gt;&amp;lt;natural-id&amp;gt;&lt;/code&gt;. Implement &lt;code class=&quot;literal&quot;&gt;equals()&lt;/code&gt; and 
                    &lt;code class=&quot;literal&quot;&gt;hashCode()&lt;/code&gt; to compare the properties that make up the natural key.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Place each class mapping in its own file:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                     Do not use a single monolithic mapping document. Map &lt;code class=&quot;literal&quot;&gt;com.eg.Foo&lt;/code&gt; in 
                     the file &lt;code class=&quot;literal&quot;&gt;com/eg/Foo.hbm.xml&lt;/code&gt;. This makes sense, particularly in 
                     a team environment.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Load mappings as resources:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Deploy the mappings along with the classes they map.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Consider externalizing query strings:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    This is recommended if your queries call non-ANSI-standard SQL functions. 
                    Externalizing the query strings to mapping files will make the application more 
                    portable.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Use bind variables.&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                     As in JDBC, always replace non-constant values by &quot;?&quot;. Do not use string manipulation to 
                     bind a non-constant value in a query. You should also consider using named parameters in
                     queries.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Do not manage your own JDBC connections:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Hibernate allows the application to manage JDBC connections, but his approach should be considered 
                    a last-resort. If you cannot use the built-in connection providers, consider providing your 
                    own implementation of &lt;code class=&quot;literal&quot;&gt;org.hibernate.connection.ConnectionProvider&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Consider using a custom type:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Suppose you have a Java type from a library that needs to be persisted but does not 
                    provide the accessors needed to map it as a component. You should consider implementing
                    &lt;code class=&quot;literal&quot;&gt;org.hibernate.UserType&lt;/code&gt;. This approach frees the application
                    code from implementing transformations to/from a Hibernate type.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Use hand-coded JDBC in bottlenecks:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    In performance-critical areas of the system, some kinds of operations might benefit from 
                    direct JDBC. Do not assume, however, that JDBC is necessarily faster. Please wait until you &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;know&lt;/em&gt;&lt;/span&gt; something is a bottleneck. 
                    If you need to use direct JDBC, 
                    you can open a Hibernate &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;, wrap your JDBC operation as a &lt;code class=&quot;literal&quot;&gt;org.hibernate.jdbc.Work&lt;/code&gt; object and using that JDBC connection. This 
                    way you can still use the same transaction strategy and underlying connection provider.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Understand &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt; flushing:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Sometimes the Session synchronizes its persistent state with the database. Performance will
                    be affected if this process occurs too often. You can sometimes minimize unnecessary flushing by 
                    disabling automatic flushing, or even by changing the order of queries and other operations within a 
                    particular transaction.      
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;In a three tiered architecture, consider using detached objects:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    When using a servlet/session bean architecture, you can pass persistent objects loaded in
                    the session bean to and from the servlet/JSP layer. Use a new session to service each request. 
                    Use &lt;code class=&quot;literal&quot;&gt;Session.merge()&lt;/code&gt; or &lt;code class=&quot;literal&quot;&gt;Session.saveOrUpdate()&lt;/code&gt; to 
                    synchronize objects with the database.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;In a two tiered architecture, consider using long persistence contexts:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Database Transactions have to be as short as possible for best scalability. However, it is often
                    necessary to implement long running &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;application transactions&lt;/em&gt;&lt;/span&gt;, a single 
                    unit-of-work from the point of view of a user. An application transaction might span several 
                    client request/response cycles. It is common to use detached objects to implement application
                    transactions. An appropriate alternative in a two tiered architecture, is to maintain
                    a single open persistence contact session for the whole life cycle of the application transaction. Then  
                    simply disconnect from the JDBC connection at the end of each request and reconnect at the 
                    beginning of the subsequent request. Never share a single session across more than one application 
                    transaction or you will be working with stale data.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Do not treat exceptions as recoverable:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    This is more of a necessary practice than a &quot;best&quot; practice. When an exception occurs, roll back
                    the &lt;code class=&quot;literal&quot;&gt;Transaction&lt;/code&gt; and close the &lt;code class=&quot;literal&quot;&gt;Session&lt;/code&gt;. If you do not do this, Hibernate
                    cannot guarantee that in-memory state accurately represents the persistent state. For example,
                    do not use &lt;code class=&quot;literal&quot;&gt;Session.load()&lt;/code&gt; to determine if an instance with the given identifier 
                    exists on the database; use &lt;code class=&quot;literal&quot;&gt;Session.get()&lt;/code&gt; or a query instead.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Prefer lazy fetching for associations:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Use eager fetching sparingly. Use proxies and lazy collections for most associations to classes that 
                    are not likely to be completely held in the second-level cache. For associations to cached classes, 
                    where there is an a extremely high probability of a cache hit, explicitly disable eager fetching using 
                    &lt;code class=&quot;literal&quot;&gt;lazy=&quot;false&quot;&lt;/code&gt;. When join fetching is appropriate to a particular use
                    case, use a query with a &lt;code class=&quot;literal&quot;&gt;left join fetch&lt;/code&gt;.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;
                Use the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;open session in view&lt;/em&gt;&lt;/span&gt; pattern, or a disciplined 
                &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;assembly phase&lt;/em&gt;&lt;/span&gt; to avoid problems with unfetched data:
            &lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Hibernate frees the developer from writing tedious &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Data Transfer Objects&lt;/em&gt;&lt;/span&gt; (DTO). 
                    In a traditional EJB architecture, DTOs serve dual purposes: first, they work around the problem
                    that entity beans are not serializable; second, they implicitly define an assembly phase where
                    all data to be used by the view is fetched and marshalled into the DTOs before returning control 
                    to the presentation tier. Hibernate eliminates the first purpose. Unless you are prepared to hold the
                    persistence context (the session) open across the view rendering process, you will still need
                    an assembly phase. Think of your business methods as having a strict contract with the presentation
                    tier about what data is available in the detached objects. This is not a limitation
                    of Hibernate. It is a fundamental requirement of safe transactional data access.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Consider abstracting your business logic from Hibernate:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Hide Hibernate data-access code behind an interface. Combine the &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;DAO&lt;/em&gt;&lt;/span&gt; and 
                    &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;Thread Local Session&lt;/em&gt;&lt;/span&gt; patterns. You can even have some classes persisted by
                    handcoded JDBC associated to Hibernate via a &lt;code class=&quot;literal&quot;&gt;UserType&lt;/code&gt;. This advice is, however, 
                    intended for &quot;sufficiently large&quot; applications. It is not appropriate for an application with
                    five tables.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Do not use exotic association mappings:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Practical test cases for real many-to-many associations are rare. Most of the time you need
                    additional information stored in the &quot;link table&quot;. In this case, it is much better to
                    use two one-to-many associations to an intermediate link class. In fact,
                    most associations are one-to-many and many-to-one. For this reason, you should proceed cautiously when using any
                    other association style.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;dt&gt;&lt;span class=&quot;term&quot;&gt;Prefer bidirectional associations:&lt;/span&gt;&lt;/dt&gt;&lt;dd&gt;
                &lt;p&gt;
                    Unidirectional associations are more difficult to query. In a large application, almost
                    all associations must be navigable in both directions in queries.
                &lt;/p&gt;
            &lt;/dd&gt;&lt;/dl&gt;&lt;/div&gt;

&lt;/div&gt;

    &lt;div class=&quot;chapter&quot; title=&quot;Chapter 27. Database Portability Considerations&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability&quot;/&gt;Chapter 27. Database Portability Considerations&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;toc&quot;&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;&lt;dl&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-basics&quot;&gt;27.1. Portability Basics&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-dialect&quot;&gt;27.2. Dialect&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-dialectresolver&quot;&gt;27.3. Dialect resolution&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-idgen&quot;&gt;27.4. Identifier generation&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-functions&quot;&gt;27.5. Database functions&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;dt&gt;&lt;span class=&quot;section&quot;&gt;&lt;a href=&quot;#portability-types&quot;&gt;27.6. Type mappings&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;/div&gt;
    

    &lt;div class=&quot;section&quot; title=&quot;27.1. Portability Basics&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-basics&quot;/&gt;27.1. Portability Basics&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            One of the selling points of Hibernate (and really Object/Relational Mapping as a whole) is
            the notion of database portability.  This could mean an internal IT user migrating from one
            database vendor to another, or it could mean a framework or deployable application consuming
            Hibernate to simultaneously target multiple database products by their users.  Regardless of
            the exact scenario, the basic idea is that you want Hibernate to help you run against any number
            of databases without changes to your code, and ideally without any changes to the mapping metadata.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;27.2. Dialect&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-dialect&quot;/&gt;27.2. Dialect&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            The first line of portability for Hibernate is the dialect, which is a specialization of the
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.dialect.Dialect&lt;/code&gt; contract.  A dialect encapsulates all
            the differences in how Hibernate must communicate with a particular database to accomplish some
            task like getting a sequence value or structuring a SELECT query.  Hibernate bundles a wide range
            of dialects for many of the most popular databases.  If you find that your particular database is
            not among them, it is not terribly difficult to write your own.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;27.3. Dialect resolution&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-dialectresolver&quot;/&gt;27.3. Dialect resolution&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            Originally, Hibernate would always require that users specify which dialect to use.  In the case
            of users looking to simultaneously target multiple databases with their build that was problematic.
            Generally this required their users to configure the Hibernate dialect or defining their own method
            of setting that value.
        &lt;/p&gt;

        &lt;p&gt;
            Starting with version 3.2, Hibernate introduced the notion of automatically detecting the dialect
            to use based on the &lt;code class=&quot;interfacename&quot;&gt;java.sql.DatabaseMetaData&lt;/code&gt; obtained from a
            &lt;code class=&quot;interfacename&quot;&gt;java.sql.Connection&lt;/code&gt; to that database.  This was much better, expect
            that this resolution was limited to databases Hibernate know about ahead of time and was in no way
            configurable or overrideable.
        &lt;/p&gt;

        &lt;p&gt;
            Starting with version 3.3, Hibernate has a fare more powerful way to automatically determine
            which dialect to should be used by relying on a series of delegates which implement the
            &lt;code class=&quot;interfacename&quot;&gt;org.hibernate.dialect.resolver.DialectResolver&lt;/code&gt; which defines only a
            single method:
        &lt;/p&gt;
        &lt;pre xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;&quot;&gt;public Dialect resolveDialect(DatabaseMetaData metaData) throws JDBCConnectionException&lt;/pre&gt;
        &lt;p&gt;
            The basic contract here is that if the resolver &apos;understands&apos; the given database metadata then
            it returns the corresponding Dialect; if not it returns null and the process continues to the next
            resolver.  The signature also identifies &lt;code class=&quot;exceptionname&quot;&gt;org.hibernate.exception.JDBCConnectionException&lt;/code&gt;
            as possibly being thrown.  A JDBCConnectionException here is interpreted to imply a &quot;non transient&quot;
            (aka non-recoverable) connection problem and is used to indicate an immediate stop to resolution
            attempts.  All other exceptions result in a warning and continuing on to the next resolver.
        &lt;/p&gt;

        &lt;p&gt;
            The cool part about these resolvers is that users can also register their own custom resolvers
            which will be processed ahead of the built-in Hibernate ones.  This might be useful in a number of
            different situations: it allows easy integration for auto-detection of dialects beyond those
            shipped with HIbernate itself; it allows you to specify to use a custom dialect when a particular
            database is recognized; etc.  To register one or more resolvers, simply specify them (seperated by
            commas, tabs or spaces) using the &apos;hibernate.dialect_resolvers&apos; configuration setting (see the
            &lt;code class=&quot;constant&quot;&gt;DIALECT_RESOLVERS&lt;/code&gt; constant on
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Environment&lt;/code&gt;).
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;27.4. Identifier generation&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-idgen&quot;/&gt;27.4. Identifier generation&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            When considering portability between databases, another important decision is selecting the
            identifier generation stratagy you want to use.  Originally Hibernate provided the
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;native&lt;/em&gt;&lt;/span&gt; generator for this purpose, which was intended to select between
            a &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;sequence&lt;/em&gt;&lt;/span&gt;, &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;identity&lt;/em&gt;&lt;/span&gt;, or &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;table&lt;/em&gt;&lt;/span&gt;
            strategy depending on the capability of the underlying database.  However, an insidious implication
            of this approach comes about when targtetting some databases which support &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;identity&lt;/em&gt;&lt;/span&gt;
            generation and some which do not.  &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;identity&lt;/em&gt;&lt;/span&gt; generation relies on the SQL
            definition of an IDENTITY (or auto-increment) column to manage the identifier value; it is what is
            known as a post-insert generation strategy becauase the insert must actually happen before we can
            know the identifier value.  Because Hibernate relies on this identifier value to uniquely reference
            entities within a persistence context it must then issue the insert
            immediately when the users requests the entitiy be associated with the session (like via
            save() e.g.) regardless of current transactional semantics.

            &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    Hibernate was changed slightly once the implication of this was better understood so that
                    the insert is delayed in cases where that is feasible.
                &lt;/p&gt;
            &lt;/div&gt;&lt;p&gt;

            The underlying issue is that the actual semanctics of the application itself changes in these cases.
        &lt;/p&gt;

        &lt;p&gt;
            Starting with version 3.2.3, Hibernate comes with a set of
            &lt;a class=&quot;ulink&quot; href=&quot;http://in.relation.to/2082.lace&quot;&gt;enhanced&lt;/a&gt;
            identifier generators targetting
            portability in a much different way.
            &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;note&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Note&lt;/h2&gt;
                &lt;p&gt;
                    There are specifically 2 bundled &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;enhanced&lt;/em&gt;&lt;/span&gt;generators:
                    &lt;/p&gt;&lt;div class=&quot;itemizedlist&quot;&gt;&lt;ul class=&quot;itemizedlist&quot;&gt;&lt;li class=&quot;listitem&quot;&gt;
                            &lt;p&gt;
                                &lt;code class=&quot;classname&quot;&gt;org.hibernate.id.enhanced.SequenceStyleGenerator&lt;/code&gt;
                            &lt;/p&gt;
                        &lt;/li&gt;&lt;li class=&quot;listitem&quot;&gt;
                            &lt;p&gt;
                                &lt;code class=&quot;classname&quot;&gt;org.hibernate.id.enhanced.TableGenerator&lt;/code&gt;
                            &lt;/p&gt;
                        &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;p&gt;
                &lt;/p&gt;
            &lt;/div&gt;&lt;p&gt;
            The idea behind these generators is to port the actual semantics of the identifer value
            generation to the different databases.  For example, the
            &lt;code class=&quot;classname&quot;&gt;org.hibernate.id.enhanced.SequenceStyleGenerator&lt;/code&gt; mimics the behavior of
            a sequence on databases which do not support sequences by using a table.
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;27.5. Database functions&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-functions&quot;/&gt;27.5. Database functions&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;warning&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Warning&lt;/h2&gt;
            &lt;p&gt;
                This is an area in Hibernate in need of improvement.  In terms of portability concerns,
                this function handling currently works pretty well from HQL; however, it is quite lacking
                in all other aspects.
            &lt;/p&gt;
        &lt;/div&gt;

        &lt;p&gt;
            SQL functions can be referenced in many ways by users.  However, not all databases
            support the same set of functions.  Hibernate, provides a means of mapping a
            &lt;span class=&quot;emphasis&quot;&gt;&lt;em&gt;logical&lt;/em&gt;&lt;/span&gt; function name to a delegate which knows how to render
            that particular function, perhaps even using a totally different physical function call.
            &lt;/p&gt;&lt;div xmlns:d=&quot;http://docbook.org/ns/docbook&quot; xmlns:rf=&quot;java:org.jboss.highlight.XhtmlRendererFactory&quot; class=&quot;important&quot; style=&quot;margin-left: 0.5in; margin-right: 0.5in;&quot;&gt;&lt;h2&gt;Important&lt;/h2&gt;
                &lt;p&gt;
                    Technically this function registration is handled through the
                    &lt;code class=&quot;classname&quot;&gt;org.hibernate.dialect.function.SQLFunctionRegistry&lt;/code&gt; class
                    which is intended to allow users to provide custom function definitions without
                    having to provide a custom dialect.  This specific behavior is not fully completed
                    as of yet.
                &lt;/p&gt;
                &lt;p&gt;
                    It is sort of implemented such that users can programatically register functions
                    with the &lt;code class=&quot;classname&quot;&gt;org.hibernate.cfg.Configuration&lt;/code&gt; and those functions
                    will be recognized for HQL.
                &lt;/p&gt;
            &lt;/div&gt;&lt;p&gt;
        &lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=&quot;section&quot; title=&quot;27.6. Type mappings&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;portability-types&quot;/&gt;27.6. Type mappings&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
        

        &lt;p&gt;
            This section scheduled for completion at a later date...
        &lt;/p&gt;

        
    &lt;/div&gt;
&lt;/div&gt;

    &lt;div class=&quot;bibliography&quot; title=&quot;References&quot;&gt;&lt;div class=&quot;titlepage&quot;&gt;&lt;div&gt;&lt;div&gt;&lt;h2 class=&quot;title&quot;&gt;&lt;a id=&quot;d5e10421&quot;/&gt;References&lt;/h2&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
    

    &lt;div class=&quot;biblioentry&quot; title=&quot;Patterns of Enterprise Application Architecture&quot;&gt;&lt;a id=&quot;biblio-PoEAA&quot;/&gt;&lt;p&gt;[&lt;abbr class=&quot;abbrev&quot;&gt;PoEAA&lt;/abbr&gt;] 
        
        &lt;span class=&quot;title&quot;&gt;&lt;em&gt;Patterns of Enterprise Application Architecture&lt;/em&gt;. &lt;/span&gt;
        &lt;span class=&quot;biblioid&quot;&gt;0-321-12742-0. &lt;/span&gt;
        &lt;span class=&quot;authorgroup&quot;&gt;&lt;span class=&quot;firstname&quot;&gt;Martin&lt;/span&gt; &lt;span class=&quot;surname&quot;&gt;Fowler&lt;/span&gt;. &lt;/span&gt;
        &lt;span class=&quot;copyright&quot;&gt;Copyright Â© 2003 Pearson Education, Inc.. &lt;/span&gt;
        &lt;span class=&quot;publisher&quot;&gt;
            &lt;span class=&quot;publishername&quot;&gt;Addison-Wesley Publishing Company. &lt;/span&gt;
        &lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;

    &lt;div class=&quot;biblioentry&quot; title=&quot;Java Persistence with Hibernate&quot;&gt;&lt;a id=&quot;biblio-JPwH&quot;/&gt;&lt;p&gt;[&lt;abbr class=&quot;abbrev&quot;&gt;JPwH&lt;/abbr&gt;] 
        
        &lt;span class=&quot;title&quot;&gt;&lt;em&gt;Java Persistence with Hibernate&lt;/em&gt;. &lt;/span&gt;
        &lt;span class=&quot;subtitle&quot;&gt;Second Edition of Hibernate in Action. &lt;/span&gt;
        &lt;span class=&quot;biblioid&quot;&gt;1-932394-88-5. &lt;/span&gt;
        &lt;span class=&quot;bibliomisc&quot;&gt;
            &lt;a class=&quot;ulink&quot; href=&quot;http://www.manning.com/bauer2&quot;&gt;http://www.manning.com/bauer2&lt;/a&gt;
        . &lt;/span&gt;
        &lt;span class=&quot;authorgroup&quot;&gt;&lt;span class=&quot;firstname&quot;&gt;Christian&lt;/span&gt; &lt;span class=&quot;surname&quot;&gt;Bauer&lt;/span&gt; and &lt;span class=&quot;firstname&quot;&gt;Gavin&lt;/span&gt; &lt;span class=&quot;surname&quot;&gt;King&lt;/span&gt;. &lt;/span&gt;
        &lt;span class=&quot;copyright&quot;&gt;Copyright Â© 2007 Manning Publications Co.. &lt;/span&gt;
        &lt;span class=&quot;publisher&quot;&gt;
            &lt;span class=&quot;publishername&quot;&gt;Manning Publications Co.. &lt;/span&gt;
        &lt;/span&gt;
    &lt;/p&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;&lt;hr xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot;/&gt;&lt;a xmlns=&quot;&quot; xmlns:d=&quot;http://docbook.org/ns/docbook&quot; href=&quot;legalnotice.html&quot;/&gt;&lt;/body&gt;&lt;/html&gt;</stringProp>
          <stringProp name="RESPONSE_TIME">${__Random(100,1000)}</stringProp>
          <stringProp name="LATENCY">${__Random(1,100)}</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">OUT.println(&quot;processing with the BSF post processor&quot;);
OUT.println(&quot;here 1&quot;);
var response = prev.getResponseDataAsString();
OUT.println(&quot;here 2&quot;);

var chapters = //response.getElementsByClassName(&quot;chapter&quot;);
OUT.println(&quot;here 3&quot;);

OUT.println(chapters);

for(var i=0; i &lt; chapters.length; i++) {
	OUT.println(chapters[i].title);
}

OUT.println(&quot;&gt;&gt;&gt;&gt; done &lt;&lt;&lt;&lt;&quot;);

//var links = new Array();
//links.push(&quot;&lt;a href=&apos;#&apos;&gt;hello world 1&lt;/a&gt;&quot;);
//links.push(&quot;&lt;a href=&apos;#&apos;&gt;hello world 2&lt;/a&gt;&quot;);
//links.push(&quot;&lt;a href=&apos;#&apos;&gt;hello world 3&lt;/a&gt;&quot;);
//links.push(&quot;&lt;a href=&apos;#&apos;&gt;hello world 4&lt;/a&gt;&quot;);

for (var i = 0; i &lt; links.length; i++) {
	vars.putObject(&quot;js_link_&quot; + i, links[i]);
}

OUT.println(&quot;done&quot;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">ruby</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">OUT.println(&quot;processing with the BSF post processor&quot;);
OUT.println(&quot;here 1&quot;);
response = prev.getResponseDataAsString();
OUT.println(&quot;here 2&quot;);

chapters = Nokogiri::XML(response);
OUT.println(&quot;here 3&quot;);

#OUT.println(chapters);
#
#for(var i=0; i &lt; chapters.length; i++) {
#	OUT.println(chapters[i].title);
#}

OUT.println(&quot;&gt;&gt;&gt;&gt; done &lt;&lt;&lt;&lt;&quot;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">http://docs.jboss.org/</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/hibernate/orm/4.3/manual/en-US/html_single</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">//OUT.println(&quot;processing label...$Label&quot;)
def response = prev.getResponseDataAsString()
def slurper = new XmlSlurper()
def html = slurper.parseText(response)

def cars = [:]
html.span.each {
	if (it?.@class.text() == &apos;section&apos;) {
		cars &lt;&lt; [title: it.a]
	}
}

int count = 0
cars.each {
  vars.putObject(&quot;title_${count++}&quot;, it)  
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
